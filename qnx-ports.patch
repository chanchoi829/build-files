diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..9799eec
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+*/nto-*/*
+!*/nto-*/Makefile
diff --git a/ComputeLibrary/Makefile b/ComputeLibrary/Makefile
new file mode 100644
index 0000000..1f25400
--- /dev/null
+++ b/ComputeLibrary/Makefile
@@ -0,0 +1,8 @@
+LIST=OS
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/ComputeLibrary/README.md b/ComputeLibrary/README.md
new file mode 100644
index 0000000..941a150
--- /dev/null
+++ b/ComputeLibrary/README.md
@@ -0,0 +1,98 @@
+**NOTE**: QNX ports are only supported from a Linux host operating system
+
+# Compile the port for QNX in a Docker container
+
+Pre-requisite: Install Docker on Ubuntu https://docs.docker.com/engine/install/ubuntu/
+```bash
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+# Now you are in the Docker container
+
+# source qnxsdp-env.sh in
+source ~/qnx800/qnxsdp-env.sh
+
+# Clone ComputeLibrary
+cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/libs/ComputeLibrary.git
+
+# Build ComputeLibrary
+BUILD_EXAMPLES="ON" BUILD_TESTING="ON" QNX_PROJECT_ROOT="$(pwd)/ComputeLibrary" make -C qnx-ports/ComputeLibrary install -j$(nproc)
+```
+
+# Compile the port for QNX on Ubuntu host
+```bash
+# Clone the repos
+mkdir -p ~/qnx_workspace && cd qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git
+git clone https://gitlab.com/qnx/libs/ComputeLibrary.git
+
+# source qnxsdp-env.sh
+source ~/qnx800/qnxsdp-env.sh
+
+# Build ComputeLibrary
+BUILD_EXAMPLES="ON" BUILD_TESTING="ON" QNX_PROJECT_ROOT="$(pwd)/ComputeLibrary" make -C qnx-ports/ComputeLibrary install -j$(nproc)
+```
+
+# How to run tests
+
+scp libraries and tests to the target.
+```bash
+# Move neon test binaries to your QNX target
+scp ${QNX_TARGET}/aarch64le/usr/local/bin/ComputeLibrary_tests/ root@<target-ip-address>:/usr/bin
+
+# Move the ARM Compute Library to your QNX target
+scp ${QNX_TARGET}/aarch64le/usr/local/lib/libarm_compute* root@<target-ip-address>:/usr/lib
+# Move the ARM Compute Library to your QNX target
+scp ${QNX_TARGET}/aarch64le/lib/libgomp.so.1 root@<target-ip-address>:/usr/lib
+```
+
+Run tests on the target.
+```bash
+# ssh into the target
+ssh root@<target-ip-address>
+
+# Run unit tests
+cd /usr/bin/ComputeLibrary_tests
+./arm_compute_validation
+./graph_alexnet
+./graph_deepspeech_v0_4_1
+./graph_edsr
+./graph_googlenet
+./graph_inception_resnet_v1
+./graph_inception_resnet_v2
+./graph_inception_v3
+./graph_inception_v4
+./graph_lenet
+./graph_mobilenet
+./graph_mobilenet_v2
+./graph_resnet12
+./graph_resnet50
+./graph_resnet_v2_50
+./graph_resnext50
+./graph_shufflenet
+./graph_squeezenet
+./graph_squeezenet_v1_1
+./graph_srcnn955
+./graph_ssd_mobilenet
+./graph_vgg16
+./graph_vgg19
+./graph_vgg_vdsr
+./graph_yolov3
+./neon_cnn
+./neon_copy_objects
+./neon_gemm_qasymm8
+./neon_gemm_s8_f32
+./neon_permute
+./neon_scale
+./neon_sgemm
+
+# WIP Tests which currently fail:
+graph_deepspeech_v0_4_1 
+graph_edsr 
+```
diff --git a/ComputeLibrary/common.mk b/ComputeLibrary/common.mk
new file mode 100644
index 0000000..7c32203
--- /dev/null
+++ b/ComputeLibrary/common.mk
@@ -0,0 +1,93 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+include $(MKFILES_ROOT)/qmacros.mk
+
+NAME=computelibrary
+
+QNX_PROJECT_ROOT ?= $(PRODUCT_ROOT)/../
+
+#$(INSTALL_ROOT_$(OS)) is pointing to $QNX_TARGET
+#by default, unless it was manually re-routed to
+#a staging area by setting both INSTALL_ROOT_nto
+#and USE_INSTALL_ROOT
+INSTALL_ROOT ?= $(INSTALL_ROOT_$(OS))
+
+#A prefix path to use **on the target**. This is
+#different from INSTALL_ROOT, which refers to a
+#installation destination **on the host machine**.
+#This prefix path may be exposed to the source code,
+#the linker, or package discovery config files (.pc,
+#CMake config modules, etc.). Default is /usr/local
+PREFIX ?= /usr/local
+
+BUILD_EXAMPLES ?= OFF
+BUILD_TESTING ?= OFF
+
+#choose Release or Debug
+CMAKE_BUILD_TYPE ?= Release
+
+#override 'all' target to bypass the default QNX build system
+ALL_DEPENDENCIES = computelibrary_all
+.PHONY: computelibrary_all install check clean
+
+CFLAGS += $(FLAGS)
+LDFLAGS += -Wl,--build-id=md5
+
+include $(MKFILES_ROOT)/qtargets.mk
+
+#Search paths for all of CMake's find_* functions --
+#headers, libraries, etc.
+#
+#$(QNX_TARGET): for architecture-agnostic files shipped with SDP (e.g. headers)
+#$(QNX_TARGET)/$(CPUVARDIR): for architecture-specific files in SDP
+#$(INSTALL_ROOT)/$(CPUVARDIR): any packages that may have been installed in the staging area
+CMAKE_FIND_ROOT_PATH := $(QNX_TARGET);$(QNX_TARGET)/$(CPUVARDIR);$(INSTALL_ROOT)/$(CPUVARDIR)
+
+#Path to CMake modules; These are CMake files installed by other packages
+#for downstreams to discover them automatically. We support discovering
+#CMake-based packages from inside SDP or in the staging area.
+#Note that CMake modules can automatically detect the prefix they are
+#installed in.
+CMAKE_MODULE_PATH := $(QNX_TARGET)/$(CPUVARDIR)/$(PREFIX)/lib/cmake;$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/cmake
+
+#Headers from INSTALL_ROOT need to be made available by default
+#because CMake and pkg-config do not necessary add it automatically
+#if the include path is "default"
+CFLAGS += -I$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/include -D_QNX_SOURCE
+
+CMAKE_ARGS = -DCMAKE_TOOLCHAIN_FILE=$(PROJECT_ROOT)/qnx.nto.toolchain.cmake \
+             -DCMAKE_SYSTEM_PROCESSOR=$(CPUVARDIR) \
+             -DCMAKE_INSTALL_PREFIX="$(PREFIX)" \
+             -DCMAKE_INSTALL_INCLUDEDIR=$(INSTALL_ROOT)/$(PREFIX)/include \
+             -DCMAKE_STAGING_PREFIX="$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)" \
+             -DCMAKE_MODULE_PATH="$(CMAKE_MODULE_PATH)" \
+             -DCMAKE_FIND_ROOT_PATH="$(CMAKE_FIND_ROOT_PATH)" \
+             -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
+             -DEXTRA_CMAKE_C_FLAGS="$(CFLAGS)" \
+             -DEXTRA_CMAKE_CXX_FLAGS="$(CFLAGS)" \
+             -DEXTRA_CMAKE_ASM_FLAGS="$(FLAGS)" \
+             -DEXTRA_CMAKE_LINKER_FLAGS="$(LDFLAGS)" \
+             -DBUILD_SHARED_LIBS=ON \
+             -DARM_COMPUTE_OPENMP=OFF \
+             -DARM_COMPUTE_BUILD_EXAMPLES=$(BUILD_EXAMPLES) \
+             -DARM_COMPUTE_BUILD_TESTING=$(BUILD_TESTING)
+
+ifndef NO_TARGET_OVERRIDE
+computelibrary_all:
+	@mkdir -p build
+	@cd build && cmake $(CMAKE_ARGS) $(QNX_PROJECT_ROOT)
+	@cd build && make VERBOSE=1 all $(MAKE_ARGS)
+
+install check: computelibrary_all
+	@echo Installing...
+	@cd build && make VERBOSE=1 install all $(MAKE_ARGS)
+	@echo Done.
+
+clean iclean spotless:
+	rm -rf build
+
+uninstall:
+endif
diff --git a/ComputeLibrary/nto-aarch64-le/Makefile b/ComputeLibrary/nto-aarch64-le/Makefile
new file mode 100644
index 0000000..23f8a8f
--- /dev/null
+++ b/ComputeLibrary/nto-aarch64-le/Makefile
@@ -0,0 +1 @@
+include ../common.mk
diff --git a/ComputeLibrary/qnx.nto.toolchain.cmake b/ComputeLibrary/qnx.nto.toolchain.cmake
new file mode 100644
index 0000000..4a38220
--- /dev/null
+++ b/ComputeLibrary/qnx.nto.toolchain.cmake
@@ -0,0 +1,27 @@
+if("$ENV{QNX_HOST}" STREQUAL "")
+    message(FATAL_ERROR "QNX_HOST environment variable not found. Please set the variable to your host's build tools")
+endif()
+if("$ENV{QNX_TARGET}" STREQUAL "")
+    message(FATAL_ERROR "QNX_TARGET environment variable not found. Please set the variable to the qnx target location")
+endif()
+
+set(QNX_HOST "$ENV{QNX_HOST}")
+set(QNX_TARGET "$ENV{QNX_TARGET}")
+
+message(STATUS "using QNX_HOST ${QNX_HOST}")
+message(STATUS "using QNX_TARGET ${QNX_TARGET}")
+
+set(QNX TRUE)
+set(CMAKE_SYSTEM_NAME QNX)
+set(CMAKE_C_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_CXX_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_ASM_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_AR "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ar${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "archiver")
+set(CMAKE_RANLIB "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ranlib${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "ranlib")
+
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_C_FLAGS}" CACHE STRING "c_flags")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_CXX_FLAGS}" CACHE STRING "cxx_flags")
+set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_ASM_FLAGS}" CACHE STRING "asm_flags")
+
+set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "exe_linker_flags")
+set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "so_linker_flags")
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
index 0000000..912e59c
--- /dev/null
+++ b/Dockerfile
@@ -0,0 +1,113 @@
+# Download base image ubuntu 20.04
+FROM ubuntu:20.04
+
+# LABEL about the custom image
+LABEL maintainer="chachoi@blackberry.com"
+LABEL version="0.2.4"
+LABEL description="Docker image for building projects for QNX."
+
+# Disable Prompt During Packages Installation
+ARG DEBIAN_FRONTEND=noninteractive
+
+# Set locale
+RUN apt-get clean && apt update && apt install -y locales software-properties-common
+RUN locale-gen en_US en_US.UTF-8 && \
+	update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
+	export LANG=en_US.UTF-8
+
+# Add ROS2 apt repository
+RUN apt update && apt install -y curl gnupg2 lsb-release && \
+	curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - && \
+	sh -c 'echo "deb [arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'
+
+# Build tools needed for building dependencies
+RUN apt update && apt install -y \
+	build-essential \
+  	git \
+  	libbullet-dev \
+  	python3-colcon-common-extensions \
+  	python3-flake8 \
+	python3-pip \
+	python3-pytest-cov \
+	python3-rosdep \
+	python3-setuptools \
+	python3-vcstool \
+	wget \
+	bc \
+	subversion \
+	autoconf \
+	libtool-bin \
+	libssl-dev \
+	zlib1g-dev \
+	rename \
+	rsync \
+	xsltproc \
+	libtool \
+	automake \
+	pkg-config \
+	gfortran
+
+# Install python 3.11
+RUN add-apt-repository ppa:deadsnakes/ppa -y && \
+	apt update && \
+	apt-get install -y \
+	python3.11-dev \
+	python3.11-venv \
+	python3.11-distutils \
+	rename
+
+# Install CMake 3.18
+RUN cd /opt && sudo wget https://cmake.org/files/v3.18/cmake-3.18.0-Linux-x86_64.sh && \
+	sudo mkdir /opt/cmake-3.18.0-Linux-x86_64 && \
+	yes | sudo sh cmake-3.18.0-Linux-x86_64.sh --prefix=/opt/cmake-3.18.0-Linux-x86_64 --skip-license && \
+	sudo ln -s /opt/cmake-3.18.0-Linux-x86_64/bin/cmake /usr/local/bin/cmake
+
+# Adding user
+ARG USER_NAME
+ARG GROUP_NAME
+ARG USER_ID
+ARG GROUP_ID
+ARG QNX_SDP_VERSION
+
+ENV QNX_SDP_VERSION=$QNX_SDP_VERSION
+
+RUN groupadd --gid ${GROUP_ID} ${GROUP_NAME} && \
+	useradd --uid ${USER_ID} --gid ${GROUP_ID} --groups sudo --no-log-init --create-home ${USER_NAME} && \
+	echo "${USER_NAME}:password" | chpasswd
+
+# Create a folder for python venv
+RUN mkdir -p /usr/local/qnx
+RUN chown ${USER_NAME} /usr/local/qnx
+USER ${USER_NAME}
+
+# Install standard development tools
+# Install pip packages needed for testing
+# Needed to build numpy from source
+RUN cd /usr/local/qnx && \
+	python3.11 -m venv env && \
+	. ./env/bin/activate && \
+	python3 -m pip install -U \
+	pip \
+	empy \
+	lark \
+	Cython \
+	wheel \
+	colcon-common-extensions \
+	vcstool \
+	catkin_pkg \
+	argcomplete \
+	flake8-blind-except \
+	flake8-builtins \
+	flake8-class-newline \
+	flake8-comprehensions \
+	flake8-deprecated \
+	flake8-docstrings \
+	flake8-import-order \
+	flake8-quotes \
+	pytest-repeat \
+	pytest-rerunfailures \
+	pytest
+
+WORKDIR /home/${USER_NAME}
+
+CMD /bin/bash
diff --git a/Fast-DDS/README.md b/Fast-DDS/README.md
new file mode 100644
index 0000000..c21e1ec
--- /dev/null
+++ b/Fast-DDS/README.md
@@ -0,0 +1,7 @@
+# Compile the port for QNX
+
+QNX build files are already upstreamed for Fast-DDS, simply clone the repo and follow the instructions in `build_qnx/README.md`.
+
+```bash
+git clone https://gitlab.com/qnx/libs/Fast-DDS.git
+```
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..d69c8b3
--- /dev/null
+++ b/README.md
@@ -0,0 +1,23 @@
+# qnx-ports
+
+Collection of build files for building QNX ports
+
+Recommended: Use Docker to build the ports
+
+The image includes build tools like CMake and automake to ensure a consistent build environment, but it does not
+include the QNX SDP itself. `./docker-create-container.sh` assumes the QNX SDP is in your home folder and mounts
+your home folder into the container.
+
+Build the Docker image and create a Docker container:
+```bash
+# Pre-requisite: Install Docker on Ubuntu https://docs.docker.com/engine/install/ubuntu/
+# Remember to let Docker run with root privileges: https://docs.docker.com/engine/install/linux-postinstall/
+
+# Clone qnx-ports
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+```
diff --git a/boost/LICENSE.md b/boost/LICENSE.md
new file mode 100644
index 0000000..7c70e18
--- /dev/null
+++ b/boost/LICENSE.md
@@ -0,0 +1,28 @@
+This license covers all the content of the .qnx folder except where a license is included in a file
+
+
+Copyright (c) 2023, BlackBerry Limited. All Rights Reserved.
+
+Boost Software License - Version 1.0 - August 17th, 2003
+
+Permission is hereby granted, free of charge, to any person or organization
+obtaining a copy of the software and accompanying documentation covered by
+this license (the "Software") to use, reproduce, display, distribute,
+execute, and transmit the Software, and to prepare derivative works of the
+Software, and to permit third-parties to whom the Software is furnished to
+do so, all subject to the following:
+
+The copyright notices in the Software and this entire statement, including
+the above license grant, this restriction and the following disclaimer,
+must be included in all copies of the Software, in whole or in part, and
+all derivative works of the Software, unless such copies or derivative
+works are solely in the form of machine-executable object code generated by
+a source language processor.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+DEALINGS IN THE SOFTWARE.
diff --git a/boost/Makefile b/boost/Makefile
new file mode 100644
index 0000000..1f25400
--- /dev/null
+++ b/boost/Makefile
@@ -0,0 +1,8 @@
+LIST=OS
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/boost/README.md b/boost/README.md
new file mode 100644
index 0000000..b894174
--- /dev/null
+++ b/boost/README.md
@@ -0,0 +1,67 @@
+**NOTE**: QNX ports are only supported from a Linux host operating system
+
+# Compile the port for QNX in a Docker container
+
+Pre-requisite: Install Docker on Ubuntu https://docs.docker.com/engine/install/ubuntu/
+```bash
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+# Now you are in the Docker container
+
+# source qnxsdp-env.sh in
+source ~/qnx800/qnxsdp-env.sh
+
+# Clone boost
+cd ~/qnx_workspace
+git clone https://github.com/boostorg/boost.git && cd boost
+git checkout boost-1.82.0
+git submodule update --init --recursive
+
+# Apply a tools patch
+cd tools/build && git apply ../../../qnx-ports/boost/tools_qnx.patch
+cd ~/qnx_workspace
+
+# Build boost
+make -C qnx-ports/boost/ install QNX_PROJECT_ROOT="$(pwd)/boost" -j$(nproc)
+
+# Build and install tests
+./qnx-ports/boost/build_and_install_tests.sh
+```
+
+# Compile the port for QNX
+```bash
+# Clone the qnx-ports and boost repos
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git
+git clone https://github.com/boostorg/boost.git
+
+cd boost
+git checkout boost-1.82.0
+git submodule update --init --recursive
+cd tools/build && git apply ../../../qnx-ports/boost/tools_qnx.patch && cd -
+cd ../
+
+# source qnxsdp-env.sh
+source ~/qnx800/qnxsdp-env.sh
+
+# Build
+make -C qnx-ports/boost/ install QNX_PROJECT_ROOT="$(pwd)/boost" -j$(nproc)
+
+# Build and install tests
+./qnx-ports/boost/build_and_install_tests.sh
+```
+
+Currently, when numpy is installed on your host system, the build fails:
+
+```console
+/usr/local/lib/python3.8/dist-packages/numpy/core/include/numpy/npy_endian.h:13:14: fatal error: endian.h: No such file or directory
+   13 |     #include <endian.h>
+```
+
+The workaround is to run `sudo pip3 uninstall numpy` or `pip3 uninstall numpy` to uninstall numpy
diff --git a/boost/build_and_install_tests.sh b/boost/build_and_install_tests.sh
new file mode 100755
index 0000000..aaf5c3b
--- /dev/null
+++ b/boost/build_and_install_tests.sh
@@ -0,0 +1,62 @@
+#!/bin/bash
+
+if [ -z "$QNX_TARGET" ]; then
+    echo "Please source qnxsdp-env.sh script!"
+    exit
+fi
+
+if [ -z "$PREFIX" ]; then
+    PREFIX="/usr/local"
+fi
+
+# Copy test binaries to QNX_TARGET
+copy_test_binaries() {
+    test_folder_path="./qnx-ports/boost/$1/build/boost/bin.v2/boost_tests"
+    mkdir -p $test_folder_path
+
+    # Find test binaries and copy to $test_folder_path
+    for lib in "./qnx-ports/boost/$1/build/boost/bin.v2/libs"/* ; do
+        lib_name=$(basename $lib)
+        for test_folder in "$lib/test"/* ; do
+            for f in $(find $test_folder -type f);
+            do
+                if [[ -x "$f" ]]
+                then
+                    mkdir -p $test_folder_path/$lib_name
+                    cp $f $test_folder_path/$lib_name
+                fi
+            done
+        done
+    done
+
+    # Install binaries
+    if [[ $1 == "nto-aarch64-le" ]]; then
+        cp -rf $test_folder_path "$QNX_TARGET/aarch64le/$PREFIX/bin"
+
+        echo "Installing tests in $QNX_TARGET/aarch64le/$PREFIX/bin"
+    fi
+
+    if [[ $1 == "nto-x86_64-o" ]]; then
+        cp -rf $test_folder_path "$QNX_TARGET/x86_64/$PREFIX/bin"
+
+        echo "Installing tests in $QNX_TARGET/x86_64/$PREFIX/bin"
+    fi
+
+    mkdir -p $test_folder_path/libs
+
+    for f in $(find ./qnx-ports/boost/$1/build/boost/bin.v2/libs -type f -name *.so*);
+    do
+        cp -f $f $test_folder_path/libs
+    done
+}
+
+# Build all tests under libs
+echo "Start building tests for Boost"
+
+for lib in "./qnx-ports/boost/nto-x86_64-o/build/boost/bin.v2/libs"/* ; do
+    QNX_PROJECT_ROOT="$(pwd)/boost" make -C qnx-ports/boost/ test."$(basename $lib)" -i -j$(nproc)
+done
+
+# Copy test binaries to QNX_TARGET
+copy_test_binaries "nto-aarch64-le"
+copy_test_binaries "nto-x86_64-o"
diff --git a/boost/common.mk b/boost/common.mk
new file mode 100644
index 0000000..b32263f
--- /dev/null
+++ b/boost/common.mk
@@ -0,0 +1,86 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+QNX_PROJECT_ROOT ?= $(PRODUCT_ROOT)/../
+
+#choose release or debug
+BOOST_VARIANT ?= release
+
+#where to install Boost:
+#$(INSTALL_ROOT_$(OS)) is pointing to $QNX_TARGET
+#by default, unless it was manually re-routed to
+#a staging area by setting both INSTALL_ROOT_nto
+#and USE_INSTALL_ROOT
+BOOST_INSTALL_ROOT ?= $(INSTALL_ROOT_$(OS))
+
+#A prefix path to use **on the target**. This is
+#different from INSTALL_ROOT, which refers to a
+#installation destination **on the host machine**.
+#This prefix path may be exposed to the source code,
+#the linker, or package discovery config files (.pc,
+#CMake config modules, etc.). Default is /usr/local
+PREFIX ?= /usr/local
+
+ifneq ($(wildcard $(QNX_TARGET)/usr/include/python3.11),)
+	PYTHON_VERSION = 3.11
+	PYTHON_USER_CONFIG=user-config-python311.jam
+else
+	PYTHON_VERSION = 3.8
+	PYTHON_USER_CONFIG=user-config-python38.jam
+endif
+
+B2_MODULES = --without-mpi --without-graph_parallel
+B2_EXTRA_OPTS =
+
+# list of flags passed to the b2 command which are shared by all target architectures
+B2_OPTIONS = -q -d2 \
+             ${B2_MODULES} \
+             --build-type=minimal target-os=qnxnto toolset=qcc \
+             --prefix=$(BOOST_INSTALL_ROOT) --includedir=$(BOOST_INSTALL_ROOT)/$(PREFIX)/include \
+             --libdir=$(BOOST_INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib \
+             --user-config=$(PROJECT_ROOT)/$(PYTHON_USER_CONFIG) \
+             runtime-link=shared link=shared variant=$(BOOST_VARIANT) define=BOOST_SYSTEM_NO_DEPRECATED \
+             ${B2_EXTRA_OPTS}
+
+FLAGS   += -g -D_QNX_SOURCE
+LDFLAGS += -Wl,--build-id=md5 -lang-c++ -lsocket
+
+FLAGS   += -Vgcc_nto$(CCVER) -Wno-ignored-attributes -I$(PROJECT_ROOT)/libs/predef/include/boost/predef/other
+LDFLAGS += -Vgcc_nto$(CCVER)
+
+#override 'all' target to bypass the default QNX build system
+ALL_DEPENDENCIES = install
+
+include $(MKFILES_ROOT)/qtargets.mk
+
+ifndef NO_TARGET_OVERRIDE
+
+BUILD_DIR = $(PWD)/build
+
+$(PROJECT_ROOT)/b2:
+	$(CP_HOST) $(PROJECT_ROOT)/$(PYTHON_USER_CONFIG) $(QNX_PROJECT_ROOT)/user-config.jam
+	cd $(QNX_PROJECT_ROOT) && ./bootstrap.sh --with-python-version=$(PYTHON_VERSION)
+
+B2_CMD = export CPUVARDIR=$(CPUVARDIR) && \
+		export CCVER=$(CCVER) && \
+		cd $(QNX_PROJECT_ROOT) && ./b2 $(B2_OPTIONS) --build-dir=$(BUILD_DIR) cflags="$(FLAGS)" linkflags="$(LDFLAGS)"
+
+B2_CMD_TEST = export CPUVARDIR=$(CPUVARDIR) && \
+		export CCVER=$(CCVER) && \
+		$(QNX_PROJECT_ROOT)/b2 $(B2_OPTIONS) --build-dir=$(BUILD_DIR) cflags="$(FLAGS)" linkflags="$(LDFLAGS)"
+
+install check: $(PROJECT_ROOT)/b2
+	@mkdir -p build
+	$(B2_CMD) install
+	$(ADD_USAGE_TO_LIBS)
+
+clean iclean spotless:
+	rm -rf build
+
+test.%: $(PROJECT_ROOT)/b2
+	cd $(QNX_PROJECT_ROOT)/libs/$(subst test.,,$@)/test && \
+	$(B2_CMD_TEST) testing.execute=off
+
+endif
diff --git a/boost/nto-aarch64-le/Makefile b/boost/nto-aarch64-le/Makefile
new file mode 100644
index 0000000..ff76e33
--- /dev/null
+++ b/boost/nto-aarch64-le/Makefile
@@ -0,0 +1,6 @@
+CCVER = aarch64
+include ../common.mk
+
+B2_OPTIONS += abi=aapcs
+FLAGS      += -D__arm64 -D__aarch64__ $(VFLAG_le) $(CCVFLAG_le)
+LDFLAGS    += $(VFLAG_le) $(LDVFLAG_le)
diff --git a/boost/nto-x86_64-o/Makefile b/boost/nto-x86_64-o/Makefile
new file mode 100644
index 0000000..33ae217
--- /dev/null
+++ b/boost/nto-x86_64-o/Makefile
@@ -0,0 +1,2 @@
+CCVER = x86_64
+include ../common.mk
diff --git a/boost/tools_qnx.patch b/boost/tools_qnx.patch
new file mode 100644
index 0000000..0948817
--- /dev/null
+++ b/boost/tools_qnx.patch
@@ -0,0 +1,13 @@
+diff --git a/src/tools/qcc.jam b/src/tools/qcc.jam
+index 6ad406701..0e0e8d5d7 100644
+--- a/src/tools/qcc.jam
++++ b/src/tools/qcc.jam
+@@ -38,7 +38,7 @@ toolset.inherit-rules qcc : unix ;
+ rule init ( version ? : command * : options * )
+ {
+     local condition = [ common.check-init-parameters qcc : version $(version) ] ;
+-    local command = [ common.get-invocation-command qcc : QCC : $(command) ] ;
++    local command = [ common.get-invocation-command qcc : qcc : $(command) ] ;
+     common.handle-options qcc : $(condition) : $(command) : $(options) ;
+ }
+ 
diff --git a/boost/user-config-python311.jam b/boost/user-config-python311.jam
new file mode 100644
index 0000000..d42e453
--- /dev/null
+++ b/boost/user-config-python311.jam
@@ -0,0 +1,12 @@
+import os ;
+local QNX_HOST = [ os.environ QNX_HOST ] ;
+local QNX_TARGET = [ os.environ QNX_TARGET ] ;
+local CPUVARDIR = [ os.environ CPUVARDIR ] ;
+
+using python
+     : 3.11
+     : python3
+     : $(QNX_TARGET)/$(CPUVARDIR)/usr/include/python3.11 $(QNX_TARGET)/usr/include/python3.11 $(QNX_TARGET)/usr/include/$(CPUVARDIR)/python3.11
+     : $(QNX_TARGET)/$(CPUVARDIR)/usr/lib
+     : <target-os>qnxnto <toolset>qcc
+     ;
diff --git a/boost/user-config-python38.jam b/boost/user-config-python38.jam
new file mode 100644
index 0000000..757fa73
--- /dev/null
+++ b/boost/user-config-python38.jam
@@ -0,0 +1,12 @@
+import os ;
+local QNX_HOST = [ os.environ QNX_HOST ] ;
+local QNX_TARGET = [ os.environ QNX_TARGET ] ;
+local CPUVARDIR = [ os.environ CPUVARDIR ] ;
+
+using python
+     : 3.8
+     : python3
+     : $(QNX_TARGET)/$(CPUVARDIR)/usr/include/python3.8 $(QNX_TARGET)/usr/include/python3.8 $(QNX_TARGET)/usr/include/$(CPUVARDIR)/python3.8
+     : $(QNX_TARGET)/$(CPUVARDIR)/usr/lib
+     : <target-os>qnxnto <toolset>qcc
+     ;
diff --git a/docker-build-qnx-image.sh b/docker-build-qnx-image.sh
new file mode 100755
index 0000000..a66d979
--- /dev/null
+++ b/docker-build-qnx-image.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+
+QNX_SDP_VERSION=qnx800
+
+docker build -t $QNX_SDP_VERSION \
+  --build-arg USER_NAME="$(id --user --name)" \
+  --build-arg GROUP_NAME="$(id --group --name)" \
+  --build-arg USER_ID="$(id --user)" \
+  --build-arg GROUP_ID="$(id --group)" \
+  --build-arg QNX_SDP_VERSION=$QNX_SDP_VERSION .
diff --git a/docker-create-container.sh b/docker-create-container.sh
new file mode 100755
index 0000000..0960559
--- /dev/null
+++ b/docker-create-container.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+
+QNX_SDP_VERSION=qnx800
+
+docker run -it \
+  --net=host \
+  --privileged \
+  -v $HOME:$HOME \
+  "$QNX_SDP_VERSION:latest" /bin/bash
diff --git a/googletest/Makefile b/googletest/Makefile
new file mode 100644
index 0000000..1f25400
--- /dev/null
+++ b/googletest/Makefile
@@ -0,0 +1,8 @@
+LIST=OS
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/googletest/README.md b/googletest/README.md
new file mode 100644
index 0000000..296cf62
--- /dev/null
+++ b/googletest/README.md
@@ -0,0 +1,59 @@
+**NOTE**: QNX ports are only supported from a Linux host operating system
+
+# Compile the port for QNX in a Docker container
+
+Pre-requisite: Install Docker on Ubuntu https://docs.docker.com/engine/install/ubuntu/
+```bash
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+# Now you are in the Docker container
+
+# source qnxsdp-env.sh in
+source ~/qnx800/qnxsdp-env.sh
+
+# Clone googletest
+cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/libs/googletest.git
+
+# Build googletest
+BUILD_TESTING="ON" QNX_PROJECT_ROOT="$(pwd)/googletest" make -C qnx-ports/googletest install -j$(nproc)
+```
+
+# Compile the port for QNX on Ubuntu host
+```bash
+# Clone the repos
+mkdir -p ~/qnx_workspace && cd qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git
+git clone https://gitlab.com/qnx/libs/googletest.git
+
+# source qnxsdp-env.sh
+source ~/qnx800/qnxsdp-env.sh
+
+# Build
+BUILD_TESTING="ON" QNX_PROJECT_ROOT="$(pwd)/googletest" make -C qnx-ports/googletest install -j$(nproc)
+```
+
+# How to run tests
+
+scp libraries and tests to the target.
+```bash
+scp -r $QNX_TARGET/aarch64le/usr/local/bin/googletest_tests root@<target-ip-address>:/
+scp $QNX_TARGET/aarch64le/usr/local/lib/libg* root@<target-ip-address>:/usr/lib
+```
+
+Run tests on the target.
+```bash
+# ssh into the target
+ssh root@<target-ip-address>
+
+# Run unit tests
+cd /googletest_tests
+chmod +x *
+./gmock-actions_test
+```
diff --git a/googletest/common.mk b/googletest/common.mk
new file mode 100644
index 0000000..334450f
--- /dev/null
+++ b/googletest/common.mk
@@ -0,0 +1,91 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+include $(MKFILES_ROOT)/qmacros.mk
+
+NAME=googletest
+
+QNX_PROJECT_ROOT ?= $(PRODUCT_ROOT)/../
+
+#$(INSTALL_ROOT_$(OS)) is pointing to $QNX_TARGET
+#by default, unless it was manually re-routed to
+#a staging area by setting both INSTALL_ROOT_nto
+#and USE_INSTALL_ROOT
+INSTALL_ROOT ?= $(INSTALL_ROOT_$(OS))
+
+#A prefix path to use **on the target**. This is
+#different from INSTALL_ROOT, which refers to a
+#installation destination **on the host machine**.
+#This prefix path may be exposed to the source code,
+#the linker, or package discovery config files (.pc,
+#CMake config modules, etc.). Default is /usr/local
+PREFIX ?= /usr/local
+
+BUILD_TESTING ?= OFF
+
+#choose Release or Debug
+CMAKE_BUILD_TYPE ?= Release
+
+#override 'all' target to bypass the default QNX build system
+ALL_DEPENDENCIES = googletest_all
+.PHONY: googletest_all install check clean
+
+CFLAGS += $(FLAGS)
+LDFLAGS += -Wl,--build-id=md5
+
+include $(MKFILES_ROOT)/qtargets.mk
+
+#Search paths for all of CMake's find_* functions --
+#headers, libraries, etc.
+#
+#$(QNX_TARGET): for architecture-agnostic files shipped with SDP (e.g. headers)
+#$(QNX_TARGET)/$(CPUVARDIR): for architecture-specific files in SDP
+#$(INSTALL_ROOT)/$(CPUVARDIR): any packages that may have been installed in the staging area
+CMAKE_FIND_ROOT_PATH := $(QNX_TARGET);$(QNX_TARGET)/$(CPUVARDIR);$(INSTALL_ROOT)/$(CPUVARDIR)
+
+#Path to CMake modules; These are CMake files installed by other packages
+#for downstreams to discover them automatically. We support discovering
+#CMake-based packages from inside SDP or in the staging area.
+#Note that CMake modules can automatically detect the prefix they are
+#installed in.
+CMAKE_MODULE_PATH := $(QNX_TARGET)/$(CPUVARDIR)/$(PREFIX)/lib/cmake;$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/cmake
+
+#Headers from INSTALL_ROOT need to be made available by default
+#because CMake and pkg-config do not necessary add it automatically
+#if the include path is "default"
+CFLAGS += -I$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/include
+
+CMAKE_ARGS = -DCMAKE_TOOLCHAIN_FILE=$(PROJECT_ROOT)/qnx.nto.toolchain.cmake \
+             -DCMAKE_INSTALL_PREFIX="$(PREFIX)" \
+             -DCMAKE_STAGING_PREFIX="$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)" \
+             -DCMAKE_MODULE_PATH="$(CMAKE_MODULE_PATH)" \
+             -DCMAKE_INSTALL_INCLUDEDIR="$(INSTALL_ROOT)/$(PREFIX)/include" \
+             -DCMAKE_FIND_ROOT_PATH="$(CMAKE_FIND_ROOT_PATH)" \
+             -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
+             -DEXTRA_CMAKE_C_FLAGS="$(CFLAGS)" \
+             -DEXTRA_CMAKE_CXX_FLAGS="$(CFLAGS)" \
+             -DEXTRA_CMAKE_ASM_FLAGS="$(FLAGS)" \
+             -DEXTRA_CMAKE_LINKER_FLAGS="$(LDFLAGS)" \
+             -DBUILD_SHARED_LIBS=1 \
+             -Dgtest_build_tests=$(BUILD_TESTING) \
+             -Dgtest_build_samples=$(BUILD_TESTING) \
+             -Dgmock_build_tests=$(BUILD_TESTING)
+
+ifndef NO_TARGET_OVERRIDE
+googletest_all:
+	@mkdir -p build
+	@cd build && cmake $(CMAKE_ARGS) $(QNX_PROJECT_ROOT)
+	@cd build && make VERBOSE=1 all $(MAKE_ARGS)
+
+install check: googletest_all
+	@echo Installing...
+	@cd build && make VERBOSE=1 install all $(MAKE_ARGS)
+	@echo Done.
+
+clean iclean spotless:
+	rm -rf build
+
+uninstall:
+endif
diff --git a/googletest/nto-aarch64-le/Makefile b/googletest/nto-aarch64-le/Makefile
new file mode 100644
index 0000000..b14b50e
--- /dev/null
+++ b/googletest/nto-aarch64-le/Makefile
@@ -0,0 +1,3 @@
+include ../common.mk
+
+CMAKE_ARGS += -DCMAKE_SYSTEM_PROCESSOR=aarch64le
diff --git a/googletest/nto-x86_64-o/Makefile b/googletest/nto-x86_64-o/Makefile
new file mode 100644
index 0000000..b142702
--- /dev/null
+++ b/googletest/nto-x86_64-o/Makefile
@@ -0,0 +1,3 @@
+include ../common.mk
+
+CMAKE_ARGS += -DCMAKE_SYSTEM_PROCESSOR=x86_64
\ No newline at end of file
diff --git a/googletest/qnx.nto.toolchain.cmake b/googletest/qnx.nto.toolchain.cmake
new file mode 100644
index 0000000..fa16d86
--- /dev/null
+++ b/googletest/qnx.nto.toolchain.cmake
@@ -0,0 +1,27 @@
+if("$ENV{QNX_HOST}" STREQUAL "")
+    message(FATAL_ERROR "QNX_HOST environment variable not found. Please set the variable to your host's build tools")
+endif()
+if("$ENV{QNX_TARGET}" STREQUAL "")
+    message(FATAL_ERROR "QNX_TARGET environment variable not found. Please set the variable to the qnx target location")
+endif()
+
+set(QNX_HOST "$ENV{QNX_HOST}")
+set(QNX_TARGET "$ENV{QNX_TARGET}")
+
+message(STATUS "using QNX_HOST ${QNX_HOST}")
+message(STATUS "using QNX_TARGET ${QNX_TARGET}")
+
+set(QNX TRUE)
+set(CMAKE_SYSTEM_NAME QNX)
+set(CMAKE_C_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_CXX_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_ASM_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_AR "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ar${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "archiver")
+set(CMAKE_RANLIB "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ranlib${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "ranlib")
+
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_C_FLAGS}" CACHE STRING "c_flags")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} -std=gnu++14 ${EXTRA_CMAKE_CXX_FLAGS}" CACHE STRING "cxx_flags")
+set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_ASM_FLAGS}" CACHE STRING "asm_flags")
+
+set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "exe_linker_flags")
+set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "so_linker_flags")
diff --git a/lighttpd1.4/.gitignore b/lighttpd1.4/.gitignore
new file mode 100644
index 0000000..19893bb
--- /dev/null
+++ b/lighttpd1.4/.gitignore
@@ -0,0 +1,2 @@
+!nto-*/GNUmakefile
+nto-*/Makefile
diff --git a/lighttpd1.4/LICENSE.md b/lighttpd1.4/LICENSE.md
new file mode 100644
index 0000000..ae5590c
--- /dev/null
+++ b/lighttpd1.4/LICENSE.md
@@ -0,0 +1,33 @@
+This license covers all the content of the qnx folder except where a license is included in a file
+
+Copyright (c) 2023, BlackBerry Limited. All Rights Reserved.
+
+Copyright (c) 2004, Jan Kneschke, incremental
+ All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+- Redistributions of source code must retain the above copyright notice, this
+  list of conditions and the following disclaimer.
+
+- Redistributions in binary form must reproduce the above copyright notice,
+  this list of conditions and the following disclaimer in the documentation
+  and/or other materials provided with the distribution.
+
+- Neither the name of the 'incremental' nor the names of its contributors may
+  be used to endorse or promote products derived from this software without
+  specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGE.
+
diff --git a/lighttpd1.4/Makefile b/lighttpd1.4/Makefile
new file mode 100644
index 0000000..1fb317b
--- /dev/null
+++ b/lighttpd1.4/Makefile
@@ -0,0 +1,4 @@
+LIST=OS CPU VARIANT
+MAKEFILE=GNUmakefile
+include recurse.mk
+
diff --git a/lighttpd1.4/README.md b/lighttpd1.4/README.md
new file mode 100644
index 0000000..16bf9ff
--- /dev/null
+++ b/lighttpd1.4/README.md
@@ -0,0 +1,78 @@
+**NOTE**: QNX ports are only supported from a Linux host operating system
+
+# Compile the port for QNX in a Docker container
+
+Pre-requisite: Install Docker on Ubuntu https://docs.docker.com/engine/install/ubuntu/
+```bash
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+# Now you are in the Docker container
+
+# source qnxsdp-env.sh in
+source ~/qnx800/qnxsdp-env.sh
+
+# Clone ComputeLibrary
+cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/libs/lighttpd1.4.git
+
+# Build and install lighttpd binaries to SDP
+QNX_PROJECT_ROOT="$(pwd)/lighttpd1.4" JLEVEL=$(nproc) make -C qnx-ports/lighttpd1.4  install
+```
+
+# Compile the port for QNX on Ubuntu host
+
+## Install dependencies
+
+```bash
+sudo apt install automake pkg-config libtool
+```
+
+## Generate GNU build tool ./configure and all needed Makefiles
+
+```bash
+cd lighttpd1.4
+./autogen.sh
+cd -
+````
+
+## Setup QNX SDP environment
+
+```bash
+source <path-to-sdp>/qnxsdp-env.sh
+```
+
+## Build and install lighttpd binaries to SDP
+
+```bash
+QNX_PROJECT_ROOT="$(pwd)/lighttpd1.4" JLEVEL=$(nproc) make -C qnx-ports/lighttpd1.4  install
+```
+
+**All binary files have to be installed to SDP**
+
+* $QNX_TARGET/x86_64/usr/local/lib/mod_*.so
+* $QNX_TARGET/x86_64/usr/local/sbin/lighttpd
+* $QNX_TARGET/x86_64/usr/local/sbin/lighttpd-angel
+* $QNX_TARGET/aarch64le/usr/local/lib/mod_*.so
+* $QNX_TARGET/aarch64le/usr/local/sbin/lighttpd
+* $QNX_TARGET/aarch64le/usr/local/sbin/lighttpd-angel
+
+## Build and install lighttpd binaries to specific path
+
+```bash
+QNX_PROJECT_ROOT="$(pwd)/lighttpd1.4" JLEVEL=$(nproc) make -C qnx-ports/lighttpd1.4  install USE_INSTALL_ROOT=true INSTALL_ROOT_nto=<full-path>
+```
+
+**All binary files have to be installed to specific path**
+
+* \<full-path\>/x86_64/usr/local/lib/mod_*.so
+* \<full-path\>/x86_64/usr/local/sbin/lighttpd
+* \<full-path\>/x86_64/usr/local/sbin/lighttpd-angel
+* \<full-path\>/aarch64le/usr/local/lib/mod_*.so
+* \<full-path\>/aarch64le/usr/local/sbin/lighttpd
+* \<full-path\>/aarch64le/usr/local/sbin/lighttpd-angel
diff --git a/lighttpd1.4/build-hooks b/lighttpd1.4/build-hooks
new file mode 100644
index 0000000..cfb202b
--- /dev/null
+++ b/lighttpd1.4/build-hooks
@@ -0,0 +1,305 @@
+#!/bin/sh
+
+#
+#    Color definition of terminal outputs
+#
+red="\033[0;31m"
+grn="\033[0;32m"
+yel="\033[1;33m"
+blu="\033[1;34m"
+cls="\033[0m"
+
+#
+#    Default basic prefix is /usr/local
+#
+BASIC_PREFIX="/usr/local"
+
+#
+#    A prefix path to use on the target.
+#
+PREFIX="${INSTALL_ROOT_nto}/${BASIC_PREFIX}"
+
+#
+#    A prefix path to binary on the target.
+#    bindir	${EXEC_PREFIX}/bin
+#    libdir	${EXEC_PREFIX}/lib
+#
+EXEC_PREFIX="${INSTALL_ROOT_nto}/${cpudir}/${BASIC_PREFIX}"
+
+#    Setup of essential configuration parameters
+#
+function hook_preconfigure {
+#
+#    Add needed libraries
+#
+    if [ ${__NTO_VERSION} -ge 800 ]; then
+        echo "QNX version ${__NTO_VERSION} detected."
+        LDFLAGS="$LDFLAGS -lfsnotify"
+    fi
+
+#
+#    Distributive directory
+#
+    DIST_BASE="${QNX_PROJECT_ROOT}"
+
+#
+#    Setup correct pathes for install and build make commands
+#
+    configure_opts="--srcdir=${DIST_BASE}"
+    configure_opts="${configure_opts} --prefix=${PREFIX}"
+    configure_opts="${configure_opts} --exec-prefix=${EXEC_PREFIX}"
+
+
+    #deactivate support of pcre2
+    configure_opts="${configure_opts} --with-pcre2=no"
+}
+
+#
+#    Adjust relative path to ./configure tool
+#
+function hook_configure {
+    ${QNX_PROJECT_ROOT}/configure \
+        ${ac_host:+"--host=${ac_host}"} \
+        ${ac_build:+"--build=${ac_build}"} \
+        ${configure_opts} \
+        ${ac_params:+${CC:+"CC=${CC}"}} \
+        ${ac_params:+${CFLAGS:+"CFLAGS=-O2 ${CFLAGS}"}} \
+        ${ac_params:+${CPPFLAGS:+"CPPFLAGS=${CPPFLAGS}"}} \
+        ${ac_params:+${LDFLAGS:+"LDFLAGS=${LDFLAGS}"}} \
+        ${ac_params:+${CXX:+"CXX=${CXX}"}} \
+        ${ac_params:+${CXXFLAGS:+"CXXFLAGS=-O2 ${CXXFLAGS}"}} \
+        ${ac_params:+${ac_autotools:+${ac_autotools}}} \
+        || Error "configure failed";
+}
+
+function hook_premake {
+    if [ "${make_cmds}" == "check" ] && [ "${TARGET_SYSNAME}" == "nto" ]; then
+        echo "${blu}For target nto suppress tests execution.${cls}"
+        echo "${blu}All tests have to be run on target system.${cls}"
+        make_opts="${make_opts} TESTS="
+    fi
+}
+
+
+function cp_by_sed {
+    for v in ${2}; do
+        _source=${v}
+        _dest=$(echo ${_source} | sed "${1}")
+        _dest_folder="${3}/$(dirname ${_dest})"
+        [ -d "${_dest_folder}" ] || (set -x; mkdir -p ${_dest_folder})
+        (set -x; cp -f ${_source} ${_dest_folder})
+    done
+}
+
+function test_script_gen {
+    script_name=$1
+    script_log=$2
+    unittests_path=$3
+    perltests_path=$4
+    tools_path=$5
+    version=$6
+    perl_path_2_bin="/usr/bin/perl"
+    perl_path_2_lib="/usr/lib/perl5"
+    echo "Creating testsuites script..."
+    echo "#!/bin/sh"                                                        > $script_name || Error "Unexpected error during $script_name initialization";
+    echo "base=\$PWD"                                                      >> $script_name
+
+    echo "echo \"Setup temp directory\""                                   >> $script_name
+    echo "if [ -d \"/tmp\" ]; then"                                        >> $script_name
+    echo "   [ -d \"/var/tmp\" ] || (set -x; ln -sP /tmp /var/tmp)"        >> $script_name
+    echo "else"                                                            >> $script_name
+    echo "   echo \"${red}Error - /tmp directory was not found!${cls}\""   >> $script_name
+    echo "   exit 1"                                                       >> $script_name
+    echo "fi"                                                              >> $script_name
+
+    echo "echo \"Setup perl env\""                                           >> $script_name
+    echo "LOCALPERL=\"no\""                                                  >> $script_name
+    echo "if [ -e \"${perl_path_2_lib}\" ]; then"                            >> $script_name
+    echo "   PERLPATH=\$(which perl)"                                        >> $script_name
+    echo "   [ -e \"${perl_path_2_bin}\" ] || (set -x; ln -sP \$PERLPATH ${perl_path_2_bin})" >> $script_name
+    echo "else"                                                              >> $script_name
+    echo "   LOCALPERL=\"yes\""                                              >> $script_name
+    echo "   (set -x; ln -Ps \$base/${tools_path}/perl  ${perl_path_2_bin})" >> $script_name
+    echo "   (set -x; ln -Ps \$base/${tools_path}/perl5 ${perl_path_2_lib})" >> $script_name
+    echo "fi"                                                                >> $script_name
+
+    echo "echo \"Setup tests env\""                                    >> $script_name
+    echo "export PATH=\$base/${tools_path}:\$PATH"                     >> $script_name
+    echo "export srcdir=\$base/${perltests_path}"                      >> $script_name
+    echo "export top_builddir=\$base"                                  >> $script_name
+    echo "export VERBOSE=1"                                            >> $script_name
+
+    echo "echo \"Setup correct system time\""                          >> $script_name
+    echo "gen_date=$(date +'%s')"                                      >> $script_name
+    echo "gen_date_frm=$(date +'%m%d%H%M%C%y.%S')"                     >> $script_name
+    echo "sys_date=\$(date +'%s')"                                     >> $script_name
+    echo "if (( \$gen_date > \$sys_date )); then"                      >> $script_name
+    echo "   date \$gen_date_frm"                                      >> $script_name
+    echo "   echo \"System time changed to:\$gen_date_frm\""           >> $script_name
+    echo "fi"                                                          >> $script_name
+
+    # Add creation of script log
+    echo "echo \"### Testsuites log file ###\" > $script_log"          >> $script_name
+
+    # Add unit tests
+    echo "Adding unittests to the script:'$script_name'..."
+    number=0
+    unittests_list=$(find ${unittests_path} -type f -executable)
+    echo "### Run all unittests ###"                                   >> $script_name
+    echo "ut_pass=0"                                                   >> $script_name
+    echo "ut_fail=0"                                                   >> $script_name
+    for v in ${unittests_list}; do
+        number=$((number+1));
+        echo "### Suite number: $number"                               >> $script_name
+        echo "result=\$($v 2>&1)"                                      >> $script_name
+        echo "if [ 0 -eq \$? ]; then"                                  >> $script_name
+        echo "   ut_pass=\$((ut_pass+1))"                              >> $script_name
+        echo "   echo \"${grn}PASS${cls}:$v\""                         >> $script_name
+        echo "else"                                                    >> $script_name
+        echo "   ut_fail=\$((ut_fail+1))"                              >> $script_name
+        echo "   echo \"${red}FAIL${cls}:$v\""                         >> $script_name
+        echo "fi"                                                      >> $script_name
+        echo "echo \"### Testsuite:$v ###\" >> $script_log"            >> $script_name
+        echo "echo \"\${result}\" >> $script_log"                      >> $script_name
+        echo "${blu}ADDED${cls}:$v";
+    done
+    echo "echo \"${grn}==========================================${cls}\"" >> $script_name
+    echo "echo \"${grn}Unit tests summary for lighttpd ${version}${cls}\"" >> $script_name
+    echo "echo \"${grn}==========================================${cls}\"" >> $script_name
+    echo "echo \"# TOTAL: ${number}\""                                     >> $script_name
+    echo "echo \"# ${grn}PASS${cls}: \${ut_pass}\""                        >> $script_name
+    echo "echo \"# ${red}FAIL${cls}: \${ut_fail}\""                        >> $script_name
+    echo "echo \"${grn}==========================================${cls}\"" >> $script_name
+    # Add perl tests
+    echo "Adding perltests to the script:'$script_name'..."
+    number=0
+    echo "### Run all perltests ###"                                   >> $script_name
+    echo "pt_pass=0"                                                   >> $script_name
+    echo "pt_fail=0"                                                   >> $script_name
+    for v in "${perltests_path}/prepare.sh" "perl ${perltests_path}/run-tests.pl" "${perltests_path}/cleanup.sh"; do
+        number=$((number+1));
+        echo "### Suite number: $number"                               >> $script_name
+        echo "result=\$($v 2>&1)"                                      >> $script_name
+        echo "if [ 0 -eq \$? ]; then"                                  >> $script_name
+        echo "   pt_pass=\$((pt_pass+1))"                              >> $script_name
+        echo "   echo \"${grn}PASS${cls}:$v\""                         >> $script_name
+        echo "else"                                                    >> $script_name
+        echo "   pt_fail=\$((pt_fail+1))"                              >> $script_name
+        echo "   echo \"${red}FAIL${cls}:$v\""                         >> $script_name
+        echo "fi"                                                      >> $script_name
+        echo "echo \"### Testsuite:$v ###\" >> $script_log"            >> $script_name
+        echo "echo \"\${result}\""                                     >> $script_name
+        echo "echo \"\${result}\" >> $script_log"                      >> $script_name
+        echo "${blu}ADDED${cls}:$v";
+    done
+    echo "echo \"${grn}==========================================${cls}\"" >> $script_name
+    echo "echo \"${grn}Perl tests summary for lighttpd ${version}${cls}\"" >> $script_name
+    echo "echo \"${grn}==========================================${cls}\"" >> $script_name
+    echo "echo \"# TOTAL: ${number}\""                                     >> $script_name
+    echo "echo \"# ${grn}PASS${cls}: \${pt_pass}\""                        >> $script_name
+    echo "echo \"# ${red}FAIL${cls}: \${pt_fail}\""                        >> $script_name
+    echo "if [ 0 -eq \${ut_fail} ] && [ 0 -eq \${pt_fail} ]; then"         >> $script_name
+    echo "echo \"${grn}==========================================${cls}\"" >> $script_name
+    echo "else"                                                            >> $script_name
+    echo "   echo \"${red}\${ut_fail} unittests fails${cls}\""             >> $script_name
+    echo "   echo \"${red}\${pt_fail} perltests fails${cls}\""             >> $script_name
+    echo "   echo \"${red}See test log:$script_log ${cls}\""               >> $script_name
+    echo "fi"                                                              >> $script_name
+
+    # Remove testsuite perl settings
+    echo "if [ \$LOCALPERL == \"yes\" ]; then"                             >> $script_name
+    echo "   echo \"Remove symbols link to local perl\""                   >> $script_name
+    echo "   (set -x; rm ${perl_path_2_bin})"                              >> $script_name
+    echo "   (set -x; rm ${perl_path_2_lib})"                              >> $script_name
+    echo "fi"                                                              >> $script_name
+
+    # Restore correct system time
+    echo "if (( \$gen_date > \$sys_date )); then"                          >> $script_name
+    echo "   echo \"Restore correct system time\""                         >> $script_name
+    echo "   cur_date=\$(date +'%s')"                                      >> $script_name
+    echo "   shift=\$((cur_date - gen_date))"                              >> $script_name
+    echo "   sys_date=\$((sys_date + shift))"                              >> $script_name
+    echo "   sys_date_frm=\$(date -s \$sys_date +'%m%d%H%M%C%y.%S')"       >> $script_name
+    echo "   date \$sys_date_frm"                                          >> $script_name
+    echo "   echo \"Test duration: \$shift\""                              >> $script_name
+    echo "   echo \"System time restored to:\$sys_date_frm\""              >> $script_name
+    echo "fi"                                                              >> $script_name
+
+    chmod +x $script_name
+}
+
+
+function hook_postmake {
+    base_build=$PWD
+    base_build_src="${base_build}/src"
+    base_build_tests="${base_build}/tests"
+
+    base_src="${QNX_PROJECT_ROOT}/src"
+    base_tests="${QNX_PROJECT_ROOT}/tests"
+    base_testsuite_script="base_testsuite.sh"
+
+    testsuite_sdp_bin=${EXEC_PREFIX}/bin/lighttpd_tests
+    tools_bin=tools
+
+    pkg_ver=$(grep -P '^.*version\s+=' ${QNX_PROJECT_ROOT}/SConstruct | grep -oP '\d+\.\d+\.\d+') || "UNKNOWN"
+
+    #
+    # uninstall all lighttpd test from SDP
+    #
+    if [ "${make_cmds}" == "uninstall" ] && [ -d ${testsuite_sdp_bin} ]; then
+        echo "we have to uninstall all lighttpd tests"
+        (set -x; rm -rf ${testsuite_sdp_bin})
+    fi
+
+    #
+    # install all lighttpd tests
+    #
+    if [ "${make_cmds}" == "check" ] && [ "${TARGET_SYSNAME}" == "nto" ] && [ "${SYSNAME}" == "linux" ]; then
+        if [ -d ${base_build_src} ] && [ -d ${base_build_tests} ]; then
+
+            echo "${blu}=========================================================================${cls}"
+            echo "${blu}Generate script to run testsuites for the ${cpu}${cls}"
+            echo "${blu}=========================================================================${cls}"
+
+            echo "Copy testsuite artifacts ..."
+            [ -d "${testsuite_sdp_bin}" ] || (set -x; mkdir -p ${testsuite_sdp_bin})
+
+            src_bin_list=$(find ${base_build_src} -type f -executable )
+            cp_by_sed "s/^.*\/\(src\/.*\)$/\1/"   "${src_bin_list[@]}"   ${testsuite_sdp_bin}
+
+            src_cfg_list=$(find ${base_src} -type f | grep -v -i -P "meson|cmake|makefile|.*\.(h|c)$")
+            cp_by_sed "s/^.*\/\(src\/.*\)$/\1/"   "${src_cfg_list[@]}"   ${testsuite_sdp_bin}
+
+            tests_bin_list=$(find ${base_build_tests} -type f -executable)
+            cp_by_sed "s/^.*\/\(tests\/.*\)$/\1/" "${tests_bin_list[@]}" ${testsuite_sdp_bin}
+
+            tests_cfg_list=$(find ${base_tests} -type f | grep -v -i -P "meson|cmake|makefile|.*\.(h|c)$")
+            cp_by_sed "s/^.*\/\(tests\/.*\)$/\1/" "${tests_cfg_list[@]}" ${testsuite_sdp_bin}
+
+            echo "Copy testsuite tools ..."
+            full_path_tools_bin="${testsuite_sdp_bin}/${tools_bin}"
+            [ -d ${full_path_tools_bin} ] || (set -x; mkdir -p ${full_path_tools_bin} )
+
+            perl_bin=${QNX_TARGET}/${cpudir}/usr/bin/perl
+            (set -x; cp  -f ${perl_bin} ${full_path_tools_bin}) || Error "perl was not found.";
+
+            perl_lib=${QNX_TARGET}/${cpudir}/usr/lib/perl5
+            (set -x; cp -rf ${perl_lib} ${full_path_tools_bin}) || Error "perl libs were not found.";
+
+            expr_bin=${QNX_TARGET}/${cpudir}/usr/bin/expr
+            (set -x; cp  -f ${expr_bin} ${full_path_tools_bin}) || Error "expr tool was not found.";
+
+            echo "Setup build script ..."
+            test_script_gen ${base_testsuite_script} "test-suite.log" "src/t" "tests" ${tools_bin} ${pkg_ver}
+            (set -x; cp  -f ${base_testsuite_script} ${testsuite_sdp_bin})
+
+            echo "${grn}=========================================================================${cls}"
+            echo "${grn}Testsuite summary for lighttpd ${pkg_ver}${cls}"
+            echo "${grn}=========================================================================${cls}"
+
+        else
+            echo "${red}Error - base testsuite for lighttpd ${pkg_ver} was not found!${cls}";
+            exit 1;
+        fi
+    fi
+}
diff --git a/lighttpd1.4/nto-aarch64-le/GNUmakefile b/lighttpd1.4/nto-aarch64-le/GNUmakefile
new file mode 100644
index 0000000..d5e18a7
--- /dev/null
+++ b/lighttpd1.4/nto-aarch64-le/GNUmakefile
@@ -0,0 +1,6 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+include $(MKFILES_ROOT)/qmake-cfg.mk
diff --git a/lighttpd1.4/nto-x86_64-o/GNUmakefile b/lighttpd1.4/nto-x86_64-o/GNUmakefile
new file mode 100644
index 0000000..d5e18a7
--- /dev/null
+++ b/lighttpd1.4/nto-x86_64-o/GNUmakefile
@@ -0,0 +1,6 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+include $(MKFILES_ROOT)/qmake-cfg.mk
diff --git a/mosquitto/LICENSE.md b/mosquitto/LICENSE.md
new file mode 100644
index 0000000..4f1c121
--- /dev/null
+++ b/mosquitto/LICENSE.md
@@ -0,0 +1,7 @@
+This license covers all the content of the qnx folder except where a license is included in a file
+
+
+Copyright (c) 2023, BlackBerry Limited. All Rights Reserved.
+
+This project is dual licensed under the Eclipse Public License 2.0 and the
+Eclipse Distribution License 1.0 as described in the epl-v20 and edl-v10 files.
diff --git a/mosquitto/Makefile b/mosquitto/Makefile
new file mode 100644
index 0000000..1f25400
--- /dev/null
+++ b/mosquitto/Makefile
@@ -0,0 +1,8 @@
+LIST=OS
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/mosquitto/README.md b/mosquitto/README.md
new file mode 100644
index 0000000..e41c4a7
--- /dev/null
+++ b/mosquitto/README.md
@@ -0,0 +1,98 @@
+**NOTE**: QNX ports are only supported from a Linux host operating system
+
+# Compile the port for QNX in a Docker container
+
+Pre-requisite: Install Docker on Ubuntu https://docs.docker.com/engine/install/ubuntu/
+```bash
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+# Now you are in the Docker container
+
+# source qnxsdp-env.sh in
+source ~/qnx800/qnxsdp-env.sh
+
+# Clone mosquitto
+cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/libs/mosquitto.git
+
+# Build mosquitto
+BUILD_TESTING=ON QNX_PROJECT_ROOT="$(pwd)/mosquitto" make -C qnx-ports/mosquitto install -j$(nproc)
+```
+
+# Compile the port for QNX on Ubuntu host
+
+```bash
+# Clone the repos
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git
+git clone https://gitlab.com/qnx/libs/mosquitto.git
+
+# source qnxsdp-env.sh
+source ~/qnx800/qnxsdp-env.sh
+
+# Build
+BUILD_TESTING=ON QNX_PROJECT_ROOT="$(pwd)/mosquitto" make -C qnx-ports/mosquitto install -j$(nproc)
+```
+
+# How to run tests
+
+scp libraries and tests to the target.
+```bash
+scp -r $QNX_TARGET/aarch64le/usr/local/bin/mqtt_tests root@<target-ip-address>:/
+scp $QNX_TARGET/aarch64le/usr/local/lib/lib* root@<target-ip-address>:/usr/lib
+```
+
+Run tests on the target.
+```bash
+# ssh into the target
+ssh root@<target-ip-address>
+
+# Required for running tests
+export SNAP_NAME=mosquitto
+
+# Change directory to the test directory
+cd /mqtt_tests
+TEST_PATH=${PWD}
+
+# Generate ssl stuff
+cd test/ssl
+./gen.sh
+cd $TEST_PATH
+
+# Set permissions
+chmod -R 777 $TEST_PATH/*
+
+# Run broker test
+cd test/broker
+python3 ./test_qnx.py
+cd $TEST_PATH
+
+# Run client test
+cd test/client
+./test_qnx.sh
+cd $TEST_PATH
+
+# Run lib test
+cd test/lib
+python3 ./test_qnx.py
+```
+
+### Failed Test
+#### QEMU: possibly due to VM internet config
+- ./02-subpub-qos2-receive-maximum-1.py
+- ./02-subpub-qos2-receive-maximum-2.py
+- ./06-bridge-clean-session-csF-lcsF.py
+- ./06-bridge-clean-session-csF-lcsN.py
+- ./06-bridge-clean-session-csF-lcsT.py
+- ./06-bridge-clean-session-csT-lcsF.py
+- ./06-bridge-clean-session-csT-lcsN.py
+- ./06-bridge-clean-session-csT-lcsT.py
+- ./08-ssl-bridge.py
+
+#### QEMU and RPI4: failed when run in batch but succeeded when run individually
+- ./02-subscribe-qos1.py
diff --git a/mosquitto/common.mk b/mosquitto/common.mk
new file mode 100644
index 0000000..bff13ca
--- /dev/null
+++ b/mosquitto/common.mk
@@ -0,0 +1,80 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+QNX_PROJECT_ROOT ?= $(PRODUCT_ROOT)/../
+
+#where to install mosquitto:
+#$(INSTALL_ROOT_$(OS)) is pointing to $QNX_TARGET
+#by default, unless it was manually re-routed to
+#a staging area by setting both INSTALL_ROOT_nto
+#and USE_INSTALL_ROOT
+MOSQUITTO_INSTALL_ROOT ?= $(INSTALL_ROOT_$(OS))
+
+#A prefix path to use **on the target**. This is
+#different from INSTALL_ROOT, which refers to a
+#installation destination **on the host machine**.
+#This prefix path may be exposed to the source code,
+#the linker, or package discovery config files (.pc,
+#CMake config modules, etc.). Default is /usr/local
+PREFIX ?= /usr/local
+
+#choose Release or Debug
+CMAKE_BUILD_TYPE ?= Release
+
+BUILD_TESTING ?= OFF
+
+#override 'all' target to bypass the default QNX build system
+ALL_DEPENDENCIES = mosquitto_all
+.PHONY: mosquitto_all
+
+FLAGS   += -g -D_QNX_SOURCE
+LDFLAGS += -lsocket
+
+CMAKE_ARGS = -DCMAKE_TOOLCHAIN_FILE=$(PROJECT_ROOT)/qnx.nto.toolchain.cmake \
+             -DCMAKE_INSTALL_PREFIX=$(MOSQUITTO_INSTALL_ROOT) \
+             -DMOSQUITTO_EXTERNAL_DEPS_INSTALL=$(MOSQUITTO_EXTERNAL_DEPS_INSTALL) \
+             -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
+             -DCMAKE_INSTALL_BINDIR=$(MOSQUITTO_INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/bin \
+             -DCMAKE_INSTALL_INCLUDEDIR=$(MOSQUITTO_INSTALL_ROOT)/$(PREFIX)/include \
+             -DCMAKE_INSTALL_LIBDIR=$(MOSQUITTO_INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib \
+             -DCMAKE_INSTALL_SBINDIR=$(MOSQUITTO_INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/sbin \
+             -DCMAKE_MODULE_PATH=$(PROJECT_ROOT) \
+             -DEXTRA_CMAKE_C_FLAGS="$(FLAGS)" \
+             -DEXTRA_CMAKE_CXX_FLAGS="$(FLAGS)" \
+             -DEXTRA_CMAKE_LINKER_FLAGS="$(LDFLAGS)" \
+             -DCPUVARDIR=$(CPUVARDIR) \
+             -DCXX_LIBTYPE=${CXX_LIBTYPE} \
+             -DGCC_VER=${GCC_VER} \
+             -DWITH_CJSON=OFF \
+             -DDOCUMENTATION=OFF \
+             -DBUILD_TESTING=$(BUILD_TESTING)
+
+include $(MKFILES_ROOT)/qtargets.mk
+
+ifndef NO_TARGET_OVERRIDE
+mosquitto_all:
+	@mkdir -p build
+	@cd build && cmake $(CMAKE_ARGS) $(QNX_PROJECT_ROOT)
+	@cd build && make VERBOSE=1 all $(MAKE_ARGS)
+	@cp -r $(QNX_PROJECT_ROOT)/test ./build
+
+test: mosquitto_all
+	@cd build && make install $(MAKE_ARGS)
+	@cd build/test/broker/c && make -f Makefile.qnx clean && make -f Makefile.qnx $(MAKE_ARGS) TARGET=$(MOSQUITTO_INSTALL_ROOT) CPUVARDIR=$(CPUVARDIR) PREFIX=$(PREFIX)
+	@cd build/test/lib/c && make -f Makefile.qnx clean&& make -f Makefile.qnx $(MAKE_ARGS) TARGET=$(MOSQUITTO_INSTALL_ROOT) CPUVARDIR=$(CPUVARDIR) PREFIX=$(PREFIX)
+	@cd build/test/lib/cpp && make -f Makefile.qnx clean && make -f Makefile.qnx $(MAKE_ARGS) TARGET=$(MOSQUITTO_INSTALL_ROOT) CPUVARDIR=$(CPUVARDIR) PREFIX=$(PREFIX)
+
+install: mosquitto_all test
+	@cd build && make install $(MAKE_ARGS)
+	@mkdir -p $(MOSQUITTO_INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/bin/mqtt_tests/src
+	@cp $(MOSQUITTO_INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/sbin/mosquitto $(MOSQUITTO_INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/bin/mqtt_tests/src
+	@rsync -av --exclude=*/*.c --exclude=*/*.cpp --exclude=*/*.h --exclude=*/Makefile* --exclude=*/old --exclude=*/random --exclude=*/unit build/test $(MOSQUITTO_INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/bin/mqtt_tests/
+
+clean iclean spotless:
+	@rm -fr build
+
+cuninstall uninstall:
+
+endif
diff --git a/mosquitto/nto-aarch64-le/Makefile b/mosquitto/nto-aarch64-le/Makefile
new file mode 100644
index 0000000..b14b50e
--- /dev/null
+++ b/mosquitto/nto-aarch64-le/Makefile
@@ -0,0 +1,3 @@
+include ../common.mk
+
+CMAKE_ARGS += -DCMAKE_SYSTEM_PROCESSOR=aarch64le
diff --git a/mosquitto/nto-x86_64-o/Makefile b/mosquitto/nto-x86_64-o/Makefile
new file mode 100644
index 0000000..b142702
--- /dev/null
+++ b/mosquitto/nto-x86_64-o/Makefile
@@ -0,0 +1,3 @@
+include ../common.mk
+
+CMAKE_ARGS += -DCMAKE_SYSTEM_PROCESSOR=x86_64
\ No newline at end of file
diff --git a/mosquitto/qnx.nto.toolchain.cmake b/mosquitto/qnx.nto.toolchain.cmake
new file mode 100644
index 0000000..fdd35cf
--- /dev/null
+++ b/mosquitto/qnx.nto.toolchain.cmake
@@ -0,0 +1,43 @@
+if("$ENV{QNX_HOST}" STREQUAL "")
+    message(FATAL_ERROR "QNX_HOST environment variable not found. Please set the variable to your host's build tools")
+endif()
+if("$ENV{QNX_TARGET}" STREQUAL "")
+    message(FATAL_ERROR "QNX_TARGET environment variable not found. Please set the variable to the qnx target location")
+endif()
+
+if(CMAKE_HOST_WIN32)
+    set(HOST_EXECUTABLE_SUFFIX ".exe")
+    #convert windows paths to cmake paths
+    file(TO_CMAKE_PATH "$ENV{QNX_HOST}" QNX_HOST)
+    file(TO_CMAKE_PATH "$ENV{QNX_TARGET}" QNX_TARGET)
+else()
+    set(QNX_HOST "$ENV{QNX_HOST}")
+    set(QNX_TARGET "$ENV{QNX_TARGET}")
+endif()
+
+message(STATUS "using QNX_HOST ${QNX_HOST}")
+message(STATUS "using QNX_TARGET ${QNX_TARGET}")
+
+set(QNX TRUE)
+
+set(CMAKE_SYSTEM_NAME QNX)
+set(CMAKE_C_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_CXX_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_AR "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ar${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "archiver")
+set(CMAKE_RANLIB "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ranlib${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "ranlib")
+
+if ("${GCC_VER}" STREQUAL "")
+    set(GCC_VERSION "" CACHE STRING "gcc_ver")
+else()
+    set(GCC_VERSION "${GCC_VER}," CACHE STRING "gcc_ver")
+endif()
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -V${GCC_VERSION}gcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_C_FLAGS}" CACHE STRING "c_flags")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -V${GCC_VERSION}gcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_CXX_FLAGS}" CACHE STRING "cxx_flags")
+
+set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "exe_linker_flags")
+set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "so_linker_flags")
+
+set(CMAKE_SKIP_RPATH TRUE CACHE BOOL "If set, runtime paths are not added when using shared libraries.")
+set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
+set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
+set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
diff --git a/mosquitto/test/README.md b/mosquitto/test/README.md
new file mode 100644
index 0000000..ec88010
--- /dev/null
+++ b/mosquitto/test/README.md
@@ -0,0 +1,52 @@
+# Testing mosquitto on QNX
+
+mosquitto normally wants to be tested on the same machine it was built on. This obviously doesn't work when cross-compiling for QNX. The gist is to build, then copy the whole mosquitto source tree on a target. This will include all the relevant files and directory structure which mosquitto expects when running its test suite.
+
+# Running the Test Suite
+Once the target has booted run the tests
+
+```bash
+# Required for running tests
+export SNAP_NAME=mosquitto
+
+# Change directory to the test directory
+cd mqtt_tests
+TEST_PATH=${PWD}
+
+# Generate ssl stuff
+cd test/ssl
+./gen.sh
+cd $TEST_PATH
+
+# Set permissions
+chmod -R 777 $TEST_PATH/*
+
+# Run broker test
+cd test/broker
+python3 ./test_qnx.py
+cd $TEST_PATH
+
+# Run client test
+cd test/client
+./test_qnx.sh
+cd $TEST_PATH
+
+# Run lib test
+cd test/lib
+python3 ./test_qnx.py
+```
+
+### Failed Test
+#### QEMU: possibly due to VM internet config
+- ./02-subpub-qos2-receive-maximum-1.py
+- ./02-subpub-qos2-receive-maximum-2.py
+- ./06-bridge-clean-session-csF-lcsF.py
+- ./06-bridge-clean-session-csF-lcsN.py
+- ./06-bridge-clean-session-csF-lcsT.py
+- ./06-bridge-clean-session-csT-lcsF.py
+- ./06-bridge-clean-session-csT-lcsN.py
+- ./06-bridge-clean-session-csT-lcsT.py
+- ./08-ssl-bridge.py
+
+#### QEMU and RPI4: failed when run in batch but succeeded when run individually
+- ./02-subscribe-qos1.py
\ No newline at end of file
diff --git a/numpy/Makefile b/numpy/Makefile
new file mode 100644
index 0000000..1f25400
--- /dev/null
+++ b/numpy/Makefile
@@ -0,0 +1,8 @@
+LIST=OS
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/numpy/README.md b/numpy/README.md
new file mode 100644
index 0000000..32a8c29
--- /dev/null
+++ b/numpy/README.md
@@ -0,0 +1,104 @@
+**NOTE**: QNX ports are only supported from a Linux host operating system
+
+# Compile the port for QNX in a Docker container
+
+Pre-requisite: Install Docker on Ubuntu https://docs.docker.com/engine/install/ubuntu/
+```bash
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+# Now you are in the Docker container
+
+# source qnxsdp-env.sh in
+source ~/qnx800/qnxsdp-env.sh
+
+# source python3.11 venv script
+source /usr/local/qnx/env/bin/activate
+
+# Clone numpy
+cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/libs/numpy.git && cd numpy
+git submodule update --init --recursive
+cd ~/qnx_workspace
+
+# Build numpy
+QNX_PROJECT_ROOT="$(pwd)/numpy" make -C qnx-ports/numpy install -j$(nproc)
+```
+
+# Compile the port for QNX on Ubuntu host
+```bash
+# Clone the repos
+mkdir -p ~/qnx_workspace && cd qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git
+git clone https://gitlab.com/qnx/libs/numpy.git && cd numpy
+git submodule update --init --recursive
+cd -
+
+# Install python3.11 and gfortran
+sudo add-apt-repository ppa:deadsnakes/ppa
+sudo apt-get install -y python3.11-dev python3.11-venv python3.11-distutils software-properties-common gfortran
+
+# Create a python virtual environment and install necessary packages
+python3.11 -m venv env
+source env/bin/activate
+pip install -U pip Cython wheel
+
+# source qnxsdp-env.sh
+source ~/qnx800/qnxsdp-env.sh
+
+# Build numpy
+QNX_PROJECT_ROOT="$(pwd)/numpy" make -C qnx-ports/numpy install -j$(nproc)
+```
+
+# How to run tests
+
+Setup the target environment
+```bash
+# scp numpy
+scp -r $QNX_TARGET/aarch64le/usr/local/lib/python3.11/site-packages/numpy root@<target-ip-address>:/usr/lib/python3.11/site-packages
+
+# Update system time
+ntpdate -sb 0.pool.ntp.org 1.pool.ntp.org
+
+# Install pip to install pytest
+export TMPDIR=/
+python3 -m ensurepip --root .
+pip3 install pytest -t /usr/lib/python3.11/site-packages/
+pip3 install hypothesis -t /usr/lib/python3.11/site-packages/
+
+# Start the python3 interpretor on Raspberry Pi
+python3
+```
+
+Run tests in the python3 interpretor.
+```bash
+# Run the following python code
+import numpy
+
+numpy.test(label='fast', verbose=2)
+```
+
+WIP all tests pass except:
+```console
+test_longdouble.py:43: AssertionError
+
+ACTUAL: 1.0
+E DESIRED: 1.0000000000000000001
+
+test_scalarprint.py:276: AssertionError
+
+ACTUAL: ' -10.1999999999999992895'
+E DESIRED: ' -10.2 '
+
+test_umath.py:2235: AssertionError
+
+ACTUAL: 0.0
+E DESIRED: inf
+
+test_umath.py:4179: RuntimeWarning: divide by zero encountered in divide
+```
diff --git a/numpy/common.mk b/numpy/common.mk
new file mode 100644
index 0000000..e1e984f
--- /dev/null
+++ b/numpy/common.mk
@@ -0,0 +1,115 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+include $(MKFILES_ROOT)/qmacros.mk
+
+NAME=numpy
+
+QNX_PROJECT_ROOT ?= $(PRODUCT_ROOT)/../
+
+#$(INSTALL_ROOT_$(OS)) is pointing to $QNX_TARGET
+#by default, unless it was manually re-routed to
+#a staging area by setting both INSTALL_ROOT_nto
+#and USE_INSTALL_ROOT
+INSTALL_ROOT ?= $(INSTALL_ROOT_$(OS))
+
+#A prefix path to use **on the target**. This is
+#different from INSTALL_ROOT, which refers to a
+#installation destination **on the host machine**.
+#This prefix path may be exposed to the source code,
+#the linker, or package discovery config files (.pc,
+#CMake config modules, etc.). Default is /usr/local
+PREFIX ?= /usr/local
+
+BUILD_TESTING ?= OFF
+
+#choose Release or Debug
+CMAKE_BUILD_TYPE ?= Release
+
+#override 'all' target to bypass the default QNX build system
+ALL_DEPENDENCIES = numpy_all
+.PHONY: numpy_all install check clean
+
+LDFLAGS += -Wl,--build-id=md5
+
+include $(MKFILES_ROOT)/qtargets.mk
+
+ifeq ($(CPUVARDIR),aarch64le)
+NTO_DIR_NAME=nto-aarch64-le
+else
+NTO_DIR_NAME=nto-x86_64-o
+endif
+
+NTO_NAME=$(CPU)
+GCC_NAME=$(CPUVARDIR)
+
+NUMPY_ROOT = $(PROJECT_ROOT)/
+
+NUMPY_VERSION = 1.25.0
+
+EXPORT_PY  = export CC=$(QNX_HOST)/usr/bin/qcc \
+             export CXX=$(QNX_HOST)/usr/bin/qcc \
+             export CFLAGS="-Vgcc_nto$(GCC_NAME)" \
+             export CPPFLAGS="-D_POSIX_THREADS -Wno-implicit-function-declaration -Wno-stringop-overflow -Wno-unused-but-set-variable " \
+             export CXXFLAGS=$(CFLAGS) \
+             export LDSHARED=$(QNX_HOST)/usr/bin/qcc \
+             export LDFLAGS="-shared -L$(QNX_TARGET)/$(CPUVARDIR)/lib:$(QNX_TARGET)/$(CPUVARDIR)/usr/lib" \
+             export host_alias=nto$(CPUVARDIR) \
+             export AR="$(QNX_HOST)/usr/bin/nto$(NTO_NAME)-ar" \
+             export AS="$(QNX_HOST)/usr/bin/nto$(NTO_NAME)-as" \
+             export RANLIB="$(QNX_HOST)/usr/bin/nto$(NTO_NAME)-ranlib" \
+             export LD_LIBRARY_PATH=$(QNX_HOST)/usr/lib:$(LD_LIBRARY_PATH) \
+             export PATH=$(QNX_HOST)/usr/lib:$(QNX_HOST)/usr/bin:$(PATH) \
+             export BLAS=None \
+             export LAPACK=None \
+             export ATLAS=None \
+             export NUMPY_VERSION=$(NUMPY_VERSION) \
+             export NPY_DISABLE_SVML=1 \
+             export SETUPTOOLS_USE_DISTUTILS=stdlib \
+
+
+BUILD_FLAGS =  --build-temp=$(PROJECT_ROOT)/$(NTO_DIR_NAME)/tmp \
+               --build-lib=$(PROJECT_ROOT)/$(NTO_DIR_NAME)/lib \
+
+BUILD_EXT_FLAGS = -I"$(QNX_TARGET)/usr/include:$(QNX_TARGET)/usr/include/python3.11:$(QNX_TARGET)/$(CPUVARDIR)/usr/include:$(QNX_TARGET)/$(CPUVARDIR)/usr/include/python3.11:$(QNX_TARGET)/usr/include/$(CPUVARDIR)/python3.11" \
+                  -L"$(QNX_TARGET)/$(CPUVARDIR)/lib:$(QNX_TARGET)/$(CPUVARDIR)/usr/lib" \
+                  -lc++ \
+                  -b"$(PROJECT_ROOT)/$(NTO_DIR_NAME)/lib" \
+
+ifndef NO_TARGET_OVERRIDE
+
+numpy_all:
+	cd $(NUMPY_ROOT) && \
+	rm -rf build && \
+	$(EXPORT_PY) && python3 $(QNX_PROJECT_ROOT)/setup.py build_ext $(BUILD_EXT_FLAGS) build $(BUILD_FLAGS) dist_info && \
+	find $(NUMPY_ROOT)/$(NTO_DIR_NAME) -name "*.cpython-311.so" | xargs rm -rf && \
+	find $(NUMPY_ROOT)/$(NTO_DIR_NAME) -name "*.so" | sed  'p;s|\..*so|.cpython-311.so|' | xargs -n2 mv
+	cp -rf $(QNX_PROJECT_ROOT)/numpy/typing/tests/data $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/typing/tests
+	cp -rf $(QNX_PROJECT_ROOT)/numpy/lib/tests/data $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/lib/tests
+	cp -rf $(QNX_PROJECT_ROOT)/numpy/core/tests/data $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/core/tests
+	cp -rf $(QNX_PROJECT_ROOT)/numpy/random/tests/data $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/random/tests
+	rm -f  $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/fft/tests/test_pocketfft.py # segfault
+	rm -f $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/core/tests/test_limited_api.py # Cannot test compiling in QNX
+	rm -f $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/typing/tests/test_isfile.py # There are no .pyi files to check for in QNX
+	rm -rf $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/distutils/tests
+	rm -f $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/core/tests/test_mem_policy.py
+	touch $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/py.typed # Needed for test_isfile.py
+	cp -r $(QNX_PROJECT_ROOT)/numpy/f2py/src $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/f2py/
+	cp -r $(QNX_PROJECT_ROOT)/numpy/f2py/tests/src $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy/f2py/tests/
+
+install check: numpy_all
+	mkdir -p $(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/python3.11/site-packages/
+	$(CP_HOST) -rf $(NUMPY_ROOT)/$(NTO_DIR_NAME)/lib/numpy $(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/python3.11/site-packages/
+	$(CP_HOST) -rf $(QNX_PROJECT_ROOT)/numpy/core/include $(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/python3.11/site-packages/numpy/core/
+	$(CP_HOST) -rf $(QNX_PROJECT_ROOT)/numpy/random/include $(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/python3.11/site-packages/numpy/random/
+	$(CP_HOST) $(QNX_PROJECT_ROOT)/build/src*/numpy/core/include/numpy/*.h $(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/python3.11/site-packages/numpy/core/include/numpy/
+	$(CP_HOST) -rf $(QNX_PROJECT_ROOT)/numpy*dist-info $(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/python3.11/site-packages/numpy-$(NUMPY_VERSION).dist-info
+
+clean iclean spotless:
+	rm -rf $(NUMPY_ROOT)/build
+
+uninstall quninstall huninstall cuninstall:
+	rm -rf $(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/python3.11/site-packages/numpy
+endif
\ No newline at end of file
diff --git a/numpy/nto-aarch64-le/Makefile b/numpy/nto-aarch64-le/Makefile
new file mode 100644
index 0000000..b14b50e
--- /dev/null
+++ b/numpy/nto-aarch64-le/Makefile
@@ -0,0 +1,3 @@
+include ../common.mk
+
+CMAKE_ARGS += -DCMAKE_SYSTEM_PROCESSOR=aarch64le
diff --git a/numpy/nto-x86_64-o/Makefile b/numpy/nto-x86_64-o/Makefile
new file mode 100644
index 0000000..b142702
--- /dev/null
+++ b/numpy/nto-x86_64-o/Makefile
@@ -0,0 +1,3 @@
+include ../common.mk
+
+CMAKE_ARGS += -DCMAKE_SYSTEM_PROCESSOR=x86_64
\ No newline at end of file
diff --git a/opencv/Makefile b/opencv/Makefile
new file mode 100644
index 0000000..1f25400
--- /dev/null
+++ b/opencv/Makefile
@@ -0,0 +1,8 @@
+LIST=OS
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/opencv/README.md b/opencv/README.md
new file mode 100644
index 0000000..5d93044
--- /dev/null
+++ b/opencv/README.md
@@ -0,0 +1,123 @@
+**NOTE**: QNX ports are only supported from a Linux host operating system
+
+# Compile the port for QNX in a Docker container
+
+Pre-requisite: Install Docker on Ubuntu https://docs.docker.com/engine/install/ubuntu/
+```bash
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+# Now you are in the Docker container
+
+# source qnxsdp-env.sh in
+source ~/qnx800/qnxsdp-env.sh
+
+# source python3.11 venv script
+source /usr/local/qnx/env/bin/activate
+
+# Clone numpy
+cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/libs/opencv.git
+git clone https://gitlab.com/qnx/libs/numpy.git && cd numpy
+git submodule update --init --recursive
+cd ~/qnx_workspace
+
+# Build numpy first
+QNX_PROJECT_ROOT="$(pwd)/numpy" make -C qnx-ports/numpy install -j$(nproc)
+
+# Build opencv
+BUILD_TESTING="ON" QNX_PROJECT_ROOT="$(pwd)/opencv" make -C qnx-ports/opencv install -j$(nproc)
+```
+
+# Compile the port for QNX
+```bash
+# Clone the repos
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git
+# opencv depends on numpy
+git clone https://gitlab.com/qnx/libs/numpy.git
+git clone https://gitlab.com/qnx/libs/opencv.git
+
+# Build numpy
+cd numpy
+git submodule update --init --recursive
+cd -
+
+# Install python3.11 and gfortran
+sudo add-apt-repository ppa:deadsnakes/ppa
+sudo apt-get install -y python3.11-dev python3.11-venv python3.11-distutils software-properties-common gfortran
+
+# Create a python virtual environment and install necessary packages
+python3.11 -m venv env
+source env/bin/activate
+pip install -U pip Cython wheel
+
+# source qnxsdp-env.sh
+source ~/qnx800/qnxsdp-env.sh
+
+# Build numpy first
+PREFIX="/usr" QNX_PROJECT_ROOT="$(pwd)/numpy" make -C qnx-ports/numpy install -j$(nproc)
+
+# Build opencv
+BUILD_TESTING="ON" QNX_PROJECT_ROOT="$(pwd)/opencv" make -C qnx-ports/opencv install -j$(nproc)
+```
+
+# How to run tests
+
+Set up the test environment
+```bash
+# On your development machine, clone opencv_extra
+git clone git@github.com:opencv/opencv_extra.git && cd opencv_extra
+git checkout 4.9.0
+
+# scp opencv_extra's testdata to / on your target
+scp -r testdata root@<target-ip-address>:/
+
+# scp opencv libraries
+scp $QNX_TARGET/aarch64le/usr/local/lib/libopencv* root@<target-ip-address>:/usr/lib
+
+# scp opencv tests
+scp -r $QNX_TARGET/aarch64le/usr/local/bin/opencv_tests root@<target-ip-address>:/usr/bin
+```
+
+Run tests on the target.
+```bash
+# ssh into the target
+ssh root@<target-ip-address>
+
+# Run tests
+cd /usr/bin/opencv_tests
+chmod +x
+
+export OPENCV_TEST_DATA_PATH=/testdata
+
+./opencv_perf_calib3d
+./opencv_perf_core
+./opencv_perf_dnn
+./opencv_perf_features2d
+./opencv_perf_imgcodecs
+./opencv_perf_imgproc
+./opencv_perf_objdetect
+./opencv_perf_photo
+./opencv_perf_stitching
+./opencv_perf_video
+./opencv_perf_videoio
+./opencv_test_calib3d
+./opencv_test_core
+./opencv_test_dnn
+./opencv_test_features2d
+./opencv_test_flann
+./opencv_test_highgui
+./opencv_test_imgcodecs
+./opencv_test_imgproc
+./opencv_test_ml
+./opencv_test_objdetect
+./opencv_test_photo
+./opencv_test_stitching
+./opencv_test_video
+./opencv_test_videoio
+```
diff --git a/opencv/common.mk b/opencv/common.mk
new file mode 100644
index 0000000..b5ef9fe
--- /dev/null
+++ b/opencv/common.mk
@@ -0,0 +1,104 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+include $(MKFILES_ROOT)/qmacros.mk
+
+NAME=opencv
+
+QNX_PROJECT_ROOT ?= $(PRODUCT_ROOT)/../
+
+#$(INSTALL_ROOT_$(OS)) is pointing to $QNX_TARGET
+#by default, unless it was manually re-routed to
+#a staging area by setting both INSTALL_ROOT_nto
+#and USE_INSTALL_ROOT
+INSTALL_ROOT ?= $(INSTALL_ROOT_$(OS))
+
+#A prefix path to use **on the target**. This is
+#different from INSTALL_ROOT, which refers to a
+#installation destination **on the host machine**.
+#This prefix path may be exposed to the source code,
+#the linker, or package discovery config files (.pc,
+#CMake config modules, etc.). Default is /usr/local
+PREFIX ?= /usr/local
+
+BUILD_TESTING ?= OFF
+
+#choose Release or Debug
+CMAKE_BUILD_TYPE ?= Release
+
+#override 'all' target to bypass the default QNX build system
+ALL_DEPENDENCIES = opencv_all
+.PHONY: opencv_all install check clean
+
+CFLAGS += $(FLAGS)
+LDFLAGS += -Wl,--build-id=md5
+
+include $(MKFILES_ROOT)/qtargets.mk
+
+#Search paths for all of CMake's find_* functions --
+#headers, libraries, etc.
+#
+#$(QNX_TARGET): for architecture-agnostic files shipped with SDP (e.g. headers)
+#$(QNX_TARGET)/$(CPUVARDIR): for architecture-specific files in SDP
+#$(INSTALL_ROOT)/$(CPUVARDIR): any packages that may have been installed in the staging area
+CMAKE_FIND_ROOT_PATH := $(QNX_TARGET);$(QNX_TARGET)/$(CPUVARDIR);$(INSTALL_ROOT)/$(CPUVARDIR)
+
+#Path to CMake modules; These are CMake files installed by other packages
+#for downstreams to discover them automatically. We support discovering
+#CMake-based packages from inside SDP or in the staging area.
+#Note that CMake modules can automatically detect the prefix they are
+#installed in.
+CMAKE_MODULE_PATH := $(QNX_TARGET)/$(CPUVARDIR)/$(PREFIX)/lib/cmake;$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/cmake
+
+#Headers from INSTALL_ROOT need to be made available by default
+#because CMake and pkg-config do not necessary add it automatically
+#if the include path is "default"
+CFLAGS += -I$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/include -D_QNX_SOURCE
+
+CMAKE_ARGS = -DCMAKE_TOOLCHAIN_FILE=$(PROJECT_ROOT)/qnx.nto.toolchain.cmake \
+             -DCMAKE_INSTALL_PREFIX="$(PREFIX)" \
+             -DCMAKE_STAGING_PREFIX="$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)" \
+             -DCMAKE_MODULE_PATH="$(CMAKE_MODULE_PATH)" \
+             -DCMAKE_FIND_ROOT_PATH="$(CMAKE_FIND_ROOT_PATH)" \
+             -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
+             -DEXTRA_CMAKE_C_FLAGS="$(CFLAGS)" \
+             -DEXTRA_CMAKE_CXX_FLAGS="$(CFLAGS)" \
+             -DEXTRA_CMAKE_ASM_FLAGS="$(FLAGS)" \
+             -DEXTRA_CMAKE_LINKER_FLAGS="$(LDFLAGS)" \
+             -DBUILD_SHARED_LIBS=1 \
+             -DCMAKE_INSTALL_INCLUDEDIR=$(INSTALL_ROOT)/$(PREFIX)/include \
+             -DOPENCV_OTHER_INSTALL_PATH=$(INSTALL_ROOT)/$(PREFIX)/share \
+             -DQNX_PYTHON_INSTALL_PATH=$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib/python3.11/site-packages \
+             -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
+             -DCMAKE_NO_SYSTEM_FROM_IMPORTED=ON \
+             -DCPU=$(CPU) \
+             -DWITH_QT=OFF \
+             -DWITH_GTK=OFF \
+             -DBUILD_opencv_gapi=OFF \
+             -DBUILD_PERF_TESTS=$(BUILD_TESTING) \
+             -DBUILD_TESTS=$(BUILD_TESTING) \
+             -DCPUVARDIR=$(CPUVARDIR) \
+             -DWITH_JASPER=OFF \
+             -DWITH_IPP=OFF \
+             -DBUILD_opencv_python3=ON \
+             -DBUILD_opencv_python_bindings_generator=ON \
+             -DOPENCV_TEST_DATA_INSTALL_PATH="/testdata" \
+
+ifndef NO_TARGET_OVERRIDE
+opencv_all:
+	@mkdir -p build
+	@cd build && cmake $(CMAKE_ARGS) $(QNX_PROJECT_ROOT)
+	@cd build && make VERBOSE=1 all $(MAKE_ARGS)
+
+install check: opencv_all
+	@echo Installing...
+	@cd build && make VERBOSE=1 install all $(MAKE_ARGS)
+	@echo Done.
+
+clean iclean spotless:
+	rm -rf build
+
+uninstall:
+endif
diff --git a/opencv/nto-aarch64-le/Makefile b/opencv/nto-aarch64-le/Makefile
new file mode 100644
index 0000000..b14b50e
--- /dev/null
+++ b/opencv/nto-aarch64-le/Makefile
@@ -0,0 +1,3 @@
+include ../common.mk
+
+CMAKE_ARGS += -DCMAKE_SYSTEM_PROCESSOR=aarch64le
diff --git a/opencv/nto-x86_64-o/Makefile b/opencv/nto-x86_64-o/Makefile
new file mode 100644
index 0000000..b142702
--- /dev/null
+++ b/opencv/nto-x86_64-o/Makefile
@@ -0,0 +1,3 @@
+include ../common.mk
+
+CMAKE_ARGS += -DCMAKE_SYSTEM_PROCESSOR=x86_64
\ No newline at end of file
diff --git a/opencv/qnx.nto.toolchain.cmake b/opencv/qnx.nto.toolchain.cmake
new file mode 100644
index 0000000..a259316
--- /dev/null
+++ b/opencv/qnx.nto.toolchain.cmake
@@ -0,0 +1,97 @@
+if("$ENV{QNX_HOST}" STREQUAL "")
+    message(FATAL_ERROR "QNX_HOST environment variable not found. Please set the variable to your host's build tools")
+endif()
+if("$ENV{QNX_TARGET}" STREQUAL "")
+    message(FATAL_ERROR "QNX_TARGET environment variable not found. Please set the variable to the qnx target location")
+endif()
+
+set(QNX_HOST "$ENV{QNX_HOST}")
+set(QNX_TARGET "$ENV{QNX_TARGET}")
+
+message(STATUS "using QNX_HOST ${QNX_HOST}")
+message(STATUS "using QNX_TARGET ${QNX_TARGET}")
+
+set(CMAKE_SYSTEM_NAME QNX)
+
+set(CMAKE_C_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_CXX_COMPILER ${QNX_HOST}/usr/bin/qcc)
+
+set(CMAKE_AR "${QNX_HOST}/usr/bin/nto${CPU}-ar${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "archiver")
+set(CMAKE_RANLIB "${QNX_HOST}/usr/bin/nto${CPU}-ranlib${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "ranlib")
+
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_C_FLAGS}" CACHE STRING "c_flags")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_CXX_FLAGS}" CACHE STRING "cxx_flags")
+
+set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "exe_linker_flags")
+set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "so_linker_flags")
+
+link_libraries(-lc++)
+
+set(CMAKE_CXX_STANDARD 17)
+
+# Python setup
+if(EXISTS ${QNX_TARGET}/usr/include/python3.11)
+    set(PYTHON_VERSION_QNX 3.11)
+    set(PYTHON_VERSION_QNX_ABI 311)
+else()
+    set(PYTHON_VERSION_QNX 3.8)
+    set(PYTHON_VERSION_QNX_ABI 38)
+endif()
+
+set(PYTHON3_CVPY_SUFFIX .cpython-311.so)
+set(PYTHON_INCLUDE_DIR ${QNX_TARGET}/usr/include/${CPUVARDIR}/python3.11;${QNX_TARGET}/${CPUVARDIR}/usr/include/python3.11;${QNX_TARGET}/usr/include/python3.11;${QNX_TARGET}/${CPUVARDIR}/usr/lib/python3.11/site-packages/numpy/core/include;${QNX_TARGET}/${CPUVARDIR}/usr/local/lib/python3.11/site-packages/numpy/core/include)
+set(PYTHON3_INCLUDE_PATH ${PYTHON_INCLUDE_DIR})
+set(PYTHON3_LIBRARY ${QNX_TARGET}/${CPUVARDIR}/usr/lib/libpython3.11.so)
+set(PYTHON3_LIBRARIES ${PYTHON3_LIBRARY})
+set(PYTHON3_PACKAGES_PATH ${QNX_TARGET}/${CPUVARDIR}/usr/lib/python3.11/site-packages)
+set(PYTHON3_NUMPY_INCLUDE_DIRS ${QNX_TARGET}/${CPUVARDIR}/usr/lib/python3.11/site-packages/numpy/core/include;${QNX_TARGET}/${CPUVARDIR}/usr/local/lib/python3.11/site-packages/numpy/core/include)
+set(PYTHONLIBS_FOUND)
+set(PYTHON_IS_DEBUG FALSE)
+set(OPENCV_PYTHON_INSTALL_PATH ${CMAKE_INSTALL_PREFIX}/lib/python3.11/site-packages)
+
+set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
+set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
+set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
+set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
+
+# macro to find programs on the host OS
+macro( find_host_program )
+ set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
+ set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
+ set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
+ if( CMAKE_HOST_WIN32 )
+  set( WIN32 1 )
+  set( UNIX )
+ elseif( CMAKE_HOST_APPLE )
+  set( APPLE 1 )
+  set( UNIX )
+ endif()
+ find_program( ${ARGN} )
+ set( WIN32 )
+ set( APPLE )
+ set( UNIX 1 )
+ set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
+ set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
+ set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
+endmacro()
+
+# macro to find packages on the host OS
+macro( find_host_package )
+ set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
+ set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
+ set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
+ if( CMAKE_HOST_WIN32 )
+  set( WIN32 1 )
+  set( UNIX )
+ elseif( CMAKE_HOST_APPLE )
+  set( APPLE 1 )
+  set( UNIX )
+ endif()
+ find_package( ${ARGN} )
+ set( WIN32 )
+ set( APPLE )
+ set( UNIX 1 )
+ set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
+ set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
+ set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
+endmacro()
diff --git a/ros2/.gitignore b/ros2/.gitignore
new file mode 100644
index 0000000..fb3674e
--- /dev/null
+++ b/ros2/.gitignore
@@ -0,0 +1,4 @@
+build/
+install/
+log/
+src/
diff --git a/ros2/LICENSE b/ros2/LICENSE
new file mode 100644
index 0000000..1625c17
--- /dev/null
+++ b/ros2/LICENSE
@@ -0,0 +1,121 @@
+Creative Commons Legal Code
+
+CC0 1.0 Universal
+
+    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
+    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
+    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
+    INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
+    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
+    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
+    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
+    HEREUNDER.
+
+Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator
+and subsequent owner(s) (each and all, an "owner") of an original work of
+authorship and/or a database (each, a "Work").
+
+Certain owners wish to permanently relinquish those rights to a Work for
+the purpose of contributing to a commons of creative, cultural and
+scientific works ("Commons") that the public can reliably and without fear
+of later claims of infringement build upon, modify, incorporate in other
+works, reuse and redistribute as freely as possible in any form whatsoever
+and for any purposes, including without limitation commercial purposes.
+These owners may contribute to the Commons to promote the ideal of a free
+culture and the further production of creative, cultural and scientific
+works, or to gain reputation or greater distribution for their Work in
+part through the use and efforts of others.
+
+For these and/or other purposes and motivations, and without any
+expectation of additional consideration or compensation, the person
+associating CC0 with a Work (the "Affirmer"), to the extent that he or she
+is an owner of Copyright and Related Rights in the Work, voluntarily
+elects to apply CC0 to the Work and publicly distribute the Work under its
+terms, with knowledge of his or her Copyright and Related Rights in the
+Work and the meaning and intended legal effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+protected by copyright and related or neighboring rights ("Copyright and
+Related Rights"). Copyright and Related Rights include, but are not
+limited to, the following:
+
+  i. the right to reproduce, adapt, distribute, perform, display,
+     communicate, and translate a Work;
+ ii. moral rights retained by the original author(s) and/or performer(s);
+iii. publicity and privacy rights pertaining to a person's image or
+     likeness depicted in a Work;
+ iv. rights protecting against unfair competition in regards to a Work,
+     subject to the limitations in paragraph 4(a), below;
+  v. rights protecting the extraction, dissemination, use and reuse of data
+     in a Work;
+ vi. database rights (such as those arising under Directive 96/9/EC of the
+     European Parliament and of the Council of 11 March 1996 on the legal
+     protection of databases, and under any national implementation
+     thereof, including any amended or successor version of such
+     directive); and
+vii. other similar, equivalent or corresponding rights throughout the
+     world based on applicable law or treaty, and any national
+     implementations thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention
+of, applicable law, Affirmer hereby overtly, fully, permanently,
+irrevocably and unconditionally waives, abandons, and surrenders all of
+Affirmer's Copyright and Related Rights and associated claims and causes
+of action, whether now known or unknown (including existing as well as
+future claims and causes of action), in the Work (i) in all territories
+worldwide, (ii) for the maximum duration provided by applicable law or
+treaty (including future time extensions), (iii) in any current or future
+medium and for any number of copies, and (iv) for any purpose whatsoever,
+including without limitation commercial, advertising or promotional
+purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
+member of the public at large and to the detriment of Affirmer's heirs and
+successors, fully intending that such Waiver shall not be subject to
+revocation, rescission, cancellation, termination, or any other legal or
+equitable action to disrupt the quiet enjoyment of the Work by the public
+as contemplated by Affirmer's express Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason
+be judged legally invalid or ineffective under applicable law, then the
+Waiver shall be preserved to the maximum extent permitted taking into
+account Affirmer's express Statement of Purpose. In addition, to the
+extent the Waiver is so judged Affirmer hereby grants to each affected
+person a royalty-free, non transferable, non sublicensable, non exclusive,
+irrevocable and unconditional license to exercise Affirmer's Copyright and
+Related Rights in the Work (i) in all territories worldwide, (ii) for the
+maximum duration provided by applicable law or treaty (including future
+time extensions), (iii) in any current or future medium and for any number
+of copies, and (iv) for any purpose whatsoever, including without
+limitation commercial, advertising or promotional purposes (the
+"License"). The License shall be deemed effective as of the date CC0 was
+applied by Affirmer to the Work. Should any part of the License for any
+reason be judged legally invalid or ineffective under applicable law, such
+partial invalidity or ineffectiveness shall not invalidate the remainder
+of the License, and in such case Affirmer hereby affirms that he or she
+will not (i) exercise any of his or her remaining Copyright and Related
+Rights in the Work or (ii) assert any associated claims and causes of
+action with respect to the Work, in either case contrary to Affirmer's
+express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+
+ a. No trademark or patent rights held by Affirmer are waived, abandoned,
+    surrendered, licensed or otherwise affected by this document.
+ b. Affirmer offers the Work as-is and makes no representations or
+    warranties of any kind concerning the Work, express, implied,
+    statutory or otherwise, including without limitation warranties of
+    title, merchantability, fitness for a particular purpose, non
+    infringement, or the absence of latent or other defects, accuracy, or
+    the present or absence of errors, whether or not discoverable, all to
+    the greatest extent permissible under applicable law.
+ c. Affirmer disclaims responsibility for clearing rights of other persons
+    that may apply to the Work or any use thereof, including without
+    limitation any person's Copyright and Related Rights in the Work.
+    Further, Affirmer disclaims responsibility for obtaining any necessary
+    consents, permissions or other rights required for any use of the
+    Work.
+ d. Affirmer understands and acknowledges that Creative Commons is not a
+    party to this document and has no duty or obligation with respect to
+    this CC0 or use of the Work.
\ No newline at end of file
diff --git a/ros2/README.md b/ros2/README.md
new file mode 100644
index 0000000..98425a8
--- /dev/null
+++ b/ros2/README.md
@@ -0,0 +1,179 @@
+**NOTE**: QNX ports are only supported from a Linux host operating system
+
+# Compile the port for QNX in a Docker container
+
+Currently the port is supported for QNX SDP 7.1 and 8.0.
+
+We recommend that you use Docker to build ros2 for QNX to ensure the build environment consistency.
+
+```bash
+# Set QNX_SDP_VERSION to be qnx800 for SDP 8.0 or qnx710 for SDP 7.1
+export QNX_SDP_VERSION=qnx800
+
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+# Once you're in the image, set up environment variables
+source ~/qnx800/qnxsdp-env.sh
+source /usr/local/qnx/env/bin/activate
+
+# Build googletest
+PREFIX="/usr" QNX_PROJECT_ROOT="$(pwd)/googletest" make -C qnx-ports/googletest install -j$(nproc)
+
+# Import ros2 packages
+cd ~/qnx_workspace/qnx-ports/ros2
+mkdir -p src
+vcs import src < ros2.repos
+
+# Run required scripts
+./scripts/colcon-ignore.sh
+./scripts/patch.sh
+
+# Build ros2
+./scripts/build-ros2.sh
+```
+
+After the build completes, ros2_humble.tar.gz will be created at QNX_TARGET/CPUVARDIR/ros2_humble.tar.gz
+
+## Build on host without using Docker
+
+Don't forget to source qnxsdp-env.sh in your SDP.
+
+```bash
+# Set QNX_SDP_VERSION to be qnx800 for SDP 8.0 or qnx710 for SDP 7.1
+export QNX_SDP_VERSION=qnx800
+
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+
+# Clone repos
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git
+git clone -b qnx_v1.13.0 https://gitlab.com/qnx/libs/googletest.git
+
+# Install python 3.11
+sudo add-apt-repository ppa:deadsnakes/ppa
+sudo apt update
+sudo apt-get install -y python3.11-dev python3.11-venv python3.11-distutils software-properties-common rename
+
+# Create a python 3.11 virtual environment
+python3.11 -m venv env
+source env/bin/activate
+
+# Install required python packages
+pip install -U \
+  pip \
+  empy \
+  lark \
+  Cython \
+  wheel \
+  colcon-common-extensions \
+  vcstool \
+  catkin_pkg \
+  argcomplete \
+  flake8-blind-except \
+  flake8-builtins \
+  flake8-class-newline \
+  flake8-comprehensions \
+  flake8-deprecated \
+  flake8-docstrings \
+  flake8-import-order \
+  flake8-quotes \
+  pytest-repeat \
+  pytest-rerunfailures \
+  pytest
+
+# source qnxsdp-env.sh
+source ~/qnx800/qnxsdp-env.sh
+
+# Build and install googletest
+PREFIX="/usr" QNX_PROJECT_ROOT="$(pwd)/googletest" make -C qnx-ports/googletest install -j$(nproc)
+
+# Import ros2 packages
+cd ~/qnx_workspace/qnx-ports/ros2
+mkdir -p src
+vcs import src < ros2.repos
+
+# Run scripts to ignore some packages and apply QNX patches
+./scripts/colcon-ignore.sh
+./scripts/patch.sh
+
+# Set LD_PRELOAD to the host libzstd.so for x86_64 SDP 7.1 builds
+export LD_PRELOAD=$LD_PRELOAD:/usr/lib/x86_64-linux-gnu/libzstd.so
+
+# Build ros2
+./scripts/build-ros2.sh
+```
+
+# How to run tests
+
+Use scp to move ros2_humble.tar.gz to the target
+
+```bash
+scp ros2_humble.tar.gz root@<target-ip-address>:/
+```
+
+```bash
+ssh root@<target-ip-address>
+cd /
+tar -xvzf ./ros2_humble.tar.gz
+```
+
+### Prepare Target
+
+```bash
+# Update system time
+ntpdate -sb 0.pool.ntp.org 1.pool.ntp.org
+
+# Install pip and packaging
+mkdir -p /data
+export TMPDIR=/data
+python3 -m ensurepip
+pip3 install packaging pyyaml lark
+export PYTHONPATH=$PYTHONPATH:/opt/ros/humble/usr/lib/python3.11/site-packages/
+```
+
+### Running the Listner Talker Demo on RPI4
+
+Run listener in a terminal:
+
+```bash
+cd /opt/ros/humble
+. /opt/ros/humble/setup.bash
+python3 ./bin/ros2 run demo_nodes_cpp listener
+```
+
+Run talker in another terminal:
+
+```bash
+cd /opt/ros/humble
+. /opt/ros/humble/setup.bash
+python3 ./bin/ros2 run demo_nodes_cpp talker
+```
+
+### Running the dummy robot demo on RPI4
+
+Launch the dummy robot demo node on RPI4.
+```bash
+cd /opt/ros/humble
+. /opt/ros/humble/setup.bash
+python3 ./bin/ros2 dummy_robot_bringup dummy_robot_bringup.launch.py
+```
+
+Install ROS2 Humble on your Ubuntu host.
+
+There is no QNX port for rviz2.
+
+Follow the instructions at https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debians.html.
+
+Start rviz2
+```bash
+source <ROS2_INSTALL_FOLDER>/setup.bash
+rviz2
+```
+
+Please refer to https://docs.ros.org/en/humble/Tutorials/Demos/dummy-robot-demo.html for more details about the dummy robot demo.
diff --git a/ros2/modules/Findzstd.cmake b/ros2/modules/Findzstd.cmake
new file mode 100644
index 0000000..c1c316b
--- /dev/null
+++ b/ros2/modules/Findzstd.cmake
@@ -0,0 +1,43 @@
+# Get package location hint from environment variable (if any)
+if(NOT zstd_ROOT_DIR AND DEFINED ENV{zstd_ROOT_DIR})
+    set(zstd_ROOT_DIR "$ENV{zstd_ROOT_DIR}" CACHE PATH
+            "zstd base directory location (optional, used for nonstandard installation paths)")
+endif()
+
+# Search path for nonstandard package locations
+if(zstd_ROOT_DIR)
+    set(zstd_INCLUDE_PATH PATHS "${zstd_ROOT_DIR}/include" NO_DEFAULT_PATH)
+    set(zstd_LIBRARY_PATH PATHS "${zstd_ROOT_DIR}/lib"     NO_DEFAULT_PATH)
+else()
+    set(zstd_INCLUDE_PATH "")
+    set(zstd_LIBRARY_PATH "")
+endif()
+
+# Find headers and libraries
+find_path(zstd_INCLUDE_DIR NAMES zstd.h PATH_SUFFIXES "zstd" ${zstd_INCLUDE_PATH})
+find_library(zstd_LIBRARY  NAMES zstd   PATH_SUFFIXES "zstd" ${zstd_LIBRARY_PATH})
+
+mark_as_advanced(zstd_INCLUDE_DIR zstd_LIBRARY)
+
+# Output variables generation
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(zstd DEFAULT_MSG zstd_LIBRARY zstd_INCLUDE_DIR)
+
+set(zstd_FOUND ${ZSTD_FOUND}) # Enforce case-correctness: Set appropriately cased variable...
+unset(ZSTD_FOUND) # ...and unset uppercase variable generated by find_package_handle_standard_args
+
+if(zstd_FOUND)
+    set(zstd_INCLUDE_DIRS ${zstd_INCLUDE_DIR})
+    set(zstd_LIBRARIES ${zstd_LIBRARY})
+    message("zstd_INCLUDE_DIRS ${zstd_INCLUDE_DIR}")
+    message("zstd_LIBRARIES ${zstd_LIBRARY}")
+    if(NOT TARGET zstd::zstd)
+        add_library(zstd::zstd UNKNOWN IMPORTED)
+        set_property(TARGET zstd::zstd PROPERTY IMPORTED_LOCATION ${zstd_LIBRARY})
+        set_property(TARGET zstd::zstd PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${zstd_INCLUDE_DIR})
+    endif()
+    list(APPEND zstd_TARGETS zstd::zstd)
+elseif(zstd_FIND_REQUIRED)
+    message(FATAL_ERROR "Unable to find zstd")
+endif()
+
diff --git a/ros2/modules/bullet3_vendor/CMakeLists.txt b/ros2/modules/bullet3_vendor/CMakeLists.txt
new file mode 100644
index 0000000..ca26cb2
--- /dev/null
+++ b/ros2/modules/bullet3_vendor/CMakeLists.txt
@@ -0,0 +1,61 @@
+cmake_minimum_required(VERSION 3.5)
+
+project(bullet3_vendor)
+
+find_package(ament_cmake REQUIRED)
+
+set(PACKAGE_VERSION "1.0.0")
+
+macro(build_bullet3)
+
+  set(extra_cmake_args)
+  
+  if(DEFINED CMAKE_BUILD_TYPE)
+    list(APPEND extra_cmake_args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
+  endif()
+  
+  list(APPEND extra_cmake_args "-DBUILD_PYBULLET=OFF")
+  list(APPEND extra_cmake_args "-DUSE_DOUBLE_PRECISION=ON")
+  list(APPEND extra_cmake_args "-DBUILD_OPENGL3_DEMOS=OFF")
+  list(APPEND extra_cmake_args "-DBUILD_EXTRAS=OFF")
+  list(APPEND extra_cmake_args "-DBUILD_UNIT_TESTS=OFF")
+  list(APPEND extra_cmake_args "-DBUILD_CPU_DEMOS=OFF")
+  list(APPEND extra_cmake_args "-DUSE_GRAPHICAL_BENCHMARK=OFF")
+  list(APPEND extra_cmake_args "-DBULLET2_USE_OPEN_MP_MULTITHREADING=OFF")
+  list(APPEND extra_cmake_args "-DBUILD_SHARED_LIBS=ON")
+  list(APPEND extra_cmake_args "-DBUILD_BULLET2_DEMOS=OFF")
+
+  list(APPEND extra_cmake_args -DCMAKE_CXX_FLAGS="-Wno-ignored-attributes")
+  list(APPEND extra_cmake_args -DCMAKE_C_FLAGS="-Wno-ignored-attributes")
+
+  if(DEFINED CMAKE_TOOLCHAIN_FILE)
+    list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
+  endif()
+  
+  include(ExternalProject)
+  ExternalProject_Add(bullet3
+    GIT_REPOSITORY https://github.com/bulletphysics/bullet3.git
+    GIT_TAG 2.89
+    TIMEOUT 600
+    CMAKE_ARGS
+    -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/bullet3_install
+      ${extra_cmake_args}
+      -Wno-dev
+  )
+
+  # The external project will install to the build folder, but we'll install that on make install.
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/bullet3_install/
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}
+  )
+
+endmacro()
+
+find_package(bullet3 QUIET)
+if(NOT bullet3_FOUND)
+  build_bullet3()
+endif()
+
+ament_package()
diff --git a/ros2/modules/bullet3_vendor/LICENSE b/ros2/modules/bullet3_vendor/LICENSE
new file mode 100644
index 0000000..1625c17
--- /dev/null
+++ b/ros2/modules/bullet3_vendor/LICENSE
@@ -0,0 +1,121 @@
+Creative Commons Legal Code
+
+CC0 1.0 Universal
+
+    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
+    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
+    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
+    INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
+    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
+    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
+    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
+    HEREUNDER.
+
+Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator
+and subsequent owner(s) (each and all, an "owner") of an original work of
+authorship and/or a database (each, a "Work").
+
+Certain owners wish to permanently relinquish those rights to a Work for
+the purpose of contributing to a commons of creative, cultural and
+scientific works ("Commons") that the public can reliably and without fear
+of later claims of infringement build upon, modify, incorporate in other
+works, reuse and redistribute as freely as possible in any form whatsoever
+and for any purposes, including without limitation commercial purposes.
+These owners may contribute to the Commons to promote the ideal of a free
+culture and the further production of creative, cultural and scientific
+works, or to gain reputation or greater distribution for their Work in
+part through the use and efforts of others.
+
+For these and/or other purposes and motivations, and without any
+expectation of additional consideration or compensation, the person
+associating CC0 with a Work (the "Affirmer"), to the extent that he or she
+is an owner of Copyright and Related Rights in the Work, voluntarily
+elects to apply CC0 to the Work and publicly distribute the Work under its
+terms, with knowledge of his or her Copyright and Related Rights in the
+Work and the meaning and intended legal effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+protected by copyright and related or neighboring rights ("Copyright and
+Related Rights"). Copyright and Related Rights include, but are not
+limited to, the following:
+
+  i. the right to reproduce, adapt, distribute, perform, display,
+     communicate, and translate a Work;
+ ii. moral rights retained by the original author(s) and/or performer(s);
+iii. publicity and privacy rights pertaining to a person's image or
+     likeness depicted in a Work;
+ iv. rights protecting against unfair competition in regards to a Work,
+     subject to the limitations in paragraph 4(a), below;
+  v. rights protecting the extraction, dissemination, use and reuse of data
+     in a Work;
+ vi. database rights (such as those arising under Directive 96/9/EC of the
+     European Parliament and of the Council of 11 March 1996 on the legal
+     protection of databases, and under any national implementation
+     thereof, including any amended or successor version of such
+     directive); and
+vii. other similar, equivalent or corresponding rights throughout the
+     world based on applicable law or treaty, and any national
+     implementations thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention
+of, applicable law, Affirmer hereby overtly, fully, permanently,
+irrevocably and unconditionally waives, abandons, and surrenders all of
+Affirmer's Copyright and Related Rights and associated claims and causes
+of action, whether now known or unknown (including existing as well as
+future claims and causes of action), in the Work (i) in all territories
+worldwide, (ii) for the maximum duration provided by applicable law or
+treaty (including future time extensions), (iii) in any current or future
+medium and for any number of copies, and (iv) for any purpose whatsoever,
+including without limitation commercial, advertising or promotional
+purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
+member of the public at large and to the detriment of Affirmer's heirs and
+successors, fully intending that such Waiver shall not be subject to
+revocation, rescission, cancellation, termination, or any other legal or
+equitable action to disrupt the quiet enjoyment of the Work by the public
+as contemplated by Affirmer's express Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason
+be judged legally invalid or ineffective under applicable law, then the
+Waiver shall be preserved to the maximum extent permitted taking into
+account Affirmer's express Statement of Purpose. In addition, to the
+extent the Waiver is so judged Affirmer hereby grants to each affected
+person a royalty-free, non transferable, non sublicensable, non exclusive,
+irrevocable and unconditional license to exercise Affirmer's Copyright and
+Related Rights in the Work (i) in all territories worldwide, (ii) for the
+maximum duration provided by applicable law or treaty (including future
+time extensions), (iii) in any current or future medium and for any number
+of copies, and (iv) for any purpose whatsoever, including without
+limitation commercial, advertising or promotional purposes (the
+"License"). The License shall be deemed effective as of the date CC0 was
+applied by Affirmer to the Work. Should any part of the License for any
+reason be judged legally invalid or ineffective under applicable law, such
+partial invalidity or ineffectiveness shall not invalidate the remainder
+of the License, and in such case Affirmer hereby affirms that he or she
+will not (i) exercise any of his or her remaining Copyright and Related
+Rights in the Work or (ii) assert any associated claims and causes of
+action with respect to the Work, in either case contrary to Affirmer's
+express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+
+ a. No trademark or patent rights held by Affirmer are waived, abandoned,
+    surrendered, licensed or otherwise affected by this document.
+ b. Affirmer offers the Work as-is and makes no representations or
+    warranties of any kind concerning the Work, express, implied,
+    statutory or otherwise, including without limitation warranties of
+    title, merchantability, fitness for a particular purpose, non
+    infringement, or the absence of latent or other defects, accuracy, or
+    the present or absence of errors, whether or not discoverable, all to
+    the greatest extent permissible under applicable law.
+ c. Affirmer disclaims responsibility for clearing rights of other persons
+    that may apply to the Work or any use thereof, including without
+    limitation any person's Copyright and Related Rights in the Work.
+    Further, Affirmer disclaims responsibility for obtaining any necessary
+    consents, permissions or other rights required for any use of the
+    Work.
+ d. Affirmer understands and acknowledges that Creative Commons is not a
+    party to this document and has no duty or obligation with respect to
+    this CC0 or use of the Work.
\ No newline at end of file
diff --git a/ros2/modules/bullet3_vendor/bullet3_vendor-extras.cmake.in b/ros2/modules/bullet3_vendor/bullet3_vendor-extras.cmake.in
new file mode 100644
index 0000000..4de6d9a
--- /dev/null
+++ b/ros2/modules/bullet3_vendor/bullet3_vendor-extras.cmake.in
@@ -0,0 +1,18 @@
+find_package(bullet3 QUIET)
+
+if(NOT bullet3_FOUND)
+  # add the local Modules directory to the modules path
+  if(WIN32)
+    set(bullet3_DIR "${@PROJECT_NAME@_DIR}/../../../opt/bullet3_vendor/CMake")
+  else()
+    set(bullet3_DIR "${@PROJECT_NAME@_DIR}/../../../opt/bullet3_vendor/lib/cmake/bullet3")
+  endif()
+  message(STATUS "Setting bullet3_DIR to: '${bullet3_DIR}'")
+
+  find_package(bullet3 CONFIG REQUIRED QUIET)
+endif()
+
+set(bullet3_vendor_LIBRARIES ${BULLET3_LIBRARIES})
+set(bullet3_vendor_INCLUDE_DIRS ${BULLET3_INCLUDE_DIR})
+
+list(APPEND bullet3_vendor_TARGETS bullet3)
\ No newline at end of file
diff --git a/ros2/modules/bullet3_vendor/package.xml b/ros2/modules/bullet3_vendor/package.xml
new file mode 100644
index 0000000..230de3f
--- /dev/null
+++ b/ros2/modules/bullet3_vendor/package.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<?xml-model
+  href="http://download.ros.org/schema/package_format2.xsd"
+  schematypens="http://www.w3.org/2001/XMLSchema"?>
+<package format="2">
+  <name>bullet3_vendor</name>
+  <version>2.89.0</version>
+  <description>
+    Wrapper around bullet3, it provides a fixed CMake module and an ExternalProject build of it.
+  </description>
+  <maintainer email="asobhy@blackberry.com">Ahmed Sobhy</maintainer>
+  <license>zlib</license>  <!-- the contents of this package are under zlib license-->
+  <license>zlib</license>
+  <url type="website">https://pybullet.org/wordpress/</url>
+  <buildtool_depend>ament_cmake</buildtool_depend>
+  <export>
+    <build_type>ament_cmake</build_type>
+  </export>
+</package>
\ No newline at end of file
diff --git a/ros2/modules/eigen3_vendor/CMakeLists.txt b/ros2/modules/eigen3_vendor/CMakeLists.txt
new file mode 100644
index 0000000..ef709a0
--- /dev/null
+++ b/ros2/modules/eigen3_vendor/CMakeLists.txt
@@ -0,0 +1,56 @@
+cmake_minimum_required(VERSION 3.5)
+
+project(eigen3)
+
+find_package(ament_cmake REQUIRED)
+
+set(PACKAGE_VERSION "1.0.0")
+
+macro(build_eigen3)
+
+  set(extra_cmake_args)
+  
+  if(DEFINED CMAKE_BUILD_TYPE)
+    list(APPEND extra_cmake_args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
+  endif()
+
+  list(APPEND extra_cmake_args  -DINCLUDE_INSTALL_DIR=${CMAKE_CURRENT_BINARY_DIR}/eigen3_install/include)
+  list(APPEND extra_cmake_args  -DCMAKE_MODULE_PATH=${CMAKE_CURRENT_BINARY_DIR}/eigen3-prefix/src/eigen3/cmake)
+    
+  include(ExternalProject)
+  ExternalProject_Add(eigen3
+    GIT_REPOSITORY https://gitlab.com/libeigen/eigen.git
+    GIT_TAG 3.3
+    TIMEOUT 600
+    CONFIGURE_COMMAND
+      mkdir -p ${CMAKE_CURRENT_BINARY_DIR}/eigen3-prefix/src/eigen3/build_eigen ${CMAKE_CURRENT_BINARY_DIR}/eigen3-prefix/src/eigen3/build_unsupported
+    BUILD_COMMAND
+      cd ${CMAKE_CURRENT_BINARY_DIR}/eigen3-prefix/src/eigen3/build_eigen &&
+      cmake -Wno-dev ${extra_cmake_args} ../../eigen3/Eigen && make all &&
+      cd ${CMAKE_CURRENT_BINARY_DIR}/eigen3-prefix/src/eigen3/build_unsupported &&
+      cmake -Wno-dev ${extra_cmake_args} ../../eigen3/unsupported/Eigen && make all
+    INSTALL_COMMAND
+      cd ${CMAKE_CURRENT_BINARY_DIR}/eigen3-prefix/src/eigen3/build_eigen && make install &&
+      cd ${CMAKE_CURRENT_BINARY_DIR}/eigen3-prefix/src/eigen3/build_unsupported && make install
+  )
+
+  # The external project will install to the build folder, but we'll install that on make install.
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/eigen3_install/
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}
+  )
+
+endmacro()
+
+if (QNX)
+  build_eigen3()
+else()
+  find_package(Eigen3 QUIET)
+  if(NOT Eigen3_FOUND)
+    build_eigen3()
+  endif()
+endif()
+
+ament_package()
diff --git a/ros2/modules/eigen3_vendor/LICENSE b/ros2/modules/eigen3_vendor/LICENSE
new file mode 100644
index 0000000..1625c17
--- /dev/null
+++ b/ros2/modules/eigen3_vendor/LICENSE
@@ -0,0 +1,121 @@
+Creative Commons Legal Code
+
+CC0 1.0 Universal
+
+    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
+    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
+    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
+    INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
+    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
+    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
+    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
+    HEREUNDER.
+
+Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator
+and subsequent owner(s) (each and all, an "owner") of an original work of
+authorship and/or a database (each, a "Work").
+
+Certain owners wish to permanently relinquish those rights to a Work for
+the purpose of contributing to a commons of creative, cultural and
+scientific works ("Commons") that the public can reliably and without fear
+of later claims of infringement build upon, modify, incorporate in other
+works, reuse and redistribute as freely as possible in any form whatsoever
+and for any purposes, including without limitation commercial purposes.
+These owners may contribute to the Commons to promote the ideal of a free
+culture and the further production of creative, cultural and scientific
+works, or to gain reputation or greater distribution for their Work in
+part through the use and efforts of others.
+
+For these and/or other purposes and motivations, and without any
+expectation of additional consideration or compensation, the person
+associating CC0 with a Work (the "Affirmer"), to the extent that he or she
+is an owner of Copyright and Related Rights in the Work, voluntarily
+elects to apply CC0 to the Work and publicly distribute the Work under its
+terms, with knowledge of his or her Copyright and Related Rights in the
+Work and the meaning and intended legal effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+protected by copyright and related or neighboring rights ("Copyright and
+Related Rights"). Copyright and Related Rights include, but are not
+limited to, the following:
+
+  i. the right to reproduce, adapt, distribute, perform, display,
+     communicate, and translate a Work;
+ ii. moral rights retained by the original author(s) and/or performer(s);
+iii. publicity and privacy rights pertaining to a person's image or
+     likeness depicted in a Work;
+ iv. rights protecting against unfair competition in regards to a Work,
+     subject to the limitations in paragraph 4(a), below;
+  v. rights protecting the extraction, dissemination, use and reuse of data
+     in a Work;
+ vi. database rights (such as those arising under Directive 96/9/EC of the
+     European Parliament and of the Council of 11 March 1996 on the legal
+     protection of databases, and under any national implementation
+     thereof, including any amended or successor version of such
+     directive); and
+vii. other similar, equivalent or corresponding rights throughout the
+     world based on applicable law or treaty, and any national
+     implementations thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention
+of, applicable law, Affirmer hereby overtly, fully, permanently,
+irrevocably and unconditionally waives, abandons, and surrenders all of
+Affirmer's Copyright and Related Rights and associated claims and causes
+of action, whether now known or unknown (including existing as well as
+future claims and causes of action), in the Work (i) in all territories
+worldwide, (ii) for the maximum duration provided by applicable law or
+treaty (including future time extensions), (iii) in any current or future
+medium and for any number of copies, and (iv) for any purpose whatsoever,
+including without limitation commercial, advertising or promotional
+purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
+member of the public at large and to the detriment of Affirmer's heirs and
+successors, fully intending that such Waiver shall not be subject to
+revocation, rescission, cancellation, termination, or any other legal or
+equitable action to disrupt the quiet enjoyment of the Work by the public
+as contemplated by Affirmer's express Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason
+be judged legally invalid or ineffective under applicable law, then the
+Waiver shall be preserved to the maximum extent permitted taking into
+account Affirmer's express Statement of Purpose. In addition, to the
+extent the Waiver is so judged Affirmer hereby grants to each affected
+person a royalty-free, non transferable, non sublicensable, non exclusive,
+irrevocable and unconditional license to exercise Affirmer's Copyright and
+Related Rights in the Work (i) in all territories worldwide, (ii) for the
+maximum duration provided by applicable law or treaty (including future
+time extensions), (iii) in any current or future medium and for any number
+of copies, and (iv) for any purpose whatsoever, including without
+limitation commercial, advertising or promotional purposes (the
+"License"). The License shall be deemed effective as of the date CC0 was
+applied by Affirmer to the Work. Should any part of the License for any
+reason be judged legally invalid or ineffective under applicable law, such
+partial invalidity or ineffectiveness shall not invalidate the remainder
+of the License, and in such case Affirmer hereby affirms that he or she
+will not (i) exercise any of his or her remaining Copyright and Related
+Rights in the Work or (ii) assert any associated claims and causes of
+action with respect to the Work, in either case contrary to Affirmer's
+express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+
+ a. No trademark or patent rights held by Affirmer are waived, abandoned,
+    surrendered, licensed or otherwise affected by this document.
+ b. Affirmer offers the Work as-is and makes no representations or
+    warranties of any kind concerning the Work, express, implied,
+    statutory or otherwise, including without limitation warranties of
+    title, merchantability, fitness for a particular purpose, non
+    infringement, or the absence of latent or other defects, accuracy, or
+    the present or absence of errors, whether or not discoverable, all to
+    the greatest extent permissible under applicable law.
+ c. Affirmer disclaims responsibility for clearing rights of other persons
+    that may apply to the Work or any use thereof, including without
+    limitation any person's Copyright and Related Rights in the Work.
+    Further, Affirmer disclaims responsibility for obtaining any necessary
+    consents, permissions or other rights required for any use of the
+    Work.
+ d. Affirmer understands and acknowledges that Creative Commons is not a
+    party to this document and has no duty or obligation with respect to
+    this CC0 or use of the Work.
\ No newline at end of file
diff --git a/ros2/modules/eigen3_vendor/package.xml b/ros2/modules/eigen3_vendor/package.xml
new file mode 100644
index 0000000..40399b5
--- /dev/null
+++ b/ros2/modules/eigen3_vendor/package.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<?xml-model
+  href="http://download.ros.org/schema/package_format2.xsd"
+  schematypens="http://www.w3.org/2001/XMLSchema"?>
+<package format="2">
+  <name>eigen3</name>
+  <version>3.3.0</version>
+  <description>
+    Wrapper around eigen3, it provides a fixed CMake module and an ExternalProject build of it.
+  </description>
+  <maintainer email="asobhy@blackberry.com">Ahmed Sobhy</maintainer>
+  <license>Mozilla Public License 2.0</license>  <!-- the contents of this package are MPL2-licensed -->
+  <license>Mozilla Public License 2.0</license>
+  <url type="website">http://eigen.tuxfamily.org/index.php?title=Main_Page</url>
+  <buildtool_depend>ament_cmake</buildtool_depend>
+  <export>
+    <build_type>ament_cmake</build_type>
+  </export>
+</package>
\ No newline at end of file
diff --git a/ros2/modules/netifaces_vendor/CMakeLists.txt b/ros2/modules/netifaces_vendor/CMakeLists.txt
new file mode 100644
index 0000000..27e3109
--- /dev/null
+++ b/ros2/modules/netifaces_vendor/CMakeLists.txt
@@ -0,0 +1,63 @@
+cmake_minimum_required(VERSION 3.5)
+
+project(netifaces_vendor)
+
+find_package(ament_cmake REQUIRED)
+
+set(PACKAGE_VERSION "1.0.0")
+
+macro(build_netifaces)
+
+  set(QNX_COMPILER_FLAGS  -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR})
+  set(QNX_LINKER_FLAGS    "-shared -L${QNX_TARGET}/${CPUVARDIR}/lib:${QNX_TARGET}/${CPUVARDIR}/usr/lib")
+  set(QNX_CPPFLAGS        "-I${QNX_TARGET}/usr/include \
+                          -I${QNX_TARGET}/usr/include/python3.11 \
+                          -I${QNX_TARGET}/${CPUVARDIR}/usr/include \
+                          -I${QNX_TARGET}/${CPUVARDIR}/usr/include/python3.11 \
+                          -I${QNX_TARGET}/usr/include/${CPUVARDIR}/python3.11")
+
+  set(EXPORT_PY     export CC=${CMAKE_C_COMPILER} &&
+                    export CXX=${CMAKE_C_COMPILER} &&
+                    export LDSHARED=${CMAKE_C_COMPILER} &&
+                    export CFLAGS=${QNX_COMPILER_FLAGS} &&
+                    export CPPFLAGS=${QNX_CPPFLAGS} &&
+                    export CXXFLAGS=${QNX_COMPILER_FLAGS} &&
+                    export LDFLAGS=${QNX_LINKER_FLAGS} &&
+                    export host_alias=nto$ENV{CPUVARDIR} &&
+                    export LD_LIBRARY_PATH=$ENV{QNX_HOST}/usr/lib:$ENV{LD_LIBRARY_PATH} &&
+                    export PATH=$ENV{QNX_HOST}/usr/lib:$ENV{QNX_HOST}/usr/bin:$ENV{PATH}
+  )
+
+  set(BUILD_EXT_FLAGS "-b${CMAKE_CURRENT_BINARY_DIR}/netifaces_install")
+
+  include(ExternalProject)
+  ExternalProject_Add(netifaces
+    GIT_REPOSITORY https://github.com/al45tair/netifaces.git
+    GIT_TAG 3e02d91ef0e3eb32e614fe2f6bf8dd80d5099aff
+    TIMEOUT 600
+    PATCH_COMMAND git apply ${CMAKE_CURRENT_SOURCE_DIR}/netifaces.patch
+    CONFIGURE_COMMAND ""
+    BUILD_COMMAND
+      cd ${CMAKE_CURRENT_BINARY_DIR}/netifaces-prefix/src/netifaces &&
+      ${EXPORT_PY} &&
+      python3 setup.py build_ext ${BUILD_EXT_FLAGS} build --build-temp=${CMAKE_CURRENT_BINARY_DIR}/netifaces_install_tmp/ --build-lib=${CMAKE_CURRENT_BINARY_DIR}/netifaces_install/ --qnx &&
+      find ${CMAKE_CURRENT_BINARY_DIR}/netifaces_install/ -name "*cpython-*-x86_64-linux-gnu.so" | xargs rename -f "s/-x86_64-linux-gnu//g"
+    INSTALL_COMMAND ""
+  )
+
+  #The external project will install to the build folder, but we'll install that on make install.
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/netifaces_install/
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}/lib/python3.11/site-packages
+  )
+
+endmacro()
+
+find_package(netifaces QUIET)
+if(NOT netifaces_FOUND)
+  build_netifaces()
+endif()
+
+ament_package()
diff --git a/ros2/modules/netifaces_vendor/LICENSE b/ros2/modules/netifaces_vendor/LICENSE
new file mode 100644
index 0000000..1625c17
--- /dev/null
+++ b/ros2/modules/netifaces_vendor/LICENSE
@@ -0,0 +1,121 @@
+Creative Commons Legal Code
+
+CC0 1.0 Universal
+
+    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
+    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
+    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
+    INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
+    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
+    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
+    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
+    HEREUNDER.
+
+Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator
+and subsequent owner(s) (each and all, an "owner") of an original work of
+authorship and/or a database (each, a "Work").
+
+Certain owners wish to permanently relinquish those rights to a Work for
+the purpose of contributing to a commons of creative, cultural and
+scientific works ("Commons") that the public can reliably and without fear
+of later claims of infringement build upon, modify, incorporate in other
+works, reuse and redistribute as freely as possible in any form whatsoever
+and for any purposes, including without limitation commercial purposes.
+These owners may contribute to the Commons to promote the ideal of a free
+culture and the further production of creative, cultural and scientific
+works, or to gain reputation or greater distribution for their Work in
+part through the use and efforts of others.
+
+For these and/or other purposes and motivations, and without any
+expectation of additional consideration or compensation, the person
+associating CC0 with a Work (the "Affirmer"), to the extent that he or she
+is an owner of Copyright and Related Rights in the Work, voluntarily
+elects to apply CC0 to the Work and publicly distribute the Work under its
+terms, with knowledge of his or her Copyright and Related Rights in the
+Work and the meaning and intended legal effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+protected by copyright and related or neighboring rights ("Copyright and
+Related Rights"). Copyright and Related Rights include, but are not
+limited to, the following:
+
+  i. the right to reproduce, adapt, distribute, perform, display,
+     communicate, and translate a Work;
+ ii. moral rights retained by the original author(s) and/or performer(s);
+iii. publicity and privacy rights pertaining to a person's image or
+     likeness depicted in a Work;
+ iv. rights protecting against unfair competition in regards to a Work,
+     subject to the limitations in paragraph 4(a), below;
+  v. rights protecting the extraction, dissemination, use and reuse of data
+     in a Work;
+ vi. database rights (such as those arising under Directive 96/9/EC of the
+     European Parliament and of the Council of 11 March 1996 on the legal
+     protection of databases, and under any national implementation
+     thereof, including any amended or successor version of such
+     directive); and
+vii. other similar, equivalent or corresponding rights throughout the
+     world based on applicable law or treaty, and any national
+     implementations thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention
+of, applicable law, Affirmer hereby overtly, fully, permanently,
+irrevocably and unconditionally waives, abandons, and surrenders all of
+Affirmer's Copyright and Related Rights and associated claims and causes
+of action, whether now known or unknown (including existing as well as
+future claims and causes of action), in the Work (i) in all territories
+worldwide, (ii) for the maximum duration provided by applicable law or
+treaty (including future time extensions), (iii) in any current or future
+medium and for any number of copies, and (iv) for any purpose whatsoever,
+including without limitation commercial, advertising or promotional
+purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
+member of the public at large and to the detriment of Affirmer's heirs and
+successors, fully intending that such Waiver shall not be subject to
+revocation, rescission, cancellation, termination, or any other legal or
+equitable action to disrupt the quiet enjoyment of the Work by the public
+as contemplated by Affirmer's express Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason
+be judged legally invalid or ineffective under applicable law, then the
+Waiver shall be preserved to the maximum extent permitted taking into
+account Affirmer's express Statement of Purpose. In addition, to the
+extent the Waiver is so judged Affirmer hereby grants to each affected
+person a royalty-free, non transferable, non sublicensable, non exclusive,
+irrevocable and unconditional license to exercise Affirmer's Copyright and
+Related Rights in the Work (i) in all territories worldwide, (ii) for the
+maximum duration provided by applicable law or treaty (including future
+time extensions), (iii) in any current or future medium and for any number
+of copies, and (iv) for any purpose whatsoever, including without
+limitation commercial, advertising or promotional purposes (the
+"License"). The License shall be deemed effective as of the date CC0 was
+applied by Affirmer to the Work. Should any part of the License for any
+reason be judged legally invalid or ineffective under applicable law, such
+partial invalidity or ineffectiveness shall not invalidate the remainder
+of the License, and in such case Affirmer hereby affirms that he or she
+will not (i) exercise any of his or her remaining Copyright and Related
+Rights in the Work or (ii) assert any associated claims and causes of
+action with respect to the Work, in either case contrary to Affirmer's
+express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+
+ a. No trademark or patent rights held by Affirmer are waived, abandoned,
+    surrendered, licensed or otherwise affected by this document.
+ b. Affirmer offers the Work as-is and makes no representations or
+    warranties of any kind concerning the Work, express, implied,
+    statutory or otherwise, including without limitation warranties of
+    title, merchantability, fitness for a particular purpose, non
+    infringement, or the absence of latent or other defects, accuracy, or
+    the present or absence of errors, whether or not discoverable, all to
+    the greatest extent permissible under applicable law.
+ c. Affirmer disclaims responsibility for clearing rights of other persons
+    that may apply to the Work or any use thereof, including without
+    limitation any person's Copyright and Related Rights in the Work.
+    Further, Affirmer disclaims responsibility for obtaining any necessary
+    consents, permissions or other rights required for any use of the
+    Work.
+ d. Affirmer understands and acknowledges that Creative Commons is not a
+    party to this document and has no duty or obligation with respect to
+    this CC0 or use of the Work.
\ No newline at end of file
diff --git a/ros2/modules/netifaces_vendor/Makefile b/ros2/modules/netifaces_vendor/Makefile
new file mode 100644
index 0000000..1f25400
--- /dev/null
+++ b/ros2/modules/netifaces_vendor/Makefile
@@ -0,0 +1,8 @@
+LIST=OS
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/ros2/modules/netifaces_vendor/netifaces.patch b/ros2/modules/netifaces_vendor/netifaces.patch
new file mode 100644
index 0000000..69a1cba
--- /dev/null
+++ b/ros2/modules/netifaces_vendor/netifaces.patch
@@ -0,0 +1,47 @@
+diff --git a/netifaces.c b/netifaces.c
+index fa18add..287d19c 100644
+--- a/netifaces.c
++++ b/netifaces.c
+@@ -1,5 +1,9 @@
+ #include <Python.h>
+ 
++#ifdef __QNXNTO__
++  #include <net/if_dl.h>
++#endif
++
+ /* Before Python 2.6, PyUnicode_FromString doesn't exist */
+ #if PY_MAJOR_VERSION < 2 || (PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION < 6)
+ PyObject *PyUnicode_FromString(const char *s)
+diff --git a/setup.py b/setup.py
+index 54b809e..4ad0ff3 100644
+--- a/setup.py
++++ b/setup.py
+@@ -7,6 +7,11 @@ from setuptools.command.build_ext import build_ext
+ from distutils.errors import *
+ import pickle
+ 
++qnx = False
++if "--qnx" in sys.argv:
++    qnx = True
++    sys.argv.remove("--qnx")
++
+ if sys.version_info[0] == 2:
+     def output(*args, **kwargs):
+         end = kwargs.get('end', '\n')
+@@ -550,6 +555,16 @@ class my_build_ext(build_ext):
+ 
+         results['have_pf_netlink'] = result
+ 
++        if qnx:
++            self.compiler.define_macro('_QNX_SOURCE',1)
++            self.compiler.define_macro('HAVE_GETIFADDRS',1)
++            self.compiler.define_macro('HAVE_SOCKET_IOCTLS',1)
++            self.compiler.define_macro('HAVE_PF_ROUTE',1)
++            self.compiler.define_macro('HAVE_GETNAMEINFO',1)
++            self.compiler.define_macro('HAVE_SOCKETADDR_SA_LEN',1)
++            self.compiler.define_macro('DHAVE_IPV6_SOCKET_IOCTLS',1)
++
++
+         if results['have_pf_netlink']:
+             output('will use netlink to read routing table')
+         elif results['have_sysctl_ctl_net']:
diff --git a/ros2/modules/netifaces_vendor/package.xml b/ros2/modules/netifaces_vendor/package.xml
new file mode 100644
index 0000000..e951000
--- /dev/null
+++ b/ros2/modules/netifaces_vendor/package.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<?xml-model
+  href="http://download.ros.org/schema/package_format2.xsd"
+  schematypens="http://www.w3.org/2001/XMLSchema"?>
+<package format="2">
+  <name>netifaces_vendor</name>
+  <version>0.10.9</version>
+  <description>
+    Wrapper around netifaces, it provides a fixed CMake module and an ExternalProject build of it.
+  </description>
+  <maintainer email="asobhy@blackberry.com">Ahmed Sobhy</maintainer>
+  <license>MIT License</license>
+  <license>MIT License</license>  <!-- netifaces is MIT -->
+  <url type="website">https://alastairs-place.net/projects/netifaces/</url>
+  <buildtool_depend>ament_cmake</buildtool_depend>
+  <export>
+    <build_type>ament_cmake</build_type>
+  </export>
+</package>
\ No newline at end of file
diff --git a/ros2/modules/numpy_vendor/CMakeLists.txt b/ros2/modules/numpy_vendor/CMakeLists.txt
new file mode 100644
index 0000000..fbed20c
--- /dev/null
+++ b/ros2/modules/numpy_vendor/CMakeLists.txt
@@ -0,0 +1,92 @@
+cmake_minimum_required(VERSION 3.5)
+
+project(numpy_vendor)
+
+find_package(ament_cmake REQUIRED)
+
+set(PACKAGE_VERSION "1.0.0")
+
+macro(build_numpy)
+
+  set(QNX_CPPFLAGS        "-D_POSIX_THREADS \
+                          -Wno-implicit-function-declaration -Wno-stringop-overflow -Wno-unused-but-set-variable \
+                          -D_QNX_SOURCE \
+                          -I${QNX_TARGET}/usr/include \
+                          -I${QNX_TARGET}/usr/include/python${PYTHON_VERSION_QNX} \
+                          -I${QNX_TARGET}/${CPUVARDIR}/usr/include \
+                          -I${QNX_TARGET}/${CPUVARDIR}/usr/include/python${PYTHON_VERSION_QNX} \
+                          -I${QNX_TARGET}/usr/include/${CPUVARDIR}/python${PYTHON_VERSION_QNX}")
+
+  set(EXPORT_PY export CC=${QNX_HOST}/usr/bin/qcc &&
+                export CXX=${QNX_HOST}/usr/bin/qcc &&
+                export CFLAGS=-Vgcc_nto${CPUVARDIR} &&
+                export CPPFLAGS=${QNX_CPPFLAGS} &&
+                export CXXFLAGS=-Vgcc_nto${CPUVARDIR} &&
+                export LDSHARED=${QNX_HOST}/usr/bin/qcc &&
+                export LDFLAGS=-shared &&
+                export host_alias=nto${CPUVARDIR} &&
+                export AR=${QNX_HOST}/usr/bin/nto${CPU}-ar &&
+                export AS=${QNX_HOST}/usr/bin/nto${CPU}-as &&
+                export RANLIB=${QNX_HOST}/usr/bin/nto${CPU}-ranlib &&
+                export LD_LIBRARY_PATH=${QNX_HOST}/usr/lib:$ENV{LD_LIBRARY_PATH} &&
+                export PATH=${QNX_HOST}/usr/lib:${QNX_HOST}/usr/bin:$ENV{PATH} &&
+                export BLAS=None &&
+                export LAPACK=None &&
+                export ATLAS=None &&
+                export NPY_DISABLE_SVML=1 &&
+                export SETUPTOOLS_USE_DISTUTILS=stdlib 
+  )
+
+  include(ExternalProject)
+  ExternalProject_Add(numpy
+    GIT_REPOSITORY https://github.com/numpy/numpy.git
+    GIT_TAG db4f43983cb938f12c311e1f5b7165e270c393b4
+    TIMEOUT 600
+    PATCH_COMMAND git apply ${CMAKE_CURRENT_SOURCE_DIR}/numpy.patch
+    CONFIGURE_COMMAND ""
+    BUILD_COMMAND
+      cd ${CMAKE_CURRENT_BINARY_DIR}/numpy-prefix/src/numpy &&
+      git submodule update --init &&
+      ${EXPORT_PY} &&
+      python3 setup.py build_ext -lc++ -b${CMAKE_CURRENT_BINARY_DIR}/numpy_install build --build-temp=${CMAKE_CURRENT_BINARY_DIR}/numpy_install_tmp --build-lib=${CMAKE_CURRENT_BINARY_DIR}/numpy_install
+    INSTALL_COMMAND ""
+  )
+
+  #The external project will install to the build folder, but we'll install that on make install.
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/numpy_install/
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages
+  )
+
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/numpy-prefix/src/numpy/numpy/core/include
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages/numpy/core
+  )
+
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/numpy-prefix/src/numpy/numpy/random/include
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages/numpy/random
+  )
+
+  execute_process(COMMAND python3 -c "import sys; print(str(sys.version_info.major)+'.'+str(sys.version_info.minor))" OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE pyversion)
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/numpy-prefix/src/numpy/build/src.linux-x86_64-${pyversion}/numpy/
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages/numpy
+  )
+
+endmacro()
+
+find_package(numpy QUIET)
+if(NOT numpy_FOUND)
+  build_numpy()
+endif()
+
+ament_package()
diff --git a/ros2/modules/numpy_vendor/LICENSE b/ros2/modules/numpy_vendor/LICENSE
new file mode 100644
index 0000000..1625c17
--- /dev/null
+++ b/ros2/modules/numpy_vendor/LICENSE
@@ -0,0 +1,121 @@
+Creative Commons Legal Code
+
+CC0 1.0 Universal
+
+    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
+    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
+    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
+    INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
+    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
+    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
+    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
+    HEREUNDER.
+
+Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator
+and subsequent owner(s) (each and all, an "owner") of an original work of
+authorship and/or a database (each, a "Work").
+
+Certain owners wish to permanently relinquish those rights to a Work for
+the purpose of contributing to a commons of creative, cultural and
+scientific works ("Commons") that the public can reliably and without fear
+of later claims of infringement build upon, modify, incorporate in other
+works, reuse and redistribute as freely as possible in any form whatsoever
+and for any purposes, including without limitation commercial purposes.
+These owners may contribute to the Commons to promote the ideal of a free
+culture and the further production of creative, cultural and scientific
+works, or to gain reputation or greater distribution for their Work in
+part through the use and efforts of others.
+
+For these and/or other purposes and motivations, and without any
+expectation of additional consideration or compensation, the person
+associating CC0 with a Work (the "Affirmer"), to the extent that he or she
+is an owner of Copyright and Related Rights in the Work, voluntarily
+elects to apply CC0 to the Work and publicly distribute the Work under its
+terms, with knowledge of his or her Copyright and Related Rights in the
+Work and the meaning and intended legal effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+protected by copyright and related or neighboring rights ("Copyright and
+Related Rights"). Copyright and Related Rights include, but are not
+limited to, the following:
+
+  i. the right to reproduce, adapt, distribute, perform, display,
+     communicate, and translate a Work;
+ ii. moral rights retained by the original author(s) and/or performer(s);
+iii. publicity and privacy rights pertaining to a person's image or
+     likeness depicted in a Work;
+ iv. rights protecting against unfair competition in regards to a Work,
+     subject to the limitations in paragraph 4(a), below;
+  v. rights protecting the extraction, dissemination, use and reuse of data
+     in a Work;
+ vi. database rights (such as those arising under Directive 96/9/EC of the
+     European Parliament and of the Council of 11 March 1996 on the legal
+     protection of databases, and under any national implementation
+     thereof, including any amended or successor version of such
+     directive); and
+vii. other similar, equivalent or corresponding rights throughout the
+     world based on applicable law or treaty, and any national
+     implementations thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention
+of, applicable law, Affirmer hereby overtly, fully, permanently,
+irrevocably and unconditionally waives, abandons, and surrenders all of
+Affirmer's Copyright and Related Rights and associated claims and causes
+of action, whether now known or unknown (including existing as well as
+future claims and causes of action), in the Work (i) in all territories
+worldwide, (ii) for the maximum duration provided by applicable law or
+treaty (including future time extensions), (iii) in any current or future
+medium and for any number of copies, and (iv) for any purpose whatsoever,
+including without limitation commercial, advertising or promotional
+purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
+member of the public at large and to the detriment of Affirmer's heirs and
+successors, fully intending that such Waiver shall not be subject to
+revocation, rescission, cancellation, termination, or any other legal or
+equitable action to disrupt the quiet enjoyment of the Work by the public
+as contemplated by Affirmer's express Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason
+be judged legally invalid or ineffective under applicable law, then the
+Waiver shall be preserved to the maximum extent permitted taking into
+account Affirmer's express Statement of Purpose. In addition, to the
+extent the Waiver is so judged Affirmer hereby grants to each affected
+person a royalty-free, non transferable, non sublicensable, non exclusive,
+irrevocable and unconditional license to exercise Affirmer's Copyright and
+Related Rights in the Work (i) in all territories worldwide, (ii) for the
+maximum duration provided by applicable law or treaty (including future
+time extensions), (iii) in any current or future medium and for any number
+of copies, and (iv) for any purpose whatsoever, including without
+limitation commercial, advertising or promotional purposes (the
+"License"). The License shall be deemed effective as of the date CC0 was
+applied by Affirmer to the Work. Should any part of the License for any
+reason be judged legally invalid or ineffective under applicable law, such
+partial invalidity or ineffectiveness shall not invalidate the remainder
+of the License, and in such case Affirmer hereby affirms that he or she
+will not (i) exercise any of his or her remaining Copyright and Related
+Rights in the Work or (ii) assert any associated claims and causes of
+action with respect to the Work, in either case contrary to Affirmer's
+express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+
+ a. No trademark or patent rights held by Affirmer are waived, abandoned,
+    surrendered, licensed or otherwise affected by this document.
+ b. Affirmer offers the Work as-is and makes no representations or
+    warranties of any kind concerning the Work, express, implied,
+    statutory or otherwise, including without limitation warranties of
+    title, merchantability, fitness for a particular purpose, non
+    infringement, or the absence of latent or other defects, accuracy, or
+    the present or absence of errors, whether or not discoverable, all to
+    the greatest extent permissible under applicable law.
+ c. Affirmer disclaims responsibility for clearing rights of other persons
+    that may apply to the Work or any use thereof, including without
+    limitation any person's Copyright and Related Rights in the Work.
+    Further, Affirmer disclaims responsibility for obtaining any necessary
+    consents, permissions or other rights required for any use of the
+    Work.
+ d. Affirmer understands and acknowledges that Creative Commons is not a
+    party to this document and has no duty or obligation with respect to
+    this CC0 or use of the Work.
\ No newline at end of file
diff --git a/ros2/modules/numpy_vendor/Makefile b/ros2/modules/numpy_vendor/Makefile
new file mode 100644
index 0000000..1f25400
--- /dev/null
+++ b/ros2/modules/numpy_vendor/Makefile
@@ -0,0 +1,8 @@
+LIST=OS
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/ros2/modules/numpy_vendor/numpy.patch b/ros2/modules/numpy_vendor/numpy.patch
new file mode 100644
index 0000000..89725db
--- /dev/null
+++ b/ros2/modules/numpy_vendor/numpy.patch
@@ -0,0 +1,121 @@
+diff --git a/numpy/core/include/numpy/npy_3kcompat.h b/numpy/core/include/numpy/npy_3kcompat.h
+index 62fde943a..4fa41ec07 100644
+--- a/numpy/core/include/numpy/npy_3kcompat.h
++++ b/numpy/core/include/numpy/npy_3kcompat.h
+@@ -12,6 +12,10 @@
+ #ifndef NUMPY_CORE_INCLUDE_NUMPY_NPY_3KCOMPAT_H_
+ #define NUMPY_CORE_INCLUDE_NUMPY_NPY_3KCOMPAT_H_
+ 
++#ifdef __QNX__
++#include <unistd.h>
++#endif
++
+ #include <Python.h>
+ #include <stdio.h>
+ 
+diff --git a/numpy/core/include/numpy/npy_endian.h b/numpy/core/include/numpy/npy_endian.h
+index 5e58a7f52..6a15366eb 100644
+--- a/numpy/core/include/numpy/npy_endian.h
++++ b/numpy/core/include/numpy/npy_endian.h
+@@ -9,11 +9,15 @@
+ #if defined(NPY_HAVE_ENDIAN_H) || defined(NPY_HAVE_SYS_ENDIAN_H)
+     /* Use endian.h if available */
+ 
+-    #if defined(NPY_HAVE_ENDIAN_H)
+-    #include <endian.h>
+-    #elif defined(NPY_HAVE_SYS_ENDIAN_H)
+-    #include <sys/endian.h>
+-    #endif
++    #if defined(__QNX__)
++	#include <gulliver.h>
++	#else
++		#if defined(NPY_HAVE_ENDIAN_H)
++			#include <endian.h>
++		#elif defined(NPY_HAVE_SYS_ENDIAN_H)
++			#include <sys/endian.h>
++		#endif
++	#endif
+ 
+     #if defined(BYTE_ORDER) && defined(BIG_ENDIAN) && defined(LITTLE_ENDIAN)
+         #define NPY_BYTE_ORDER    BYTE_ORDER
+diff --git a/numpy/distutils/ccompiler.py b/numpy/distutils/ccompiler.py
+index 40f495fc7..2a1bbdee1 100644
+--- a/numpy/distutils/ccompiler.py
++++ b/numpy/distutils/ccompiler.py
+@@ -5,6 +5,8 @@
+ import shlex
+ import time
+ import subprocess
++# QNX
++import platform
+ from copy import copy
+ from pathlib import Path
+ from distutils import ccompiler
+@@ -808,6 +810,11 @@ def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):
+     r = _distutils_gen_lib_options(compiler, library_dirs,
+                                    runtime_library_dirs, libraries)
+     lib_opts = []
++    # Need to add CFLAGS to linker options for QNX
++    if 'QNX_TARGET' in os.environ:
++        lib_opts = [os.environ['CFLAGS']]
++    else:
++        log.error("QNX_TARGET not defined")
+     for i in r:
+         if is_sequence(i):
+             lib_opts.extend(list(i))
+diff --git a/numpy/distutils/system_info.py b/numpy/distutils/system_info.py
+index 3dca7fb5a..d35525bdc 100644
+--- a/numpy/distutils/system_info.py
++++ b/numpy/distutils/system_info.py
+@@ -326,16 +326,23 @@ def add_system_root(library_root):
+         add_system_root(os.path.join(conda_dir, 'Library'))
+ 
+ else:
+-    default_lib_dirs = libpaths(['/usr/local/lib', '/opt/lib', '/usr/lib',
+-                                 '/opt/local/lib', '/sw/lib'], platform_bits)
+-    default_runtime_dirs = []
+-    default_include_dirs = ['/usr/local/include',
+-                            '/opt/include',
+-                            # path of umfpack under macports
+-                            '/opt/local/include/ufsparse',
+-                            '/opt/local/include', '/sw/include',
+-                            '/usr/include/suitesparse']
+-    default_src_dirs = ['.', '/usr/local/src', '/opt/src', '/sw/src']
++    if 'QNX_TARGET' in os.environ:
++        default_lib_dirs = []
++        default_runtime_dirs = []
++        default_include_dirs = []
++        default_src_dirs = []
++    else:
++        log.error("QNX_TARGET not defined")
++        default_lib_dirs = libpaths(['/usr/local/lib', '/opt/lib', '/usr/lib',
++                                     '/opt/local/lib', '/sw/lib'], platform_bits)
++        default_runtime_dirs = []
++        default_include_dirs = ['/usr/local/include',
++                                '/opt/include', '/usr/include',
++                                # path of umfpack under macports
++                                '/opt/local/include/ufsparse',
++                                '/opt/local/include', '/sw/include',
++                                '/usr/include/suitesparse']
++        default_src_dirs = ['.', '/usr/local/src', '/opt/src', '/sw/src']
+ 
+     default_x11_lib_dirs = libpaths(['/usr/X11R6/lib', '/usr/X11/lib',
+                                      '/usr/lib'], platform_bits)
+diff --git a/numpy/distutils/unixccompiler.py b/numpy/distutils/unixccompiler.py
+index 4884960fd..b7c14ad1e 100644
+--- a/numpy/distutils/unixccompiler.py
++++ b/numpy/distutils/unixccompiler.py
+@@ -46,7 +46,12 @@ def UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts
+     # gcc style automatic dependencies, outputs a makefile (-MF) that lists
+     # all headers needed by a c file as a side effect of compilation (-MMD)
+     if getattr(self, '_auto_depends', False):
+-        deps = ['-MMD', '-MF', obj + '.d']
++        # QNX compiler does not like -MMD and -MF flags
++        if 'QNX_TARGET' in os.environ:
++            deps = []
++        else:
++            log.error("QNX_TARGET not defined")
++            deps = ['-MMD', '-MF', obj + '.d']
+     else:
+         deps = []
+ 
diff --git a/ros2/modules/numpy_vendor/package.xml b/ros2/modules/numpy_vendor/package.xml
new file mode 100644
index 0000000..f4fc825
--- /dev/null
+++ b/ros2/modules/numpy_vendor/package.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<?xml-model
+  href="http://download.ros.org/schema/package_format2.xsd"
+  schematypens="http://www.w3.org/2001/XMLSchema"?>
+<package format="2">
+  <name>numpy_vendor</name>
+  <version>1.18.4</version>
+  <description>
+    Wrapper around numpy, it provides a fixed CMake module and an ExternalProject build of it.
+  </description>
+  <maintainer email="asobhy@blackberry.com">Ahmed Sobhy</maintainer>
+  <license>BSD</license>
+  <license>BSD</license>  <!-- numpy is BSD -->
+  <url type="website">https://numpy.org</url>
+  <buildtool_depend>ament_cmake</buildtool_depend>
+  <export>
+    <build_type>ament_cmake</build_type>
+  </export>
+</package>
\ No newline at end of file
diff --git a/ros2/modules/opencv_vendor/CMakeLists.txt b/ros2/modules/opencv_vendor/CMakeLists.txt
new file mode 100644
index 0000000..0994a68
--- /dev/null
+++ b/ros2/modules/opencv_vendor/CMakeLists.txt
@@ -0,0 +1,59 @@
+cmake_minimum_required(VERSION 3.5)
+
+project(opencv_vendor)
+
+find_package(ament_cmake REQUIRED)
+
+set(PACKAGE_VERSION "1.0.0")
+
+macro(build_opencv)
+
+  set(extra_cmake_args)
+  
+  if(DEFINED CMAKE_BUILD_TYPE)
+    list(APPEND extra_cmake_args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
+  endif()
+  
+  list(APPEND extra_cmake_args "-DBUILD_EXTRAS=OFF")
+  list(APPEND extra_cmake_args "-DBUILD_UNIT_TESTS=OFF")
+  list(APPEND extra_cmake_args "-DBUILD_SHARED_LIBS=ON")
+  list(APPEND extra_cmake_args "-DBUILD_TESTS=OFF")
+  list(APPEND extra_cmake_args "-DBUILD_PERF_TESTS=OFF")
+  list(APPEND extra_cmake_args "-DWITH_QT=OFF ")
+  list(APPEND extra_cmake_args "-DWITH_GTK=OFF")
+  list(APPEND extra_cmake_args "-DBUILD_opencv_gapi=OFF")
+  list(APPEND extra_cmake_args "-DWITH_JASPER=OFF")
+  list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} -Wno-int-to-pointer-cast")
+  
+  if(DEFINED CMAKE_TOOLCHAIN_FILE)
+    list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
+  endif()
+  
+  include(ExternalProject)
+  ExternalProject_Add(opencv
+    GIT_REPOSITORY https://github.com/opencv/opencv.git
+    GIT_TAG 01b2c5a77ca6dbef3baef24ebc0a5984579231d9
+    TIMEOUT 600
+    PATCH_COMMAND git apply ${CMAKE_CURRENT_SOURCE_DIR}/opencv.patch
+    CMAKE_ARGS
+      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/opencv_install
+      ${extra_cmake_args}
+      -Wno-dev
+  )
+
+  # The external project will install to the build folder, but we'll install that on make install.
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/opencv_install/
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}
+  )
+
+endmacro()
+
+find_package(opencv QUIET)
+if(NOT opencv_FOUND)
+  build_opencv()
+endif()
+
+ament_package()
diff --git a/ros2/modules/opencv_vendor/LICENSE b/ros2/modules/opencv_vendor/LICENSE
new file mode 100644
index 0000000..1625c17
--- /dev/null
+++ b/ros2/modules/opencv_vendor/LICENSE
@@ -0,0 +1,121 @@
+Creative Commons Legal Code
+
+CC0 1.0 Universal
+
+    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
+    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
+    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
+    INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
+    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
+    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
+    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
+    HEREUNDER.
+
+Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator
+and subsequent owner(s) (each and all, an "owner") of an original work of
+authorship and/or a database (each, a "Work").
+
+Certain owners wish to permanently relinquish those rights to a Work for
+the purpose of contributing to a commons of creative, cultural and
+scientific works ("Commons") that the public can reliably and without fear
+of later claims of infringement build upon, modify, incorporate in other
+works, reuse and redistribute as freely as possible in any form whatsoever
+and for any purposes, including without limitation commercial purposes.
+These owners may contribute to the Commons to promote the ideal of a free
+culture and the further production of creative, cultural and scientific
+works, or to gain reputation or greater distribution for their Work in
+part through the use and efforts of others.
+
+For these and/or other purposes and motivations, and without any
+expectation of additional consideration or compensation, the person
+associating CC0 with a Work (the "Affirmer"), to the extent that he or she
+is an owner of Copyright and Related Rights in the Work, voluntarily
+elects to apply CC0 to the Work and publicly distribute the Work under its
+terms, with knowledge of his or her Copyright and Related Rights in the
+Work and the meaning and intended legal effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+protected by copyright and related or neighboring rights ("Copyright and
+Related Rights"). Copyright and Related Rights include, but are not
+limited to, the following:
+
+  i. the right to reproduce, adapt, distribute, perform, display,
+     communicate, and translate a Work;
+ ii. moral rights retained by the original author(s) and/or performer(s);
+iii. publicity and privacy rights pertaining to a person's image or
+     likeness depicted in a Work;
+ iv. rights protecting against unfair competition in regards to a Work,
+     subject to the limitations in paragraph 4(a), below;
+  v. rights protecting the extraction, dissemination, use and reuse of data
+     in a Work;
+ vi. database rights (such as those arising under Directive 96/9/EC of the
+     European Parliament and of the Council of 11 March 1996 on the legal
+     protection of databases, and under any national implementation
+     thereof, including any amended or successor version of such
+     directive); and
+vii. other similar, equivalent or corresponding rights throughout the
+     world based on applicable law or treaty, and any national
+     implementations thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention
+of, applicable law, Affirmer hereby overtly, fully, permanently,
+irrevocably and unconditionally waives, abandons, and surrenders all of
+Affirmer's Copyright and Related Rights and associated claims and causes
+of action, whether now known or unknown (including existing as well as
+future claims and causes of action), in the Work (i) in all territories
+worldwide, (ii) for the maximum duration provided by applicable law or
+treaty (including future time extensions), (iii) in any current or future
+medium and for any number of copies, and (iv) for any purpose whatsoever,
+including without limitation commercial, advertising or promotional
+purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
+member of the public at large and to the detriment of Affirmer's heirs and
+successors, fully intending that such Waiver shall not be subject to
+revocation, rescission, cancellation, termination, or any other legal or
+equitable action to disrupt the quiet enjoyment of the Work by the public
+as contemplated by Affirmer's express Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason
+be judged legally invalid or ineffective under applicable law, then the
+Waiver shall be preserved to the maximum extent permitted taking into
+account Affirmer's express Statement of Purpose. In addition, to the
+extent the Waiver is so judged Affirmer hereby grants to each affected
+person a royalty-free, non transferable, non sublicensable, non exclusive,
+irrevocable and unconditional license to exercise Affirmer's Copyright and
+Related Rights in the Work (i) in all territories worldwide, (ii) for the
+maximum duration provided by applicable law or treaty (including future
+time extensions), (iii) in any current or future medium and for any number
+of copies, and (iv) for any purpose whatsoever, including without
+limitation commercial, advertising or promotional purposes (the
+"License"). The License shall be deemed effective as of the date CC0 was
+applied by Affirmer to the Work. Should any part of the License for any
+reason be judged legally invalid or ineffective under applicable law, such
+partial invalidity or ineffectiveness shall not invalidate the remainder
+of the License, and in such case Affirmer hereby affirms that he or she
+will not (i) exercise any of his or her remaining Copyright and Related
+Rights in the Work or (ii) assert any associated claims and causes of
+action with respect to the Work, in either case contrary to Affirmer's
+express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+
+ a. No trademark or patent rights held by Affirmer are waived, abandoned,
+    surrendered, licensed or otherwise affected by this document.
+ b. Affirmer offers the Work as-is and makes no representations or
+    warranties of any kind concerning the Work, express, implied,
+    statutory or otherwise, including without limitation warranties of
+    title, merchantability, fitness for a particular purpose, non
+    infringement, or the absence of latent or other defects, accuracy, or
+    the present or absence of errors, whether or not discoverable, all to
+    the greatest extent permissible under applicable law.
+ c. Affirmer disclaims responsibility for clearing rights of other persons
+    that may apply to the Work or any use thereof, including without
+    limitation any person's Copyright and Related Rights in the Work.
+    Further, Affirmer disclaims responsibility for obtaining any necessary
+    consents, permissions or other rights required for any use of the
+    Work.
+ d. Affirmer understands and acknowledges that Creative Commons is not a
+    party to this document and has no duty or obligation with respect to
+    this CC0 or use of the Work.
\ No newline at end of file
diff --git a/ros2/modules/opencv_vendor/Makefile b/ros2/modules/opencv_vendor/Makefile
new file mode 100644
index 0000000..1f25400
--- /dev/null
+++ b/ros2/modules/opencv_vendor/Makefile
@@ -0,0 +1,8 @@
+LIST=OS
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/ros2/modules/opencv_vendor/cmake/platforms/OpenCV-QNX.cmake b/ros2/modules/opencv_vendor/cmake/platforms/OpenCV-QNX.cmake
new file mode 100644
index 0000000..27dce2b
--- /dev/null
+++ b/ros2/modules/opencv_vendor/cmake/platforms/OpenCV-QNX.cmake
@@ -0,0 +1,8 @@
+# QNX Platform
+set(QNX TRUE)
+
+set(arch gcc_nto${CMAKE_SYSTEM_PROCESSOR})
+set(CMAKE_ASM_COMPILER ${QNX_HOST}/usr/bin/qcc -V${arch})
+set(CMAKE_C_COMPILER_TARGET ${arch})
+set(CMAKE_CXX_COMPILER_TARGET ${arch})
+
diff --git a/ros2/modules/opencv_vendor/opencv.patch b/ros2/modules/opencv_vendor/opencv.patch
new file mode 100644
index 0000000..08c6dd1
--- /dev/null
+++ b/ros2/modules/opencv_vendor/opencv.patch
@@ -0,0 +1,154 @@
+diff --git a/3rdparty/carotene/CMakeLists.txt b/3rdparty/carotene/CMakeLists.txt
+index 528fcf62e1..bcf4c5a686 100644
+--- a/3rdparty/carotene/CMakeLists.txt
++++ b/3rdparty/carotene/CMakeLists.txt
+@@ -13,7 +13,7 @@ file(GLOB_RECURSE carotene_sources RELATIVE "${CMAKE_CURRENT_LIST_DIR}" "${CAROT
+ 
+ include_directories(${CAROTENE_INCLUDE_DIR})
+ 
+-if(CMAKE_COMPILER_IS_GNUCC)
++if(CMAKE_COMPILER_IS_GNUCC AND NOT QNX)
+     set(CMAKE_CXX_FLAGS "-fvisibility=hidden ${CMAKE_CXX_FLAGS}")
+ 
+     # allow more inlines - these parameters improve performance for:
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index 4c0b3880fc..c5e7d60a1d 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -594,7 +594,7 @@ endif()
+ ocv_cmake_hook(POST_CMAKE_BUILD_OPTIONS)
+ 
+ # --- Python Support ---
+-if(NOT IOS)
++if(NOT IOS AND NOT QNX)
+   include(cmake/OpenCVDetectPython.cmake)
+ endif()
+ 
+@@ -635,6 +635,8 @@ if(UNIX)
+       set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} m pthread)
+     elseif(EMSCRIPTEN)
+       # no need to link to system libs with emscripten
++    elseif(QNX)
++      set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} m)
+     else()
+       set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} dl m pthread rt)
+     endif()
+diff --git a/cmake/checks/cpu_neon.cpp b/cmake/checks/cpu_neon.cpp
+index c309e85049..5269ef1c8b 100644
+--- a/cmake/checks/cpu_neon.cpp
++++ b/cmake/checks/cpu_neon.cpp
+@@ -7,8 +7,12 @@
+ #elif defined(__ARM_NEON__) || (defined (__ARM_NEON) && defined(__aarch64__))
+ #  include <arm_neon.h>
+ #  define CV_NEON 1
++#elif defined(__QNXNTO__)
++#  include <arm_neon.h>
++#  define CV_NEON 1
+ #endif
+ 
++
+ // MSVC 2019 bug. Details: https://github.com/opencv/opencv/pull/16027
+ void test_aliased_type(const uint8x16_t& a) { }
+ void test_aliased_type(const int8x16_t& a) { }
+diff --git a/modules/core/src/opencl/runtime/opencl_core.cpp b/modules/core/src/opencl/runtime/opencl_core.cpp
+index db2385a258..0ad183ea10 100644
+--- a/modules/core/src/opencl/runtime/opencl_core.cpp
++++ b/modules/core/src/opencl/runtime/opencl_core.cpp
+@@ -155,7 +155,7 @@ static void* WinGetProcAddress(const char* name)
+ #define CV_CL_GET_PROC_ADDRESS(name) WinGetProcAddress(name)
+ #endif // _WIN32
+ 
+-#if defined(__linux__) || defined(__FreeBSD__)
++#if defined(__linux__) || defined(__FreeBSD__) || defined(__QNXNTO__)
+ #include <dlfcn.h>
+ #include <stdio.h>
+ 
+diff --git a/modules/core/src/parallel.cpp b/modules/core/src/parallel.cpp
+index 09ee3bb6de..746016e91b 100644
+--- a/modules/core/src/parallel.cpp
++++ b/modules/core/src/parallel.cpp
+@@ -68,6 +68,10 @@
+     #endif
+ #endif
+ 
++#if defined (__QNXNTO__)
++    #include <sys/syspage.h>
++#endif
++
+ #if defined CV_CXX11
+     #include <thread>
+ #endif
+@@ -946,13 +950,16 @@ int getNumberOfCPUs_()
+ 
+ #endif
+ 
+-#if !defined(_WIN32) && !defined(__APPLE__)
++#if !defined(_WIN32) && !defined(__APPLE__) && defined(_SC_NPROCESSORS_ONLN)
+ 
+     static unsigned cpu_count_sysconf = (unsigned)sysconf( _SC_NPROCESSORS_ONLN );
+     ncpus = minNonZero(ncpus, cpu_count_sysconf);
+-
++#elif defined (__QNXNTO__)
++    static unsigned cpu_count_sysconf = _syspage_ptr->num_cpu;
++    ncpus = minNonZero(ncpus, cpu_count_sysconf);
+ #endif
+ 
++
+     return ncpus != 0 ? ncpus : 1;
+ }
+ 
+diff --git a/modules/core/src/system.cpp b/modules/core/src/system.cpp
+index 872019dd9e..1ccbbf9760 100644
+--- a/modules/core/src/system.cpp
++++ b/modules/core/src/system.cpp
+@@ -45,6 +45,10 @@
+ #include <iostream>
+ #include <ostream>
+ 
++#ifdef __QNXNTO__
++    #include <unistd.h>
++#endif
++
+ #include <opencv2/core/utils/configuration.private.hpp>
+ #include <opencv2/core/utils/trace.private.hpp>
+ 
+diff --git a/modules/videoio/src/backend_plugin.cpp b/modules/videoio/src/backend_plugin.cpp
+index f73a9ad7ac..dc72c4aefa 100644
+--- a/modules/videoio/src/backend_plugin.cpp
++++ b/modules/videoio/src/backend_plugin.cpp
+@@ -21,7 +21,7 @@ using namespace std;
+ 
+ #if defined(_WIN32)
+ #include <windows.h>
+-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__)
++#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__) || defined(__QNXNTO__)
+ #include <dlfcn.h>
+ #endif
+ 
+@@ -77,7 +77,7 @@ void* getSymbol_(LibHandle_t h, const char* symbolName)
+ {
+ #if defined(_WIN32)
+     return (void*)GetProcAddress(h, symbolName);
+-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__)
++#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__) || defined(__QNXNTO__)
+     return dlsym(h, symbolName);
+ #endif
+ }
+@@ -91,7 +91,7 @@ LibHandle_t libraryLoad_(const FileSystemPath_t& filename)
+ # else
+     return LoadLibraryW(filename.c_str());
+ #endif
+-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__)
++#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__) || defined(__QNXNTO__)
+     return dlopen(filename.c_str(), RTLD_LAZY);
+ #endif
+ }
+@@ -101,7 +101,7 @@ void libraryRelease_(LibHandle_t h)
+ {
+ #if defined(_WIN32)
+     FreeLibrary(h);
+-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__)
++#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__) || defined(__QNXNTO__)
+     dlclose(h);
+ #endif
+ }
diff --git a/ros2/modules/opencv_vendor/package.xml b/ros2/modules/opencv_vendor/package.xml
new file mode 100644
index 0000000..2a8788b
--- /dev/null
+++ b/ros2/modules/opencv_vendor/package.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<?xml-model
+  href="http://download.ros.org/schema/package_format2.xsd"
+  schematypens="http://www.w3.org/2001/XMLSchema"?>
+<package format="2">
+  <name>opencv_vendor</name>
+  <version>4.3.0</version>
+  <description>
+    Wrapper around opencv, it provides a fixed CMake module and an ExternalProject build of it.
+  </description>
+  <maintainer email="asobhy@blackberry.com">Ahmed Sobhy</maintainer>
+  <license>BSD</license>
+  <license>BSD</license>
+  <url type="website">https://opencv.org/</url>
+  <buildtool_depend>ament_cmake</buildtool_depend>
+  <export>
+    <build_type>ament_cmake</build_type>
+  </export>
+</package>
\ No newline at end of file
diff --git a/ros2/platform/qnx.nto.toolchain.cmake b/ros2/platform/qnx.nto.toolchain.cmake
new file mode 100644
index 0000000..9feb4b0
--- /dev/null
+++ b/ros2/platform/qnx.nto.toolchain.cmake
@@ -0,0 +1,101 @@
+# QNX toolchain file for building ROS2
+
+if("$ENV{QNX_HOST}" STREQUAL "")
+    message(FATAL_ERROR "QNX_HOST environment variable not found. Please set the variable to your host's build tools")
+endif()
+if("$ENV{QNX_TARGET}" STREQUAL "")
+    message(FATAL_ERROR "QNX_TARGET environment variable not found. Please set the variable to the qnx target location")
+endif()
+
+set(QNX_HOST "$ENV{QNX_HOST}")
+set(QNX_TARGET "$ENV{QNX_TARGET}")
+
+message(STATUS "using QNX_HOST ${QNX_HOST}")
+message(STATUS "using QNX_TARGET ${QNX_TARGET}")
+
+set(ARCH "$ENV{ARCH}")
+set(CPUVAR "$ENV{CPUVARDIR}")
+set(CPUVARDIR "$ENV{CPUVARDIR}")
+
+message(STATUS "using CPUVAR ${CPUVAR}")
+message(STATUS "using CPUVARDIR ${CPUVARDIR}")
+message(STATUS "using ARCH ${ARCH}")
+
+set(QNX TRUE)
+set(CMAKE_SYSTEM_NAME QNX)
+
+set(CMAKE_C_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_CXX_COMPILER ${QNX_HOST}/usr/bin/q++)
+
+set(CMAKE_SYSTEM_PROCESSOR "${CPUVARDIR}")
+
+set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES} ${QNX_TARGET}/usr/include)
+
+set(EXTRA_CMAKE_C_FLAGS "${EXTRA_CMAKE_C_FLAGS} -Wl,-rpath-link,${QNX_TARGET}/${CPUVARDIR}/usr/lib:${CMAKE_INSTALL_PREFIX}/lib -DOPENCV_NOSTL_TRANSITIONAL -D_QNX_SOURCE")
+set(EXTRA_CMAKE_CXX_FLAGS "${EXTRA_CMAKE_C_FLAGS} ${EXTRA_CMAKE_CXX_FLAGS} -Wno-maybe-uninitialized -Wno-invalid-offsetof")
+
+# needs a cpu + variant
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_C_FLAGS}" CACHE STRING "c_flags")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} -std=c++14 -DTIXML_USE_STL ${EXTRA_CMAKE_CXX_FLAGS}" CACHE STRING "cxx_flags")
+
+# needs only cpu, ARCH=(CPU only)
+set(CMAKE_AR "${QNX_HOST}/usr/bin/nto${ARCH}-ar${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "archiver")
+set(CMAKE_RANLIB "${QNX_HOST}/usr/bin/nto${ARCH}-ranlib${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "ranlib")
+set(CMAKE_STRIP "${QNX_HOST}/usr/bin/nto${ARCH}-strip${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "strip")
+
+set(EXTRA_CMAKE_LINKER_FLAGS "-lregex -Wl,--build-id=md5,--as-needed ${EXTRA_CMAKE_LINKER_FLAGS}")
+set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "exe_linker_flags")
+set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "so_linker_flags")
+
+set(THREADS_PTHREAD_ARG "0" CACHE STRING "Result from TRY_RUN" FORCE)
+
+########################################################################
+# Python setup
+########################################################################
+# the variable below has to be set according to the output of
+# sysconfig.get_config_var('SOABI') on the target, which allows python
+# extension files to be found.
+if(EXISTS ${QNX_TARGET}/usr/include/python3.11)
+  set(PYTHON_VERSION_QNX 3.11)
+  set(PYTHON_VERSION_QNX_ABI 311)
+else()
+  set(PYTHON_VERSION_QNX 3.8)
+  set(PYTHON_VERSION_QNX_ABI 38)
+endif()
+set(PYTHON_SOABI cpython-38)
+# find the host python then override the include and library directories to link against the target cross compiled binaries
+find_package(PythonInterp ${PYTHON_VERSION_QNX} REQUIRED)
+set(NUMPY_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages)
+set(PYTHON_INCLUDE_DIR ${QNX_TARGET}/usr/include/${CPUVARDIR}/python${PYTHON_VERSION_QNX};${QNX_TARGET}/${CPUVARDIR}/usr/include/python${PYTHON_VERSION_QNX};${QNX_TARGET}/usr/include/python${PYTHON_VERSION_QNX};${QNX_TARGET}/${CPUVARDIR}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages/numpy/core/include;${ROS_EXTERNAL_DEPS_INSTALL}/${CPUVARDIR}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages/numpy/core/include)
+set(PYTHON_INCLUDE_DIRS ${PYTHON_INCLUDE_DIR})
+set(PYTHON_LIBRARY ${QNX_TARGET}/${CPUVARDIR}/usr/lib/libpython${PYTHON_VERSION_QNX}.so)
+set(PYTHON_LIBRARIES ${PYTHON_LIBRARY})
+set(PYTHONLIBS_FOUND)
+set(PYTHON_MODULE_EXTENSION .cpython-${PYTHON_VERSION_QNX_ABI}.so)
+set(PYTHON_IS_DEBUG FALSE)
+#######################################################################
+set(Eigen3_INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/include)
+set(EIGEN3_FOUND TRUE)
+set(Eigen3_FOUND TRUE)
+#######################################################################
+
+#######################################################################
+# Search paths for dependencies
+#######################################################################
+set(CMAKE_FIND_ROOT_PATH ${CMAKE_INSTALL_PREFIX};${QNX_TARGET};${QNX_TARGET}/${CPUVARDIR})
+
+# Do not include runtime paths in libraries because they will be
+# incorrect since on target they will be different than on host
+set(CMAKE_SKIP_RPATH TRUE CACHE BOOL "If set, runtime paths are not added when using shared libraries.")
+
+#######################################################################
+# Search strategy
+#######################################################################
+# Allow search for programs on host, this will allow programs such as
+# make, git and patch to be found and used.
+# Only look for headers, libs and packages in the search paths provided
+# by CMAKE_FIND_ROOT_PATH
+set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
+set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
+set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
+set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
diff --git a/ros2/qnx_patches/ament_cmake.patch b/ros2/qnx_patches/ament_cmake.patch
new file mode 100644
index 0000000..1ab7426
--- /dev/null
+++ b/ros2/qnx_patches/ament_cmake.patch
@@ -0,0 +1,15 @@
+diff --git a/ament_cmake_core/cmake/core/python.cmake b/ament_cmake_core/cmake/core/python.cmake
+index 5820821..c992ece 100644
+--- a/ament_cmake_core/cmake/core/python.cmake
++++ b/ament_cmake_core/cmake/core/python.cmake
+@@ -18,5 +18,9 @@
+ #   find_package(Python3 3.8 REQUIRED)
+ #   find_package(ament_cmake REQUIRED)
+ if(NOT TARGET Python3::Interpreter)
+-  find_package(Python3 REQUIRED COMPONENTS Interpreter)
++  if(QNX)
++    find_package(Python3 ${PYTHON_VERSION_QNX} REQUIRED COMPONENTS Interpreter)
++  else()
++    find_package(Python3 REQUIRED COMPONENTS Interpreter)
++  endif()
+ endif()
diff --git a/ros2/qnx_patches/common_interfaces.patch b/ros2/qnx_patches/common_interfaces.patch
new file mode 100644
index 0000000..7b0406d
--- /dev/null
+++ b/ros2/qnx_patches/common_interfaces.patch
@@ -0,0 +1,13 @@
+diff --git a/std_srvs/package.xml b/std_srvs/package.xml
+index 8417c88..cab81cf 100644
+--- a/std_srvs/package.xml
++++ b/std_srvs/package.xml
+@@ -18,6 +18,8 @@
+ 
+   <buildtool_depend>rosidl_default_generators</buildtool_depend>
+ 
++  <depend>numpy_vendor</depend>
++
+   <exec_depend>rosidl_default_runtime</exec_depend>
+ 
+   <test_depend>ament_lint_common</test_depend>
diff --git a/ros2/qnx_patches/cyclonedds.patch b/ros2/qnx_patches/cyclonedds.patch
new file mode 100644
index 0000000..eecd632
--- /dev/null
+++ b/ros2/qnx_patches/cyclonedds.patch
@@ -0,0 +1,59 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index f046b631..335c4619 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -43,6 +43,10 @@ set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake/Modules")
+ option(BUILD_IDLC "Build IDL preprocessor" ${not_crosscompiling})
+ option(BUILD_DDSPERF "Build ddsperf tool" ${not_crosscompiling})
+ 
++if(QNX)
++  set(BUILD_IDLC NO)
++endif()
++
+ set(CMAKE_C_STANDARD 99)
+ if(CMAKE_SYSTEM_NAME STREQUAL "VxWorks")
+   add_definitions(-std=c99)
+diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
+index 8c0049c7..17dd3910 100644
+--- a/src/CMakeLists.txt
++++ b/src/CMakeLists.txt
+@@ -48,6 +48,10 @@ else()
+   set(ENABLE_SHM "AUTO" CACHE STRING "Enable shared memory support")
+ endif()
+ 
++if(QNX)
++  set(ENABLE_SHM OFF)
++endif()
++
+ set_property(CACHE ENABLE_SHM PROPERTY STRINGS ON OFF AUTO)
+ if(ENABLE_SHM)
+   if(NOT ENABLE_SHM STREQUAL "AUTO")
+diff --git a/src/ddsrt/include/dds/features.h.in b/src/ddsrt/include/dds/features.h.in
+index cf527db3..2d1601c3 100644
+--- a/src/ddsrt/include/dds/features.h.in
++++ b/src/ddsrt/include/dds/features.h.in
+@@ -24,8 +24,10 @@
+ /* Whether or not support for network partitions is included */
+ #cmakedefine DDS_HAS_NETWORK_PARTITIONS 1
+ 
++#ifndef __QNXNTO__
+ /* Whether or not support for source-specific multicast is included */
+ #cmakedefine DDS_HAS_SSM 1
++#endif
+ 
+ /* Whether or not features dependent on OpenSSL are included */
+ #cmakedefine DDS_HAS_SSL 1
+diff --git a/src/ddsrt/src/ifaddrs/posix/ifaddrs.c b/src/ddsrt/src/ifaddrs/posix/ifaddrs.c
+index 217d1f98..38f68213 100644
+--- a/src/ddsrt/src/ifaddrs/posix/ifaddrs.c
++++ b/src/ddsrt/src/ifaddrs/posix/ifaddrs.c
+@@ -104,7 +104,7 @@ static enum ddsrt_iftype guess_iftype (const struct ifaddrs *sys_ifa)
+     switch (IFM_TYPE (ifmr.ifm_active))
+     {
+       case IFM_ETHER:
+-#if !defined __FreeBSD__
++#if !defined __FreeBSD__ && !defined __QNXNTO__
+       case IFM_TOKEN:
+       case IFM_FDDI:
+ #endif
+ 
\ No newline at end of file
diff --git a/ros2/qnx_patches/demos.patch b/ros2/qnx_patches/demos.patch
new file mode 100644
index 0000000..294f1ed
--- /dev/null
+++ b/ros2/qnx_patches/demos.patch
@@ -0,0 +1,38 @@
+diff --git a/image_tools/package.xml b/image_tools/package.xml
+index 45ed648..dcfff08 100644
+--- a/image_tools/package.xml
++++ b/image_tools/package.xml
+@@ -14,13 +14,13 @@
+   <author email="mabel@openrobotics.org">Mabel Zhang</author>
+ 
+   <buildtool_depend>ament_cmake</buildtool_depend>
+-  <build_depend>libopencv-dev</build_depend>
++  <build_depend>opencv_vendor</build_depend>
+   <build_depend>rclcpp</build_depend>
+   <build_depend>rclcpp_components</build_depend>
+   <build_depend>sensor_msgs</build_depend>
+   <build_depend>std_msgs</build_depend>
+ 
+-  <exec_depend>libopencv-dev</exec_depend>
++  <exec_depend>opencv_vendor</exec_depend>
+   <exec_depend>rclcpp</exec_depend>
+   <exec_depend>rclcpp_components</exec_depend>
+   <exec_depend>sensor_msgs</exec_depend>
+diff --git a/intra_process_demo/package.xml b/intra_process_demo/package.xml
+index c078448..dbdae86 100644
+--- a/intra_process_demo/package.xml
++++ b/intra_process_demo/package.xml
+@@ -15,12 +15,11 @@
+ 
+   <buildtool_depend>ament_cmake</buildtool_depend>
+ 
+-  <build_depend>libopencv-dev</build_depend>
++  <build_depend>opencv_vendor</build_depend>
+   <build_depend>rclcpp</build_depend>
+   <build_depend>sensor_msgs</build_depend>
+   <build_depend>std_msgs</build_depend>
+ 
+-  <exec_depend>libopencv-dev</exec_depend>
+   <exec_depend>rclcpp</exec_depend>
+   <exec_depend>sensor_msgs</exec_depend>
+ 
diff --git a/ros2/qnx_patches/fastcdr.patch b/ros2/qnx_patches/fastcdr.patch
new file mode 100644
index 0000000..d1a5832
--- /dev/null
+++ b/ros2/qnx_patches/fastcdr.patch
@@ -0,0 +1,385 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index 271c0db..aa8621d 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -189,7 +189,7 @@ endif()
+ ###############################################################################
+ # Testing
+ ###############################################################################
+-if(EPROSIMA_BUILD_TESTS AND IS_TOP_LEVEL AND NOT EPROSIMA_INSTALLER)
++if(QNX OR (EPROSIMA_BUILD_TESTS AND IS_TOP_LEVEL AND NOT EPROSIMA_INSTALLER))
+     enable_testing()
+     include(CTest)
+ 
+diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
+index 03b63e7..e6d1dd0 100644
+--- a/test/CMakeLists.txt
++++ b/test/CMakeLists.txt
+@@ -23,3 +23,7 @@ add_executable(UnitTests ${UNITTESTS_SOURCE})
+ set_common_compile_options(UnitTests)
+ target_link_libraries(UnitTests fastcdr GTest::gtest_main)
+ add_gtest(UnitTests SOURCES ${UNITTESTS_SOURCE})
++
++if(QNX)
++    install(TARGETS UnitTests DESTINATION test/fastcdr)
++endif()
+diff --git a/test/ResizeTest.cpp b/test/ResizeTest.cpp
+index 10e8c1c..c6e08c2 100644
+--- a/test/ResizeTest.cpp
++++ b/test/ResizeTest.cpp
+@@ -31,9 +31,17 @@ static const uint8_t octet_t = 32;
+ static const char char_t =  'Z';
+ static const wchar_t wchar =  'Z';
+ static const int8_t int8 = 64;
++#ifdef __QNX__
++static const uint16_t ushort_t_QNX = 65500;
++#else
+ static const uint16_t ushort_t = 65500;
++#endif
+ static const int16_t short_t = -32700;
++#ifdef __QNX__
++static const uint32_t ulong_t_QNX = 4294967200;
++#else
+ static const uint32_t ulong_t = 4294967200;
++#endif
+ static const int32_t long_t = -2147483600;
+ static const uint64_t ulonglong_t = 18446744073709551600u;
+ static const int64_t longlong_t = -9223372036800;
+@@ -328,7 +336,11 @@ TEST(CDRResizeTests, UnsignedShort)
+ 
+     EXPECT_NO_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser << ushort_t_QNX;
++#else
+         cdr_ser << ushort_t;
++#endif
+     });
+ 
+     // Deserialization.
+@@ -341,7 +353,11 @@ TEST(CDRResizeTests, UnsignedShort)
+         cdr_des >> ushort_value;
+     });
+ 
++#ifdef __QNX__
++    EXPECT_EQ(ushort_value, ushort_t_QNX);
++#else
+     EXPECT_EQ(ushort_value, ushort_t);
++#endif
+ }
+ 
+ TEST(CDRResizeTests, Short)
+@@ -376,7 +392,11 @@ TEST(CDRResizeTests, UnsignedLong)
+ 
+     EXPECT_NO_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser << ulong_t_QNX;
++#else
+         cdr_ser << ulong_t;
++#endif
+     });
+ 
+     // Deserialization.
+@@ -389,7 +409,11 @@ TEST(CDRResizeTests, UnsignedLong)
+         cdr_des >> ulong_value;
+     });
+ 
++#ifdef __QNX__
++    EXPECT_EQ(ulong_value, ulong_t_QNX);
++#else
+     EXPECT_EQ(ulong_value, ulong_t);
++#endif
+ }
+ 
+ TEST(CDRResizeTests, Long)
+@@ -2276,7 +2300,11 @@ TEST(CDRResizeTests, Complete)
+ 
+     EXPECT_NO_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser << octet_t << char_t << int8 << ushort_t_QNX << short_t << ulong_t_QNX << long_t << ulonglong_t << longlong_t <<
++#else
+         cdr_ser << octet_t << char_t << int8 << ushort_t << short_t << ulong_t << long_t << ulonglong_t << longlong_t <<
++#endif
+             float_tt << double_tt << ldouble_tt << bool_t << string_t;
+         cdr_ser << octet_array_t << char_array_t << int8_array_t << ushort_array_t << short_array_t << ulong_array_t <<
+             long_array_t << ulonglong_array_t << longlong_array_t << float_array_t << double_array_t << ldouble_array_t << bool_array_t;
+@@ -2429,9 +2457,17 @@ TEST(CDRResizeTests, Complete)
+     EXPECT_EQ(char_value, char_t);
+     EXPECT_EQ(wchar_value, wchar);
+     EXPECT_EQ(int8_value, int8);
++#ifdef __QNX__
++    EXPECT_EQ(ushort_value, ushort_t_QNX);
++#else
+     EXPECT_EQ(ushort_value, ushort_t);
++#endif
+     EXPECT_EQ(short_value, short_t);
++#ifdef __QNX__
++    EXPECT_EQ(ulong_value, ulong_t_QNX);
++#else
+     EXPECT_EQ(ulong_value, ulong_t);
++#endif
+     EXPECT_EQ(long_value, long_t);
+     EXPECT_EQ(ulonglong_value, ulonglong_t);
+     EXPECT_EQ(longlong_value, longlong_t);
+@@ -2646,7 +2682,11 @@ TEST(FastCDRResizeTests, UnsignedShort)
+ 
+     EXPECT_NO_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser << ushort_t_QNX;
++#else
+         cdr_ser << ushort_t;
++#endif
+     });
+ 
+     // Deserialization.
+@@ -2659,7 +2699,11 @@ TEST(FastCDRResizeTests, UnsignedShort)
+         cdr_des >> ushort_value;
+     });
+ 
++#ifdef __QNX__
++    EXPECT_EQ(ushort_value, ushort_t_QNX);
++#else
+     EXPECT_EQ(ushort_value, ushort_t);
++#endif
+ }
+ 
+ TEST(FastCDRResizeTests, Short)
+@@ -2694,7 +2738,11 @@ TEST(FastCDRResizeTests, UnsignedLong)
+ 
+     EXPECT_NO_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser << ulong_t_QNX;
++#else
+         cdr_ser << ulong_t;
++#endif
+     });
+ 
+     // Deserialization.
+@@ -2707,7 +2755,11 @@ TEST(FastCDRResizeTests, UnsignedLong)
+         cdr_des >> ulong_value;
+     });
+ 
++#ifdef __QNX__
++    EXPECT_EQ(ulong_value, ulong_t_QNX);
++#else
+     EXPECT_EQ(ulong_value, ulong_t);
++#endif
+ }
+ 
+ TEST(FastCDRResizeTests, Long)
+@@ -4595,7 +4647,11 @@ TEST(FastCDRResizeTests, Complete)
+ 
+     EXPECT_NO_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser << octet_t << char_t << int8 << ushort_t_QNX << short_t << ulong_t_QNX << long_t << ulonglong_t << longlong_t <<
++#else
+         cdr_ser << octet_t << char_t << int8 << ushort_t << short_t << ulong_t << long_t << ulonglong_t << longlong_t <<
++#endif
+             float_tt << double_tt << ldouble_tt << bool_t << string_t;
+         cdr_ser << octet_array_t << char_array_t << int8_array_t << ushort_array_t << short_array_t << ulong_array_t <<
+             long_array_t << ulonglong_array_t << longlong_array_t << float_array_t << double_array_t << ldouble_array_t << bool_array_t;
+@@ -4747,9 +4803,17 @@ TEST(FastCDRResizeTests, Complete)
+     EXPECT_EQ(char_value, char_t);
+     EXPECT_EQ(wchar_value, wchar);
+     EXPECT_EQ(int8_value, int8);
++#ifdef __QNX__
++    EXPECT_EQ(ushort_value, ushort_t_QNX);
++#else
+     EXPECT_EQ(ushort_value, ushort_t);
++#endif
+     EXPECT_EQ(short_value, short_t);
++#ifdef __QNX__
++    EXPECT_EQ(ulong_value, ulong_t_QNX);
++#else
+     EXPECT_EQ(ulong_value, ulong_t);
++#endif
+     EXPECT_EQ(long_value, long_t);
+     EXPECT_EQ(ulonglong_value, ulonglong_t);
+     EXPECT_EQ(longlong_value, longlong_t);
+diff --git a/test/SimpleTest.cpp b/test/SimpleTest.cpp
+index 48bdd95..02fbd36 100644
+--- a/test/SimpleTest.cpp
++++ b/test/SimpleTest.cpp
+@@ -37,9 +37,17 @@ static const uint8_t octet_t = 32;
+ static const char char_t =  'Z';
+ static const wchar_t wchar = 'Z';
+ static const int8_t int8 = 64;
++#ifdef __QNX__
++static const uint16_t ushort_t_QNX = 65500;
++#else
+ static const uint16_t ushort_t = 65500;
++#endif
+ static const int16_t short_t = -32700;
++#ifdef __QNX__
++static const uint32_t ulong_t_QNX = 4294967200;
++#else
+ static const uint32_t ulong_t = 4294967200;
++#endif
+ static const int32_t long_t = -2147483600;
+ static const uint64_t ulonglong_t = 18446744073709551600u;
+ static const int64_t longlong_t = -9223372036800;
+@@ -472,8 +480,13 @@ TEST(CDRTests, Int8)
+ 
+ TEST(CDRTests, UnsignedShort)
+ {
++#ifdef __QNX__
++    check_good_case(ushort_t_QNX);
++    check_no_space(ushort_t_QNX);
++#else
+     check_good_case(ushort_t);
+     check_no_space(ushort_t);
++#endif
+ }
+ 
+ TEST(CDRTests, Short)
+@@ -484,8 +497,13 @@ TEST(CDRTests, Short)
+ 
+ TEST(CDRTests, UnsignedLong)
+ {
++#ifdef __QNX__
++    check_good_case(ulong_t_QNX);
++    check_no_space(ulong_t_QNX);
++#else
+     check_good_case(ulong_t);
+     check_no_space(ulong_t);
++#endif
+ }
+ 
+ TEST(CDRTests, Long)
+@@ -1853,7 +1871,11 @@ TEST(CDRTests, Complete)
+ 
+     EXPECT_NO_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser << octet_t << char_t << int8 << ushort_t_QNX << short_t << ulong_t_QNX << long_t << ulonglong_t << longlong_t <<
++#else
+         cdr_ser << octet_t << char_t << int8 << ushort_t << short_t << ulong_t << long_t << ulonglong_t << longlong_t <<
++#endif
+             float_tt << double_tt << ldouble_tt << bool_t << string_t;
+         cdr_ser << octet_array_t << char_array_t << int8_array_t << ushort_array_t << short_array_t << ulong_array_t <<
+             long_array_t << ulonglong_array_t << longlong_array_t << float_array_t << double_array_t << ldouble_array_t << bool_array_t;
+@@ -2017,9 +2039,17 @@ TEST(CDRTests, Complete)
+     EXPECT_EQ(char_value, char_t);
+     EXPECT_EQ(wchar_value, wchar);
+     EXPECT_EQ(int8_value, int8);
++#ifdef __QNX__
++    EXPECT_EQ(ushort_value, ushort_t_QNX);
++#else
+     EXPECT_EQ(ushort_value, ushort_t);
++#endif
+     EXPECT_EQ(short_value, short_t);
++#ifdef __QNX__
++    EXPECT_EQ(ulong_value, ulong_t_QNX);
++#else
+     EXPECT_EQ(ulong_value, ulong_t);
++#endif
+     EXPECT_EQ(long_value, long_t);
+     EXPECT_EQ(ulonglong_value, ulonglong_t);
+     EXPECT_EQ(longlong_value, longlong_t);
+@@ -2253,7 +2283,11 @@ TEST(FastCDRTests, UnsignedShort)
+ 
+     EXPECT_NO_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser << ushort_t_QNX;
++#else
+         cdr_ser << ushort_t;
++#endif
+     });
+ 
+     // Deserialization.
+@@ -2266,7 +2300,11 @@ TEST(FastCDRTests, UnsignedShort)
+         cdr_des >> ushort_value;
+     });
+ 
++#ifdef __QNX__
++    EXPECT_EQ(ushort_value, ushort_t_QNX);
++#else
+     EXPECT_EQ(ushort_value, ushort_t);
++#endif
+ 
+     // Check bad case without space
+     char buffer_bad[1];
+@@ -2277,7 +2315,11 @@ TEST(FastCDRTests, UnsignedShort)
+ 
+     EXPECT_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser_bad << ushort_t_QNX;
++#else
+         cdr_ser_bad << ushort_t;
++#endif
+     },
+         NotEnoughMemoryException);
+ 
+@@ -2351,7 +2393,11 @@ TEST(FastCDRTests, UnsignedLong)
+ 
+     EXPECT_NO_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser << ulong_t_QNX;
++#else
+         cdr_ser << ulong_t;
++#endif
+     });
+ 
+     // Deserialization.
+@@ -2364,7 +2410,11 @@ TEST(FastCDRTests, UnsignedLong)
+         cdr_des >> ulong_value;
+     });
+ 
++#ifdef __QNX__
++    EXPECT_EQ(ulong_value, ulong_t_QNX);
++#else
+     EXPECT_EQ(ulong_value, ulong_t);
++#endif
+ 
+     // Check bad case without space
+     char buffer_bad[1];
+@@ -2375,7 +2425,11 @@ TEST(FastCDRTests, UnsignedLong)
+ 
+     EXPECT_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser_bad << ulong_t_QNX;
++#else
+         cdr_ser_bad << ulong_t;
++#endif
+     },
+         NotEnoughMemoryException);
+ 
+@@ -6252,7 +6306,11 @@ TEST(FastCDRTests, Complete)
+ 
+     EXPECT_NO_THROW(
+     {
++#ifdef __QNX__
++        cdr_ser << octet_t << char_t << int8 << ushort_t_QNX << short_t << ulong_t_QNX << long_t << ulonglong_t << longlong_t <<
++#else
+         cdr_ser << octet_t << char_t << int8 << ushort_t << short_t << ulong_t << long_t << ulonglong_t << longlong_t <<
++#endif
+             float_tt << double_tt << ldouble_tt << bool_t << string_t;
+         cdr_ser << octet_array_t << char_array_t << int8_array_t << ushort_array_t << short_array_t << ulong_array_t <<
+             long_array_t << ulonglong_array_t << longlong_array_t << float_array_t << double_array_t << ldouble_array_t << bool_array_t;
+@@ -6412,9 +6470,17 @@ TEST(FastCDRTests, Complete)
+     EXPECT_EQ(char_value, char_t);
+     EXPECT_EQ(wchar_value, wchar);
+     EXPECT_EQ(int8_value, int8);
++#ifdef __QNX__
++    EXPECT_EQ(ushort_value, ushort_t_QNX);
++#else
+     EXPECT_EQ(ushort_value, ushort_t);
++#endif
+     EXPECT_EQ(short_value, short_t);
++#ifdef __QNX__
++    EXPECT_EQ(ulong_value, ulong_t_QNX);
++#else
+     EXPECT_EQ(ulong_value, ulong_t);
++#endif
+     EXPECT_EQ(long_value, long_t);
+     EXPECT_EQ(ulonglong_value, ulonglong_t);
+     EXPECT_EQ(longlong_value, longlong_t);
diff --git a/ros2/qnx_patches/fastrtps.patch b/ros2/qnx_patches/fastrtps.patch
new file mode 100644
index 0000000..5661545
--- /dev/null
+++ b/ros2/qnx_patches/fastrtps.patch
@@ -0,0 +1,98 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index e4e8c41aa..c8c146939 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -18,6 +18,8 @@
+ cmake_minimum_required(VERSION 3.13)
+ cmake_policy(VERSION 3.13...3.16)
+ 
++set(CMAKE_CXX_STANDARD 14)
++
+ # Set CMAKE_BUILD_TYPE to Release by default.
+ if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
+     message(STATUS "Setting build type to 'Release' as none was specified.")
+@@ -97,7 +99,18 @@ endif()
+ ###############################################################################
+ include(${PROJECT_SOURCE_DIR}/cmake/common/check_configuration.cmake)
+ 
+-set(FORCE_CXX "11" CACHE STRING "C++ standard fulfillment selection")
++if(QNX)
++    set(FORCE_CXX "14" CACHE STRING "C++ standard fulfillment selection")
++    add_compile_definitions(ASIO_HAS_STD_STRING_VIEW=1)
++    if ($ENV{QNX_SDP_VERSION} STREQUAL "qnx710")
++        link_libraries(socket)
++    else()
++        link_libraries(socket fsnotify)
++    endif()
++else()
++    set(FORCE_CXX "11" CACHE STRING "C++ standard fulfillment selection")
++endif()
++
+ check_stdcxx()
+ 
+ check_compile_feature()
+diff --git a/cmake/modules/FindThreads.cmake b/cmake/modules/FindThreads.cmake
+index 80dfd0c19..8a1f2197b 100644
+--- a/cmake/modules/FindThreads.cmake
++++ b/cmake/modules/FindThreads.cmake
+@@ -104,7 +104,9 @@ macro(_check_pthreads_flag)
+ 
+     if(THREADS_HAVE_PTHREAD_ARG)
+       set(Threads_FOUND TRUE)
+-      set(CMAKE_THREAD_LIBS_INIT "-pthread")
++      if(NOT QNX)
++        set(CMAKE_THREAD_LIBS_INIT "-pthread")
++      endif()
+     endif()
+   endif()
+ endmacro()
+@@ -207,7 +209,7 @@ FIND_PACKAGE_HANDLE_STANDARD_ARGS(Threads DEFAULT_MSG Threads_FOUND)
+ if(THREADS_FOUND AND NOT TARGET Threads::Threads)
+   add_library(Threads::Threads INTERFACE IMPORTED)
+ 
+-  if(THREADS_HAVE_PTHREAD_ARG)
++  if(THREADS_HAVE_PTHREAD_ARG AND NOT QNX)
+     set_property(TARGET Threads::Threads
+                  PROPERTY INTERFACE_COMPILE_OPTIONS "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler -pthread>"
+                                                     "$<$<NOT:$<COMPILE_LANGUAGE:CUDA>>:-pthread>")
+diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
+index 531770f2c..18b3b10a0 100644
+--- a/test/CMakeLists.txt
++++ b/test/CMakeLists.txt
+@@ -25,6 +25,10 @@ endif()
+ file(TO_CMAKE_PATH "${PROJECT_SOURCE_DIR}/valgrind.supp" MEMORYCHECK_SUPPRESSIONS_FILE_TMP)
+ set(MEMORYCHECK_SUPPRESSIONS_FILE ${MEMORYCHECK_SUPPRESSIONS_FILE_TMP} CACHE FILEPATH "Valgrind suppresions file")
+ 
++if(QNX AND $ENV{QNX_SDP_VERSION} STREQUAL "qnx800")
++    set(EPROSIMA_BUILD_TESTS ON)
++endif()
++
+ ###############################################################################
+ # Testing
+ ###############################################################################
+@@ -68,3 +72,8 @@ if(SYSTEM_TESTS)
+     add_subdirectory(system/tools/fastdds)
+     add_subdirectory(system/tools/fds)
+ endif()
++
++if(QNX)
++    install(DIRECTORY ${CMAKE_BINARY_DIR}/test/ DESTINATION test/fastrtps)
++    install(DIRECTORY ${CMAKE_SOURCE_DIR}/test/certs DESTINATION test/fastrtps)
++endif()
+diff --git a/test/profiling/allocations/CMakeLists.txt b/test/profiling/allocations/CMakeLists.txt
+index 51143962f..30046dd1f 100644
+--- a/test/profiling/allocations/CMakeLists.txt
++++ b/test/profiling/allocations/CMakeLists.txt
+@@ -18,7 +18,11 @@ project(fastrtps_allocation_test)
+ 
+ # Default to C++11
+ if(NOT CMAKE_CXX_STANDARD)
+-  set(CMAKE_CXX_STANDARD 11)
++  if(QNX)
++    set(CMAKE_CXX_STANDARD 11)
++  else()
++    set(CMAKE_CXX_STANDARD 14)
++  endif()
+ endif()
+ 
+ if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
diff --git a/ros2/qnx_patches/foonathan_memory_vendor.patch b/ros2/qnx_patches/foonathan_memory_vendor.patch
new file mode 100644
index 0000000..8424fcf
--- /dev/null
+++ b/ros2/qnx_patches/foonathan_memory_vendor.patch
@@ -0,0 +1,1108 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index dffac71..4e500ae 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -1,127 +1,58 @@
+ cmake_minimum_required(VERSION 3.5)
+-project(foonathan_memory_vendor VERSION "1.2.0")
+ 
+-find_package(foonathan_memory QUIET)
++project(foonathan_memory_vendor)
+ 
+-if(NOT foonathan_memory_FOUND)
+-  ###############################################################################
+-  # Default shared libraries
+-  ###############################################################################
+-  # Global flag to cause add_library() to create shared libraries if on.
+-  # If set to true, this will cause all libraries to be built shared
+-  # unless the library was explicitly added as a static library.
+-  option(BUILD_SHARED_LIBS "Create shared libraries by default" ON)
++find_package(ament_cmake REQUIRED)
+ 
+-  # Option to build memory examples
+-  option(BUILD_MEMORY_EXAMPLES "Build memory examples" OFF)
+-  # Option to build memory tests
+-  option(BUILD_MEMORY_TESTS "Build memory tests" OFF)
+-  # Option to build memory tools
+-  option(BUILD_MEMORY_TOOLS "Build memory tools" ON)
++set(PACKAGE_VERSION "1.0.0")
+ 
+-  # Validate option dependency
+-  if((NOT BUILD_MEMORY_TOOLS) AND (BUILD_MEMORY_EXAMPLES OR BUILD_MEMORY_TESTS))
+-    message(FATAL_ERROR
+-      "BUILD_MEMORY_TOOLS is required when BUILD_MEMORY_EXAMPLES"
+-      " or BUILD_MEMORY_TESTS are set")
+-  endif()
++macro(build_foonathan_memory)
+ 
+-  if(BUILD_SHARED_LIBS)
+-    # Library will be statically created with PIC code
+-    list(APPEND extra_cmake_args -DCMAKE_POSITION_INDEPENDENT_CODE=ON)
+-  endif()
++  set(extra_cmake_args)
+ 
+   if(DEFINED CMAKE_BUILD_TYPE)
+     list(APPEND extra_cmake_args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
+   endif()
+ 
++  list( APPEND extra_cmake_args  -DFOONATHAN_MEMORY_BUILD_EXAMPLES=OFF )
++  list( APPEND extra_cmake_args  -DFOONATHAN_MEMORY_BUILD_TESTS=OFF )
++  list( APPEND extra_cmake_args  -DBUILD_SHARED_LIBS=ON )
++  list( APPEND extra_cmake_args  -DCMAKE_POSITION_INDEPENDENT_CODE=ON )
++  list( APPEND extra_cmake_args  -DFOONATHAN_MEMORY_CONTAINER_NODE_SIZES_IMPL=${CMAKE_CURRENT_SOURCE_DIR}/nto/${CPUVARDIR}/include/container_node_sizes_impl.hpp )
++
++  list( APPEND extra_cmake_args  -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_PREFIX}/include )
++  list( APPEND extra_cmake_args  -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_PREFIX}/bin )
++  list( APPEND extra_cmake_args  -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_PREFIX}/lib )
++  list( APPEND extra_cmake_args  -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_PREFIX}/share )
++
++  list( APPEND extra_cmake_args  -DCMAKE_CXX_COMPILE_FEATURES="cxx_constexpr" )
++
+   if(DEFINED CMAKE_TOOLCHAIN_FILE)
+     list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
+-    if(ANDROID)
+-      if(DEFINED ANDROID_ABI)
+-        list(APPEND extra_cmake_args "-DANDROID_ABI=${ANDROID_ABI}")
+-      endif()
+-      if(DEFINED ANDROID_CPP_FEATURES)
+-        list(APPEND extra_cmake_args "-DANDROID_CPP_FEATURES=${ANDROID_CPP_FEATURES}")
+-      endif()
+-      if(DEFINED ANDROID_FUNCTION_LEVEL_LINKING)
+-        list(APPEND extra_cmake_args
+-          "-DANDROID_FUNCTION_LEVEL_LINKING=${ANDROID_FUNCTION_LEVEL_LINKING}")
+-      endif()
+-      if(DEFINED ANDROID_NATIVE_API_LEVEL)
+-        list(APPEND extra_cmake_args "-DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}")
+-      endif()
+-      if(DEFINED ANDROID_NDK)
+-        list(APPEND extra_cmake_args "-DANDROID_NDK=${ANDROID_NDK}")
+-      endif()
+-      if(DEFINED ANDROID_STL)
+-        list(APPEND extra_cmake_args "-DANDROID_STL=${ANDROID_STL}")
+-      endif()
+-      if(DEFINED ANDROID_TOOLCHAIN_NAME)
+-        list(APPEND extra_cmake_args "-DANDROID_TOOLCHAIN_NAME=${ANDROID_TOOLCHAIN_NAME}")
+-      endif()
+-    endif()
+   endif()
+-  include(ExternalProject)
+ 
+-  if(INSTALLER_PLATFORM)
+-    set(PATCH_COMMAND_STR PATCH_COMMAND
+-      git apply ${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt.patch &&
+-      sed -i -e "s/INSTALLER_PLATFORM/${INSTALLER_PLATFORM}/g" CMakeLists.txt)
++  if(QNX)
++    list(APPEND extra_cmake_args "-DFOONATHAN_MEMORY_BUILD_TESTS=ON")
+   endif()
+ 
+-  externalproject_add(foo_mem-ext
+-  GIT_REPOSITORY https://github.com/foonathan/memory.git
+-  GIT_TAG v0.7-1
+-  TIMEOUT 600
+-  # Avoid the update (git pull) and so the recompilation of foonathan_memory library each time.
+-  UPDATE_COMMAND ""
+-  CMAKE_ARGS
+-    -DFOONATHAN_MEMORY_BUILD_EXAMPLES=${BUILD_MEMORY_EXAMPLES}
+-    -DFOONATHAN_MEMORY_BUILD_TESTS=${BUILD_MEMORY_TESTS}
+-    -DFOONATHAN_MEMORY_BUILD_TOOLS=${BUILD_MEMORY_TOOLS}
+-    -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/foo_mem_ext_prj_install
+-    ${extra_cmake_args}
+-    -Wno-dev
+-    ${PATCH_COMMAND_STR}
++  include(ExternalProject)
++  ExternalProject_Add(foonathan_memory
++    GIT_REPOSITORY https://github.com/foonathan/memory.git
++    #GIT_TAG bf64e407a98d8482c98687bbfd3379585ec95586
++    GIT_TAG bab692e382cd58b30ff15af3664604bbc576eb78
++    TIMEOUT 600
++    PATCH_COMMAND git apply ${CMAKE_CURRENT_SOURCE_DIR}/qnx.patch
++    CMAKE_ARGS
++    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
++      ${extra_cmake_args}
++      -Wno-dev
+   )
+ 
+-  # The external project will install to the build folder, but we'll install that on make install.
+-  install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/foo_mem_ext_prj_install/
+-  DESTINATION ${CMAKE_INSTALL_PREFIX})
+-else()
+-  message(STATUS "Found foonathan_memory ${foonathan_memory_VERSION}")
+-endif()
+-
+-configure_file(foonathan_memory_vendorConfig.cmake.in
+-  "${PROJECT_BINARY_DIR}/foonathan_memory_vendorConfig.cmake" @ONLY)
+-
+-include(CMakePackageConfigHelpers)
+-write_basic_package_version_file(
+-  "${PROJECT_BINARY_DIR}/foonathan_memory_vendorConfig-version.cmake"
+-  COMPATIBILITY AnyNewerVersion)
++endmacro()
+ 
+-find_package(ament_cmake_test QUIET)
+-if(BUILD_TESTING)
+-  find_package(ament_cmake_copyright QUIET)
+-  find_package(ament_cmake_lint_cmake QUIET)
+-  find_package(ament_cmake_xmllint QUIET)
+-  if(ament_cmake_copyright_FOUND)
+-    ament_copyright()
+-  endif()
+-  if(ament_cmake_lint_cmake_FOUND)
+-    ament_lint_cmake()
+-  endif()
+-  if(ament_cmake_xmllint_FOUND)
+-    ament_xmllint()
+-  endif()
++find_package(foonathan_memory QUIET)
++if(NOT foonathan_memory_FOUND)
++  build_foonathan_memory()
+ endif()
+ 
+-install(FILES
+-  package.xml
+-  DESTINATION share/${PROJECT_NAME})
+-
+-install(FILES
+-  "${PROJECT_BINARY_DIR}/foonathan_memory_vendorConfig.cmake"
+-  "${PROJECT_BINARY_DIR}/foonathan_memory_vendorConfig-version.cmake"
+-  DESTINATION share/${PROJECT_NAME}/cmake)
++ament_package()
+diff --git a/nto/aarch64le/include/container_node_sizes_impl.hpp b/nto/aarch64le/include/container_node_sizes_impl.hpp
+new file mode 100644
+index 0000000..d510640
+--- /dev/null
++++ b/nto/aarch64le/include/container_node_sizes_impl.hpp
+@@ -0,0 +1,448 @@
++// The following section was autogenerated by nodesize_dbg
++//=== BEGIN AUTOGENERATED SECTION ===//
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct forward_list_node_size;
++
++    template <>
++    struct forward_list_node_size<1>
++    : std::integral_constant<std::size_t, 15>
++    {};
++
++    template <>
++    struct forward_list_node_size<2>
++    : std::integral_constant<std::size_t, 14>
++    {};
++
++    template <>
++    struct forward_list_node_size<4>
++    : std::integral_constant<std::size_t, 12>
++    {};
++
++    template <>
++    struct forward_list_node_size<8>
++    : std::integral_constant<std::size_t, 8>
++    {};
++
++    template <>
++    struct forward_list_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct forward_list_node_size
++: std::integral_constant<std::size_t,
++       detail::forward_list_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct list_node_size;
++
++    template <>
++    struct list_node_size<1>
++    : std::integral_constant<std::size_t, 23>
++    {};
++
++    template <>
++    struct list_node_size<2>
++    : std::integral_constant<std::size_t, 22>
++    {};
++
++    template <>
++    struct list_node_size<4>
++    : std::integral_constant<std::size_t, 20>
++    {};
++
++    template <>
++    struct list_node_size<8>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct list_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct list_node_size
++: std::integral_constant<std::size_t,
++       detail::list_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct set_node_size;
++
++    template <>
++    struct set_node_size<1>
++    : std::integral_constant<std::size_t, 31>
++    {};
++
++    template <>
++    struct set_node_size<2>
++    : std::integral_constant<std::size_t, 30>
++    {};
++
++    template <>
++    struct set_node_size<4>
++    : std::integral_constant<std::size_t, 28>
++    {};
++
++    template <>
++    struct set_node_size<8>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct set_node_size<16>
++    : std::integral_constant<std::size_t, 32>
++    {};
++} // namespace detail
++
++template <typename T>
++struct set_node_size
++: std::integral_constant<std::size_t,
++       detail::set_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct multiset_node_size;
++
++    template <>
++    struct multiset_node_size<1>
++    : std::integral_constant<std::size_t, 31>
++    {};
++
++    template <>
++    struct multiset_node_size<2>
++    : std::integral_constant<std::size_t, 30>
++    {};
++
++    template <>
++    struct multiset_node_size<4>
++    : std::integral_constant<std::size_t, 28>
++    {};
++
++    template <>
++    struct multiset_node_size<8>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct multiset_node_size<16>
++    : std::integral_constant<std::size_t, 32>
++    {};
++} // namespace detail
++
++template <typename T>
++struct multiset_node_size
++: std::integral_constant<std::size_t,
++       detail::multiset_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct unordered_set_node_size;
++
++    template <>
++    struct unordered_set_node_size<1>
++    : std::integral_constant<std::size_t, 23>
++    {};
++
++    template <>
++    struct unordered_set_node_size<2>
++    : std::integral_constant<std::size_t, 22>
++    {};
++
++    template <>
++    struct unordered_set_node_size<4>
++    : std::integral_constant<std::size_t, 20>
++    {};
++
++    template <>
++    struct unordered_set_node_size<8>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_set_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct unordered_set_node_size
++: std::integral_constant<std::size_t,
++       detail::unordered_set_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct unordered_multiset_node_size;
++
++    template <>
++    struct unordered_multiset_node_size<1>
++    : std::integral_constant<std::size_t, 23>
++    {};
++
++    template <>
++    struct unordered_multiset_node_size<2>
++    : std::integral_constant<std::size_t, 22>
++    {};
++
++    template <>
++    struct unordered_multiset_node_size<4>
++    : std::integral_constant<std::size_t, 20>
++    {};
++
++    template <>
++    struct unordered_multiset_node_size<8>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_multiset_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct unordered_multiset_node_size
++: std::integral_constant<std::size_t,
++       detail::unordered_multiset_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct map_node_size;
++
++    template <>
++    struct map_node_size<1>
++    : std::integral_constant<std::size_t, 30>
++    {};
++
++    template <>
++    struct map_node_size<2>
++    : std::integral_constant<std::size_t, 28>
++    {};
++
++    template <>
++    struct map_node_size<4>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct map_node_size<8>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct map_node_size<16>
++    : std::integral_constant<std::size_t, 32>
++    {};
++} // namespace detail
++
++template <typename T>
++struct map_node_size
++: std::integral_constant<std::size_t,
++       detail::map_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct multimap_node_size;
++
++    template <>
++    struct multimap_node_size<1>
++    : std::integral_constant<std::size_t, 30>
++    {};
++
++    template <>
++    struct multimap_node_size<2>
++    : std::integral_constant<std::size_t, 28>
++    {};
++
++    template <>
++    struct multimap_node_size<4>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct multimap_node_size<8>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct multimap_node_size<16>
++    : std::integral_constant<std::size_t, 32>
++    {};
++} // namespace detail
++
++template <typename T>
++struct multimap_node_size
++: std::integral_constant<std::size_t,
++       detail::multimap_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct unordered_map_node_size;
++
++    template <>
++    struct unordered_map_node_size<1>
++    : std::integral_constant<std::size_t, 22>
++    {};
++
++    template <>
++    struct unordered_map_node_size<2>
++    : std::integral_constant<std::size_t, 20>
++    {};
++
++    template <>
++    struct unordered_map_node_size<4>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_map_node_size<8>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_map_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct unordered_map_node_size
++: std::integral_constant<std::size_t,
++       detail::unordered_map_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct unordered_multimap_node_size;
++
++    template <>
++    struct unordered_multimap_node_size<1>
++    : std::integral_constant<std::size_t, 22>
++    {};
++
++    template <>
++    struct unordered_multimap_node_size<2>
++    : std::integral_constant<std::size_t, 20>
++    {};
++
++    template <>
++    struct unordered_multimap_node_size<4>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_multimap_node_size<8>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_multimap_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct unordered_multimap_node_size
++: std::integral_constant<std::size_t,
++       detail::unordered_multimap_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct shared_ptr_stateless_node_size;
++
++    template <>
++    struct shared_ptr_stateless_node_size<1>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct shared_ptr_stateless_node_size<2>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct shared_ptr_stateless_node_size<4>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct shared_ptr_stateless_node_size<8>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct shared_ptr_stateless_node_size<16>
++    : std::integral_constant<std::size_t, 48>
++    {};
++} // namespace detail
++
++template <typename T>
++struct shared_ptr_stateless_node_size
++: std::integral_constant<std::size_t,
++       detail::shared_ptr_stateless_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct shared_ptr_stateful_node_size;
++
++    template <>
++    struct shared_ptr_stateful_node_size<1>
++    : std::integral_constant<std::size_t, 40>
++    {};
++
++    template <>
++    struct shared_ptr_stateful_node_size<2>
++    : std::integral_constant<std::size_t, 40>
++    {};
++
++    template <>
++    struct shared_ptr_stateful_node_size<4>
++    : std::integral_constant<std::size_t, 40>
++    {};
++
++    template <>
++    struct shared_ptr_stateful_node_size<8>
++    : std::integral_constant<std::size_t, 40>
++    {};
++
++    template <>
++    struct shared_ptr_stateful_node_size<16>
++    : std::integral_constant<std::size_t, 64>
++    {};
++} // namespace detail
++
++template <typename T>
++struct shared_ptr_stateful_node_size
++: std::integral_constant<std::size_t,
++       detail::shared_ptr_stateful_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++//=== END AUTOGENERATED SECTION ===//
+diff --git a/nto/x86_64/include/container_node_sizes_impl.hpp b/nto/x86_64/include/container_node_sizes_impl.hpp
+new file mode 100644
+index 0000000..d510640
+--- /dev/null
++++ b/nto/x86_64/include/container_node_sizes_impl.hpp
+@@ -0,0 +1,448 @@
++// The following section was autogenerated by nodesize_dbg
++//=== BEGIN AUTOGENERATED SECTION ===//
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct forward_list_node_size;
++
++    template <>
++    struct forward_list_node_size<1>
++    : std::integral_constant<std::size_t, 15>
++    {};
++
++    template <>
++    struct forward_list_node_size<2>
++    : std::integral_constant<std::size_t, 14>
++    {};
++
++    template <>
++    struct forward_list_node_size<4>
++    : std::integral_constant<std::size_t, 12>
++    {};
++
++    template <>
++    struct forward_list_node_size<8>
++    : std::integral_constant<std::size_t, 8>
++    {};
++
++    template <>
++    struct forward_list_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct forward_list_node_size
++: std::integral_constant<std::size_t,
++       detail::forward_list_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct list_node_size;
++
++    template <>
++    struct list_node_size<1>
++    : std::integral_constant<std::size_t, 23>
++    {};
++
++    template <>
++    struct list_node_size<2>
++    : std::integral_constant<std::size_t, 22>
++    {};
++
++    template <>
++    struct list_node_size<4>
++    : std::integral_constant<std::size_t, 20>
++    {};
++
++    template <>
++    struct list_node_size<8>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct list_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct list_node_size
++: std::integral_constant<std::size_t,
++       detail::list_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct set_node_size;
++
++    template <>
++    struct set_node_size<1>
++    : std::integral_constant<std::size_t, 31>
++    {};
++
++    template <>
++    struct set_node_size<2>
++    : std::integral_constant<std::size_t, 30>
++    {};
++
++    template <>
++    struct set_node_size<4>
++    : std::integral_constant<std::size_t, 28>
++    {};
++
++    template <>
++    struct set_node_size<8>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct set_node_size<16>
++    : std::integral_constant<std::size_t, 32>
++    {};
++} // namespace detail
++
++template <typename T>
++struct set_node_size
++: std::integral_constant<std::size_t,
++       detail::set_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct multiset_node_size;
++
++    template <>
++    struct multiset_node_size<1>
++    : std::integral_constant<std::size_t, 31>
++    {};
++
++    template <>
++    struct multiset_node_size<2>
++    : std::integral_constant<std::size_t, 30>
++    {};
++
++    template <>
++    struct multiset_node_size<4>
++    : std::integral_constant<std::size_t, 28>
++    {};
++
++    template <>
++    struct multiset_node_size<8>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct multiset_node_size<16>
++    : std::integral_constant<std::size_t, 32>
++    {};
++} // namespace detail
++
++template <typename T>
++struct multiset_node_size
++: std::integral_constant<std::size_t,
++       detail::multiset_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct unordered_set_node_size;
++
++    template <>
++    struct unordered_set_node_size<1>
++    : std::integral_constant<std::size_t, 23>
++    {};
++
++    template <>
++    struct unordered_set_node_size<2>
++    : std::integral_constant<std::size_t, 22>
++    {};
++
++    template <>
++    struct unordered_set_node_size<4>
++    : std::integral_constant<std::size_t, 20>
++    {};
++
++    template <>
++    struct unordered_set_node_size<8>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_set_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct unordered_set_node_size
++: std::integral_constant<std::size_t,
++       detail::unordered_set_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct unordered_multiset_node_size;
++
++    template <>
++    struct unordered_multiset_node_size<1>
++    : std::integral_constant<std::size_t, 23>
++    {};
++
++    template <>
++    struct unordered_multiset_node_size<2>
++    : std::integral_constant<std::size_t, 22>
++    {};
++
++    template <>
++    struct unordered_multiset_node_size<4>
++    : std::integral_constant<std::size_t, 20>
++    {};
++
++    template <>
++    struct unordered_multiset_node_size<8>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_multiset_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct unordered_multiset_node_size
++: std::integral_constant<std::size_t,
++       detail::unordered_multiset_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct map_node_size;
++
++    template <>
++    struct map_node_size<1>
++    : std::integral_constant<std::size_t, 30>
++    {};
++
++    template <>
++    struct map_node_size<2>
++    : std::integral_constant<std::size_t, 28>
++    {};
++
++    template <>
++    struct map_node_size<4>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct map_node_size<8>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct map_node_size<16>
++    : std::integral_constant<std::size_t, 32>
++    {};
++} // namespace detail
++
++template <typename T>
++struct map_node_size
++: std::integral_constant<std::size_t,
++       detail::map_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct multimap_node_size;
++
++    template <>
++    struct multimap_node_size<1>
++    : std::integral_constant<std::size_t, 30>
++    {};
++
++    template <>
++    struct multimap_node_size<2>
++    : std::integral_constant<std::size_t, 28>
++    {};
++
++    template <>
++    struct multimap_node_size<4>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct multimap_node_size<8>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct multimap_node_size<16>
++    : std::integral_constant<std::size_t, 32>
++    {};
++} // namespace detail
++
++template <typename T>
++struct multimap_node_size
++: std::integral_constant<std::size_t,
++       detail::multimap_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct unordered_map_node_size;
++
++    template <>
++    struct unordered_map_node_size<1>
++    : std::integral_constant<std::size_t, 22>
++    {};
++
++    template <>
++    struct unordered_map_node_size<2>
++    : std::integral_constant<std::size_t, 20>
++    {};
++
++    template <>
++    struct unordered_map_node_size<4>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_map_node_size<8>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_map_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct unordered_map_node_size
++: std::integral_constant<std::size_t,
++       detail::unordered_map_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct unordered_multimap_node_size;
++
++    template <>
++    struct unordered_multimap_node_size<1>
++    : std::integral_constant<std::size_t, 22>
++    {};
++
++    template <>
++    struct unordered_multimap_node_size<2>
++    : std::integral_constant<std::size_t, 20>
++    {};
++
++    template <>
++    struct unordered_multimap_node_size<4>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_multimap_node_size<8>
++    : std::integral_constant<std::size_t, 16>
++    {};
++
++    template <>
++    struct unordered_multimap_node_size<16>
++    : std::integral_constant<std::size_t, 16>
++    {};
++} // namespace detail
++
++template <typename T>
++struct unordered_multimap_node_size
++: std::integral_constant<std::size_t,
++       detail::unordered_multimap_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct shared_ptr_stateless_node_size;
++
++    template <>
++    struct shared_ptr_stateless_node_size<1>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct shared_ptr_stateless_node_size<2>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct shared_ptr_stateless_node_size<4>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct shared_ptr_stateless_node_size<8>
++    : std::integral_constant<std::size_t, 32>
++    {};
++
++    template <>
++    struct shared_ptr_stateless_node_size<16>
++    : std::integral_constant<std::size_t, 48>
++    {};
++} // namespace detail
++
++template <typename T>
++struct shared_ptr_stateless_node_size
++: std::integral_constant<std::size_t,
++       detail::shared_ptr_stateless_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++namespace detail
++{
++    template <std::size_t Alignment>
++    struct shared_ptr_stateful_node_size;
++
++    template <>
++    struct shared_ptr_stateful_node_size<1>
++    : std::integral_constant<std::size_t, 40>
++    {};
++
++    template <>
++    struct shared_ptr_stateful_node_size<2>
++    : std::integral_constant<std::size_t, 40>
++    {};
++
++    template <>
++    struct shared_ptr_stateful_node_size<4>
++    : std::integral_constant<std::size_t, 40>
++    {};
++
++    template <>
++    struct shared_ptr_stateful_node_size<8>
++    : std::integral_constant<std::size_t, 40>
++    {};
++
++    template <>
++    struct shared_ptr_stateful_node_size<16>
++    : std::integral_constant<std::size_t, 64>
++    {};
++} // namespace detail
++
++template <typename T>
++struct shared_ptr_stateful_node_size
++: std::integral_constant<std::size_t,
++       detail::shared_ptr_stateful_node_size<alignof(T)>::value + sizeof(T)>
++{};
++
++//=== END AUTOGENERATED SECTION ===//
+diff --git a/package.xml b/package.xml
+index f8c7fc9..e8ac3a1 100644
+--- a/package.xml
++++ b/package.xml
+@@ -11,7 +11,9 @@
+   <license>Apache License 2.0</license> <!-- The contents of this vendor package are Apache 2.0 -->
+   <license>zlib License</license> <!-- foonathan/memory is licensed under the zlib License (https://github.com/foonathan/memory/blob/main/LICENSE) -->
+   <buildtool_depend>cmake</buildtool_depend>
++  <buildtool_depend>ament_cmake_test</buildtool_depend>
+   <buildtool_depend>git</buildtool_depend>
++  <build_depend>ament_cmake</build_depend>
+ 
+   <buildtool_export_depend>cmake</buildtool_export_depend>
+ 
+diff --git a/qnx.patch b/qnx.patch
+new file mode 100644
+index 0000000..c10f3f4
+--- /dev/null
++++ b/qnx.patch
+@@ -0,0 +1,12 @@
++diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
++index 74dd5b7..7b12d03 100644
++--- a/test/CMakeLists.txt
+++++ b/test/CMakeLists.txt
++@@ -55,3 +55,7 @@ target_include_directories(foonathan_memory_test PRIVATE
++                             ${FOONATHAN_MEMORY_SOURCE_DIR}/include/foonathan/memory)
++ 
++ add_test(NAME test COMMAND foonathan_memory_test)
+++
+++if(QNX)
+++    install(TARGETS foonathan_memory_test DESTINATION test/foonathan_memory)
+++endif()
diff --git a/ros2/qnx_patches/geometry2.patch b/ros2/qnx_patches/geometry2.patch
new file mode 100644
index 0000000..7401185
--- /dev/null
+++ b/ros2/qnx_patches/geometry2.patch
@@ -0,0 +1,167 @@
+diff --git a/tf2_bullet/package.xml b/tf2_bullet/package.xml
+index 4c9099a0..d800528b 100644
+--- a/tf2_bullet/package.xml
++++ b/tf2_bullet/package.xml
+@@ -13,7 +13,7 @@
+ 
+   <buildtool_depend>ament_cmake</buildtool_depend>
+ 
+-  <build_depend>bullet</build_depend>
++  <build_depend>bullet3_vendor</build_depend>
+   <build_depend>geometry_msgs</build_depend>
+   <build_depend>tf2</build_depend>
+   <build_depend>tf2_ros</build_depend>
+diff --git a/tf2_eigen/CMakeLists.txt b/tf2_eigen/CMakeLists.txt
+index f24d831d..e40d52c3 100644
+--- a/tf2_eigen/CMakeLists.txt
++++ b/tf2_eigen/CMakeLists.txt
+@@ -15,7 +15,9 @@ find_package(tf2 REQUIRED)
+ find_package(tf2_ros REQUIRED)
+ 
+ # Work around broken find module in AlmaLinux/RHEL eigen3-devel from PowerTools repo
+-find_package(Eigen3 QUIET NO_MODULE)
++if(NOT QNX)
++  find_package(Eigen3 QUIET NO_MODULE)
++endif()
+ if(NOT Eigen3_FOUND)
+   find_package(Eigen3 REQUIRED)
+ endif()
+diff --git a/tf2_eigen_kdl/CMakeLists.txt b/tf2_eigen_kdl/CMakeLists.txt
+index 9bdfa1d1..44ef2c27 100644
+--- a/tf2_eigen_kdl/CMakeLists.txt
++++ b/tf2_eigen_kdl/CMakeLists.txt
+@@ -11,7 +11,9 @@ endif()
+ 
+ find_package(ament_cmake REQUIRED)
+ # Work around broken find module in AlmaLinux/RHEL eigen3-devel from PowerTools repo
+-find_package(Eigen3 QUIET NO_MODULE)
++if(NOT QNX)
++  find_package(Eigen3 QUIET NO_MODULE)
++endif()
+ if(NOT Eigen3_FOUND)
+   find_package(Eigen3 REQUIRED)
+ endif()
+diff --git a/tf2_geometry_msgs/CMakeLists.txt b/tf2_geometry_msgs/CMakeLists.txt
+index f8ca2367..c8ad6b49 100644
+--- a/tf2_geometry_msgs/CMakeLists.txt
++++ b/tf2_geometry_msgs/CMakeLists.txt
+@@ -16,7 +16,17 @@ if(WIN32 AND CMAKE_BUILD_TYPE STREQUAL "Debug")
+   # Force FindPython3 to use the debug interpretter where ROS 2 expects it
+   set(Python3_EXECUTABLE "${PYTHON_EXECUTABLE_DEBUG}")
+ endif()
+-find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
++
++if(QNX)
++  find_library(python3_LIBRARY NAMES python3)
++
++  include_directories(${PROJECT_NAME}
++    ${QNX_TARGET}/usr/include/python${PYTHON_VERSION_QNX}
++    ${QNX_TARGET}/usr/include/${CPUVARDIR}/python${PYTHON_VERSION_QNX}
++    ${QNX_TARGET}/${CPUVARDIR}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages/numpy/core/include)
++else()
++  find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
++endif()
+ 
+ find_package(geometry_msgs REQUIRED)
+ find_package(orocos_kdl_vendor REQUIRED)
+diff --git a/tf2_py/CMakeLists.txt b/tf2_py/CMakeLists.txt
+index c0e7b9a8..1ac1a9ae 100644
+--- a/tf2_py/CMakeLists.txt
++++ b/tf2_py/CMakeLists.txt
+@@ -27,7 +27,17 @@ if(WIN32 AND CMAKE_BUILD_TYPE STREQUAL "Debug")
+   # Force FindPython3 to use the debug interpretter where ROS 2 expects it
+   set(Python3_EXECUTABLE "${PYTHON_EXECUTABLE_DEBUG}")
+ endif()
+-find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
++
++if(QNX)
++  find_library(python3_LIBRARY NAMES python3)
++
++  include_directories(${PROJECT_NAME}
++    ${QNX_TARGET}/usr/include/python${PYTHON_VERSION_QNX}
++    ${QNX_TARGET}/usr/include/${CPUVARDIR}/python${PYTHON_VERSION_QNX}
++    ${QNX_TARGET}/${CPUVARDIR}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages/numpy/core/include)
++else()
++  find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
++endif()
+ 
+ find_package(ament_cmake REQUIRED)
+ find_package(ament_cmake_python REQUIRED)
+@@ -36,30 +46,55 @@ find_package(tf2 REQUIRED)
+ 
+ ament_python_install_package(${PROJECT_NAME})
+ 
+-python3_add_library(_tf2_py src/tf2_py.cpp)
+-
+-if(WIN32 AND CMAKE_BUILD_TYPE STREQUAL "Debug")
+-  # python3_add_library should really take care of this for us, but it doesn't
+-  set_property(TARGET _tf2_py PROPERTY SUFFIX "_d.pyd")
++if(QNX)
++  add_library(${PROJECT_NAME} src/tf2_py.cpp)
++else()
++  python3_add_library(_tf2_py src/tf2_py.cpp)
+ endif()
+ 
+-# Set output directories to import module from the build directory
+-# Use a no-op generator expression so multi-config generators don't append an
+-# extra directory like Release/ or Debug/ and break the Python import.
+-set_target_properties(_tf2_py PROPERTIES
+-  LIBRARY_OUTPUT_DIRECTORY "$<1:${CMAKE_CURRENT_BINARY_DIR}/test_${PROJECT_NAME}>"
+-  RUNTIME_OUTPUT_DIRECTORY "$<1:${CMAKE_CURRENT_BINARY_DIR}/test_${PROJECT_NAME}>"
+-)
+-
+-target_link_libraries(_tf2_py PRIVATE
+-  ${geometry_msgs_TARGETS}
+-  tf2::tf2
+-)
+-
+-install(TARGETS
+-  _tf2_py
+-  DESTINATION ${PYTHON_INSTALL_DIR}/${PROJECT_NAME}
+-)
++if(QNX)
++  # Set output directories to import module from the build directory
++  # Use a no-op generator expression so multi-config generators don't append an
++  # extra directory like Release/ or Debug/ and break the Python import.
++  set_target_properties(${PROJECT_NAME} PROPERTIES
++    LIBRARY_OUTPUT_DIRECTORY "$<1:${CMAKE_CURRENT_BINARY_DIR}/test_${PROJECT_NAME}>"
++    RUNTIME_OUTPUT_DIRECTORY "$<1:${CMAKE_CURRENT_BINARY_DIR}/test_${PROJECT_NAME}>"
++  )
++
++  target_link_libraries(${PROJECT_NAME} PRIVATE
++    ${geometry_msgs_TARGETS}
++    tf2::tf2
++  )
++
++  install(TARGETS
++    ${PROJECT_NAME}
++    DESTINATION ${PYTHON_INSTALL_DIR}/${PROJECT_NAME}
++  )
++
++else()
++  if(WIN32 AND CMAKE_BUILD_TYPE STREQUAL "Debug")
++    # python3_add_library should really take care of this for us, but it doesn't
++    set_property(TARGET _tf2_py PROPERTY SUFFIX "_d.pyd")
++  endif()
++
++  # Set output directories to import module from the build directory
++  # Use a no-op generator expression so multi-config generators don't append an
++  # extra directory like Release/ or Debug/ and break the Python import.
++  set_target_properties(_tf2_py PROPERTIES
++    LIBRARY_OUTPUT_DIRECTORY "$<1:${CMAKE_CURRENT_BINARY_DIR}/test_${PROJECT_NAME}>"
++    RUNTIME_OUTPUT_DIRECTORY "$<1:${CMAKE_CURRENT_BINARY_DIR}/test_${PROJECT_NAME}>"
++  )
++
++  target_link_libraries(_tf2_py PRIVATE
++    ${geometry_msgs_TARGETS}
++    tf2::tf2
++  )
++
++  install(TARGETS
++  _ tf2_py
++    DESTINATION ${PYTHON_INSTALL_DIR}/${PROJECT_NAME}
++  )
++endif()
+ 
+ if(BUILD_TESTING)
+   find_package(ament_lint_auto REQUIRED)
diff --git a/ros2/qnx_patches/libstatistics_collector.patch b/ros2/qnx_patches/libstatistics_collector.patch
new file mode 100644
index 0000000..84e011c
--- /dev/null
+++ b/ros2/qnx_patches/libstatistics_collector.patch
@@ -0,0 +1,26 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index 310f818..2167296 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -70,6 +70,10 @@ ament_export_targets(${PROJECT_NAME})
+ 
+ ament_export_dependencies("builtin_interfaces" "rcl" "rcpputils" "rosidl_default_runtime" "statistics_msgs")
+ 
++if(QNX)
++  set(BUILD_TESTING ON)
++endif()
++
+ if(BUILD_TESTING)
+   find_package(ament_lint_auto REQUIRED)
+   find_package(ament_cmake_gtest REQUIRED)
+@@ -112,6 +116,10 @@ if(BUILD_TESTING)
+   if(TARGET benchmark_iterative)
+     target_link_libraries(benchmark_iterative ${PROJECT_NAME})
+   endif()
++
++  if(QNX)
++    install(DIRECTORY ${CMAKE_BINARY_DIR}/ DESTINATION test/libstatistics_collector)
++  endif()
+ endif()
+ 
+ install(
diff --git a/ros2/qnx_patches/orocos_kdl_vendor.patch b/ros2/qnx_patches/orocos_kdl_vendor.patch
new file mode 100644
index 0000000..603d233
--- /dev/null
+++ b/ros2/qnx_patches/orocos_kdl_vendor.patch
@@ -0,0 +1,50 @@
+diff --git a/orocos_kdl_vendor/CMakeLists.txt b/orocos_kdl_vendor/CMakeLists.txt
+index 655e562..fa71950 100644
+--- a/orocos_kdl_vendor/CMakeLists.txt
++++ b/orocos_kdl_vendor/CMakeLists.txt
+@@ -50,6 +50,10 @@ macro(build_orocos_kdl)
+   list(APPEND extra_cmake_args "-DENABLE_TESTS=OFF")
+   list(APPEND extra_cmake_args "-DENABLE_EXAMPLES=OFF")
+ 
++  if(QNX)
++    list(APPEND extra_cmake_args "-DEIGEN3_INCLUDE_DIR=${Eigen3_INCLUDE_DIRS}")
++  endif()
++
+   include(ExternalProject)
+ 
+   # Build orocos_kdl
+diff --git a/orocos_kdl_vendor/package.xml b/orocos_kdl_vendor/package.xml
+index c5de981..a3ba4ee 100644
+--- a/orocos_kdl_vendor/package.xml
++++ b/orocos_kdl_vendor/package.xml
+@@ -19,7 +19,7 @@
+   <buildtool_depend>git</buildtool_depend>
+ 
+   <!-- orocos_kdl depends on eigen -->
+-  <depend>eigen</depend>
++  <depend>eigen3</depend>
+   <depend>eigen3_cmake_module</depend>
+   <depend>liborocos-kdl-dev</depend>
+ 
+diff --git a/python_orocos_kdl_vendor/CMakeLists.txt b/python_orocos_kdl_vendor/CMakeLists.txt
+index 48554fd..fb56765 100644
+--- a/python_orocos_kdl_vendor/CMakeLists.txt
++++ b/python_orocos_kdl_vendor/CMakeLists.txt
+@@ -23,7 +23,16 @@ if(NOT FORCE_BUILD_VENDOR_PKG)
+     # Force FindPython3 to use the debug interpreter where ROS 2 expects it
+     set(Python3_EXECUTABLE "${PYTHON_EXECUTABLE_DEBUG}")
+   endif()
+-  find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
++  if(QNX)
++    find_library(python3_LIBRARY NAMES python3)
++
++    include_directories(${PROJECT_NAME}
++      ${QNX_TARGET}/usr/include/python${PYTHON_VERSION_QNX}
++      ${QNX_TARGET}/usr/include/${CPUVARDIR}/python${PYTHON_VERSION_QNX})
++  else()
++    # Find python before pybind11
++    find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
++  endif()
+   execute_process(
+     COMMAND ${Python3_EXECUTABLE} -c "import PyKDL"
+     RESULT_VARIABLE pykdl_import_exit_code
diff --git a/ros2/qnx_patches/osrf_testing_tools_cpp.patch b/ros2/qnx_patches/osrf_testing_tools_cpp.patch
new file mode 100644
index 0000000..b6e6416
--- /dev/null
+++ b/ros2/qnx_patches/osrf_testing_tools_cpp.patch
@@ -0,0 +1,15 @@
+diff --git a/osrf_testing_tools_cpp/src/memory_tools/CMakeLists.txt b/osrf_testing_tools_cpp/src/memory_tools/CMakeLists.txt
+index be7f216..7dd6c83 100644
+--- a/osrf_testing_tools_cpp/src/memory_tools/CMakeLists.txt
++++ b/osrf_testing_tools_cpp/src/memory_tools/CMakeLists.txt
+@@ -35,6 +35,10 @@ endif()
+ target_compile_definitions(memory_tools
+   PRIVATE "OSRF_TESTING_TOOLS_CPP_MEMORY_TOOLS_BUILDING_DLL")
+ 
++if(QNX)
++  target_compile_definitions(memory_tools PRIVATE _GNU_SOURCE)
++endif()
++
+ add_library(memory_tools_interpose SHARED
+   memory_tools.cpp
+ )
diff --git a/ros2/qnx_patches/pybind11_vendor.patch b/ros2/qnx_patches/pybind11_vendor.patch
new file mode 100644
index 0000000..d268e0f
--- /dev/null
+++ b/ros2/qnx_patches/pybind11_vendor.patch
@@ -0,0 +1,104 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index 309a628..0e6b5a3 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -8,6 +8,10 @@ option(FORCE_BUILD_VENDOR_PKG
+   "Build pybind11 from source, even if system-installed package is available"
+   OFF)
+ 
++if(QNX)
++  set(FORCE_BUILD_VENDOR_PKG ON)
++endif()
++
+ if(NOT FORCE_BUILD_VENDOR_PKG)
+   find_package(pybind11 QUIET)
+ endif()
+@@ -53,7 +57,9 @@ macro(build_pybind11)
+   list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
+ 
+   include(ExternalProject)
+-  ExternalProject_Add(pybind11-2.9.1
++
++  if(QNX)
++    ExternalProject_Add(pybind11-2.9.1
+     GIT_REPOSITORY https://github.com/pybind/pybind11.git
+     GIT_TAG ffa346860b306c9bbfb341aed9c14c067751feb8  # v2.9.1
+     GIT_CONFIG advice.detachedHead=false
+@@ -75,7 +81,8 @@ macro(build_pybind11)
+     PATCH_COMMAND
+       ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> git apply -p1 --ignore-space-change --whitespace=nowarn
+         ${CMAKE_CURRENT_SOURCE_DIR}/pybind11-2.9.1-fix-windows-debug.patch
+-  )
++    )
++  endif()
+ 
+   # The external project will install to the build folder, but we'll install that on make install.
+   install(
+diff --git a/pybind11-2.9.1-fix-windows-debug.patch b/pybind11-2.9.1-fix-windows-debug.patch
+index d1f3967..27641ab 100644
+--- a/pybind11-2.9.1-fix-windows-debug.patch
++++ b/pybind11-2.9.1-fix-windows-debug.patch
+@@ -1,15 +1,3 @@
+-From 245664b2d3863cc4e6ae635bb79c0ceb819394ab Mon Sep 17 00:00:00 2001
+-From: =?UTF-8?q?Steven!=20Ragnar=C3=B6k?= <steven@nuclearsandwich.com>
+-Date: Wed, 13 Apr 2022 12:52:17 -0700
+-Subject: [PATCH] Create changes to be patched.
+-
+----
+- CMakeLists.txt                   | 8 ++++++++
+- include/pybind11/detail/common.h | 2 +-
+- tools/pybind11NewTools.cmake     | 2 +-
+- tools/pybind11Tools.cmake        | 2 +-
+- 4 files changed, 11 insertions(+), 3 deletions(-)
+-
+ diff --git a/CMakeLists.txt b/CMakeLists.txt
+ index 3787982c..f0a6e998 100644
+ --- a/CMakeLists.txt
+@@ -42,8 +30,23 @@ index 5c59b414..01f4a416 100644
+  // Workaround for a VS 2022 issue.
+  // NOTE: This workaround knowingly violates the Python.h include order requirement:
+  // https://docs.python.org/3/c-api/intro.html#include-files
++diff --git a/include/pybind11/detail/type_caster_base.h b/include/pybind11/detail/type_caster_base.h
++index 48e218b2..a4caedf2 100644
++--- a/include/pybind11/detail/type_caster_base.h
+++++ b/include/pybind11/detail/type_caster_base.h
++@@ -25,6 +25,10 @@
++ #include <utility>
++ #include <vector>
++ 
+++#ifdef __QNX__
+++#include <internal/pycore_frame.h>
+++#endif
+++
++ PYBIND11_NAMESPACE_BEGIN(PYBIND11_NAMESPACE)
++ PYBIND11_NAMESPACE_BEGIN(detail)
++ 
+ diff --git a/tools/pybind11NewTools.cmake b/tools/pybind11NewTools.cmake
+-index 0b4e21cc..74a110df 100644
++index 0b4e21cc..9e246864 100644
+ --- a/tools/pybind11NewTools.cmake
+ +++ b/tools/pybind11NewTools.cmake
+ @@ -134,7 +134,7 @@ if(PYTHON_IS_DEBUG)
+@@ -55,6 +58,15 @@ index 0b4e21cc..74a110df 100644
+  endif()
+  
+  # Check on every access - since Python2 and Python3 could have been used - do nothing in that case.
++@@ -204,7 +204,7 @@ function(pybind11_add_module target_name)
++   if("${_Python}" STREQUAL "Python")
++     python_add_library(${target_name} ${lib_type} ${ARG_UNPARSED_ARGUMENTS})
++   elseif("${_Python}" STREQUAL "Python3")
++-    python3_add_library(${target_name} ${lib_type} ${ARG_UNPARSED_ARGUMENTS})
+++    add_library(${target_name} ${lib_type} ${ARG_UNPARSED_ARGUMENTS})
++   elseif("${_Python}" STREQUAL "Python2")
++     python2_add_library(${target_name} ${lib_type} ${ARG_UNPARSED_ARGUMENTS})
++   else()
+ diff --git a/tools/pybind11Tools.cmake b/tools/pybind11Tools.cmake
+ index c255e5cf..0fa80be8 100644
+ --- a/tools/pybind11Tools.cmake
+@@ -68,6 +80,3 @@ index c255e5cf..0fa80be8 100644
+  endif()
+  
+  set_property(
+--- 
+-2.35.2
+-
diff --git a/ros2/qnx_patches/rcl_interfaces.patch b/ros2/qnx_patches/rcl_interfaces.patch
new file mode 100644
index 0000000..96d0884
--- /dev/null
+++ b/ros2/qnx_patches/rcl_interfaces.patch
@@ -0,0 +1,26 @@
+diff --git a/builtin_interfaces/package.xml b/builtin_interfaces/package.xml
+index c664090..c6c78c8 100644
+--- a/builtin_interfaces/package.xml
++++ b/builtin_interfaces/package.xml
+@@ -16,6 +16,8 @@
+ 
+   <buildtool_depend>rosidl_default_generators</buildtool_depend>
+ 
++  <depend>numpy_vendor</depend>
++
+   <exec_depend>rosidl_default_runtime</exec_depend>
+ 
+   <test_depend>ament_lint_common</test_depend>
+diff --git a/lifecycle_msgs/package.xml b/lifecycle_msgs/package.xml
+index 7bb73cd..b06201f 100644
+--- a/lifecycle_msgs/package.xml
++++ b/lifecycle_msgs/package.xml
+@@ -15,6 +15,8 @@
+   <buildtool_depend>ament_cmake</buildtool_depend>
+   <buildtool_depend>rosidl_default_generators</buildtool_depend>
+ 
++  <depend>numpy_vendor</depend>
++
+   <exec_depend>rosidl_default_runtime</exec_depend>
+ 
+   <test_depend>ament_lint_auto</test_depend>
diff --git a/ros2/qnx_patches/rclpy.patch b/ros2/qnx_patches/rclpy.patch
new file mode 100644
index 0000000..edd1a6a
--- /dev/null
+++ b/ros2/qnx_patches/rclpy.patch
@@ -0,0 +1,36 @@
+diff --git a/rclpy/CMakeLists.txt b/rclpy/CMakeLists.txt
+index eb48e4e..ea9c883 100644
+--- a/rclpy/CMakeLists.txt
++++ b/rclpy/CMakeLists.txt
+@@ -14,6 +14,13 @@ if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES "Clang")
+   add_compile_options(-Wall -Wextra)
+ endif()
+ 
++if(QNX)
++  set(CMAKE_CXX_COMPILE_FEATURES
++    cxx_inheriting_constructors
++    cxx_user_literals
++    cxx_right_angle_brackets)
++endif()
++
+ # Figure out Python3 debug/release before anything else can find_package it
+ if(WIN32 AND CMAKE_BUILD_TYPE STREQUAL "Debug")
+   find_package(python_cmake_module REQUIRED)
+@@ -38,7 +45,16 @@ find_package(rmw_implementation_cmake REQUIRED)
+ find_package(rosidl_runtime_c REQUIRED)
+ 
+ # Find python before pybind11
+-find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
++if(QNX)
++  find_library(python3_LIBRARY NAMES python3)
++
++  include_directories(${PROJECT_NAME}
++    ${QNX_TARGET}/usr/include/python${PYTHON_VERSION_QNX}
++    ${QNX_TARGET}/usr/include/${CPUVARDIR}/python${PYTHON_VERSION_QNX}
++    ${QNX_TARGET}/${CPUVARDIR}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages/numpy/core/include)
++else()
++  find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
++endif()
+ 
+ find_package(pybind11_vendor REQUIRED)
+ find_package(pybind11 REQUIRED)
diff --git a/ros2/qnx_patches/rmw.patch b/ros2/qnx_patches/rmw.patch
new file mode 100644
index 0000000..58a06c4
--- /dev/null
+++ b/ros2/qnx_patches/rmw.patch
@@ -0,0 +1,36 @@
+diff --git a/rmw/CMakeLists.txt b/rmw/CMakeLists.txt
+index 089d5cd..8b44947 100644
+--- a/rmw/CMakeLists.txt
++++ b/rmw/CMakeLists.txt
+@@ -75,6 +75,10 @@ ament_export_libraries(${PROJECT_NAME})
+ # Export modern CMake targets
+ ament_export_targets(${PROJECT_NAME})
+ 
++if(QNX)
++  set(BUILD_TESTING ON)
++endif()
++
+ if(BUILD_TESTING)
+   find_package(ament_lint_auto REQUIRED)
+   ament_lint_auto_find_test_dependencies()
+diff --git a/rmw/test/CMakeLists.txt b/rmw/test/CMakeLists.txt
+index e7733c9..8049a60 100644
+--- a/rmw/test/CMakeLists.txt
++++ b/rmw/test/CMakeLists.txt
+@@ -164,7 +164,7 @@ ament_add_gmock(test_validate_namespace
+ )
+ if(TARGET test_validate_namespace)
+   target_link_libraries(test_validate_namespace ${PROJECT_NAME})
+-  if(UNIX AND NOT APPLE AND NOT ANDROID)
++  if(UNIX AND NOT APPLE AND NOT ANDROID AND NOT QNX)
+     target_link_libraries(test_validate_namespace pthread)
+   endif()
+   if(NOT WIN32)
+@@ -220,3 +220,7 @@ ament_add_gmock(test_subscription_content_filter_options
+ if(TARGET test_subscription_content_filter_options)
+   target_link_libraries(test_subscription_content_filter_options ${PROJECT_NAME})
+ endif()
++
++if(QNX)
++  install(DIRECTORY ${CMAKE_BINARY_DIR}/ DESTINATION test/rmw)
++endif()
diff --git a/ros2/qnx_patches/rmw_dds_common.patch b/ros2/qnx_patches/rmw_dds_common.patch
new file mode 100644
index 0000000..94f0631
--- /dev/null
+++ b/ros2/qnx_patches/rmw_dds_common.patch
@@ -0,0 +1,12 @@
+diff --git a/rmw_dds_common/package.xml b/rmw_dds_common/package.xml
+index 87e6b7c..c709a77 100644
+--- a/rmw_dds_common/package.xml
++++ b/rmw_dds_common/package.xml
+@@ -17,6 +17,7 @@
+   <depend>rcpputils</depend>
+   <depend>rmw</depend>
+   <depend>rosidl_runtime_cpp</depend>
++  <depend>numpy_vendor</depend>
+ 
+   <test_depend>ament_cmake_gmock</test_depend>
+   <test_depend>ament_lint_auto</test_depend>
diff --git a/ros2/qnx_patches/rosbag2.patch b/ros2/qnx_patches/rosbag2.patch
new file mode 100644
index 0000000..b830e4e
--- /dev/null
+++ b/ros2/qnx_patches/rosbag2.patch
@@ -0,0 +1,74 @@
+diff --git a/rosbag2_py/CMakeLists.txt b/rosbag2_py/CMakeLists.txt
+index e72dd233..218ce26f 100644
+--- a/rosbag2_py/CMakeLists.txt
++++ b/rosbag2_py/CMakeLists.txt
+@@ -15,6 +15,11 @@ if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+   add_compile_options(-Wall -Wextra -Wpedantic)
+ endif()
+ 
++if(QNX)
++  # Workaround for sys/termio.h:115 error
++  add_compile_definitions(__hpux=1)
++endif()
++
+ # Figure out Python3 debug/release before anything else can find_package it
+ if(WIN32 AND CMAKE_BUILD_TYPE STREQUAL "Debug")
+   find_package(python_cmake_module REQUIRED)
+@@ -33,7 +38,17 @@ find_package(rosbag2_storage REQUIRED)
+ find_package(rosbag2_transport REQUIRED)
+ 
+ # Find python before pybind11
+-find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
++if(QNX)
++  find_library(python3_LIBRARY NAMES python3)
++
++  include_directories(${PROJECT_NAME}
++    ${QNX_TARGET}/usr/include/python${PYTHON_VERSION_QNX}
++    ${QNX_TARGET}/usr/include/${CPUVARDIR}/python${PYTHON_VERSION_QNX}
++    ${QNX_TARGET}/${CPUVARDIR}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages/numpy/core/include
++    ${QNX_TARGET}/usr/include/tinyxml2)
++else()
++  find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
++endif()
+ 
+ find_package(pybind11_vendor REQUIRED)
+ find_package(pybind11 REQUIRED)
+diff --git a/rosbag2_storage_mcap_testdata/package.xml b/rosbag2_storage_mcap_testdata/package.xml
+index ffa03146..615dac16 100644
+--- a/rosbag2_storage_mcap_testdata/package.xml
++++ b/rosbag2_storage_mcap_testdata/package.xml
+@@ -12,6 +12,8 @@
+   <buildtool_depend>ament_cmake</buildtool_depend>
+   <buildtool_depend>rosidl_default_generators</buildtool_depend>
+ 
++  <depend>numpy_vendor</depend>
++
+   <test_depend>ament_lint_auto</test_depend>
+   <test_depend>ament_lint_common</test_depend>
+ 
+diff --git a/zstd_vendor/CMakeLists.txt b/zstd_vendor/CMakeLists.txt
+index e3d4a22a..4fdbb9ed 100644
+--- a/zstd_vendor/CMakeLists.txt
++++ b/zstd_vendor/CMakeLists.txt
+@@ -9,7 +9,11 @@ option(FORCE_BUILD_VENDOR_PKG
+   OFF)
+ 
+ if(NOT FORCE_BUILD_VENDOR_PKG)
+-  find_package(zstd QUIET)
++  if(QNX AND $ENV{QNX_SDP_VERSION} STREQUAL "qnx800")
++    find_package(zstd REQUIRED)
++  else()
++    find_package(zstd QUIET)
++  endif()
+ endif()
+ 
+ macro(build_zstd)
+@@ -59,7 +63,7 @@ macro(build_zstd)
+     USE_SOURCE_PERMISSIONS)
+ endmacro()
+ 
+-if (NOT zstd_FOUND OR "${zstd_VERSION}" VERSION_LESS 1.4.4)
++if ($ENV{QNX_SDP_VERSION} STREQUAL "qnx710" OR (NOT QNX AND NOT (zstd_FOUND OR "${zstd_VERSION}" VERSION_LESS 1.4.4)))
+   build_zstd()
+ else()
+   message(STATUS "Found Zstd, skipping build.")
diff --git a/ros2/qnx_patches/rosidl.patch b/ros2/qnx_patches/rosidl.patch
new file mode 100644
index 0000000..74bc6c3
--- /dev/null
+++ b/ros2/qnx_patches/rosidl.patch
@@ -0,0 +1,26 @@
+diff --git a/rosidl_runtime_c/CMakeLists.txt b/rosidl_runtime_c/CMakeLists.txt
+index 33baf9b..dc4bc54 100644
+--- a/rosidl_runtime_c/CMakeLists.txt
++++ b/rosidl_runtime_c/CMakeLists.txt
+@@ -53,6 +53,10 @@ ament_export_targets(${PROJECT_NAME})
+ 
+ ament_index_register_resource("rosidl_runtime_packages")
+ 
++if(QNX)
++  set(BUILD_TESTING ON)
++endif()
++
+ if(BUILD_TESTING)
+   find_package(ament_lint_auto REQUIRED)
+   find_package(performance_test_fixture REQUIRED)
+@@ -108,6 +112,10 @@ if(BUILD_TESTING)
+   if(TARGET benchmark_string_conversion)
+     target_link_libraries(benchmark_string_conversion ${PROJECT_NAME})
+   endif()
++
++  if(QNX)
++    install(DIRECTORY ${CMAKE_BINARY_DIR}/ DESTINATION test/rosidl_runtime_c)
++  endif()
+ endif()
+ 
+ install(
diff --git a/ros2/qnx_patches/rosidl_python.patch b/ros2/qnx_patches/rosidl_python.patch
new file mode 100644
index 0000000..2f4e23e
--- /dev/null
+++ b/ros2/qnx_patches/rosidl_python.patch
@@ -0,0 +1,16 @@
+diff --git a/rosidl_generator_py/cmake/rosidl_generator_py_generate_interfaces.cmake b/rosidl_generator_py/cmake/rosidl_generator_py_generate_interfaces.cmake
+index a6d8263..5530106 100644
+--- a/rosidl_generator_py/cmake/rosidl_generator_py_generate_interfaces.cmake
++++ b/rosidl_generator_py/cmake/rosidl_generator_py_generate_interfaces.cmake
+@@ -176,6 +176,11 @@ target_link_libraries(
+   ${_target_name_lib}
+   ${PythonExtra_LIBRARIES}
+ )
++
++if(QNX)
++  list(APPEND PythonExtra_INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/usr/lib/python${PYTHON_VERSION_QNX}/site-packages/numpy/core/include)
++endif()
++
+ target_include_directories(${_target_name_lib}
+   PRIVATE
+   ${CMAKE_CURRENT_BINARY_DIR}/rosidl_generator_c
diff --git a/ros2/qnx_patches/rosidl_typesupport.patch b/ros2/qnx_patches/rosidl_typesupport.patch
new file mode 100644
index 0000000..67cf5a8
--- /dev/null
+++ b/ros2/qnx_patches/rosidl_typesupport.patch
@@ -0,0 +1,26 @@
+diff --git a/rosidl_typesupport_cpp/CMakeLists.txt b/rosidl_typesupport_cpp/CMakeLists.txt
+index c6aa1cb..e33348e 100644
+--- a/rosidl_typesupport_cpp/CMakeLists.txt
++++ b/rosidl_typesupport_cpp/CMakeLists.txt
+@@ -52,6 +52,10 @@ ament_export_targets(${PROJECT_NAME})
+ 
+ ament_index_register_resource("rosidl_runtime_packages")
+ 
++if(QNX)
++  set(BUILD_TESTING ON)
++endif()
++
+ if(BUILD_TESTING)
+   find_package(ament_lint_auto REQUIRED)
+   ament_lint_auto_find_test_dependencies()
+@@ -127,6 +131,10 @@ if(BUILD_TESTING)
+ 
+   find_package(ament_cmake_pytest REQUIRED)
+   ament_add_pytest_test(test_cli_extension test/test_cli_extension.py)
++
++  if(QNX)
++    install(DIRECTORY ${CMAKE_BINARY_DIR}/ DESTINATION test/rosidl_typesupport_cpp)
++  endif()
+ endif()
+ 
+ if(BUILD_SHARED_LIBS)
diff --git a/ros2/qnx_patches/rosidl_typesupport_fastrtps.patch b/ros2/qnx_patches/rosidl_typesupport_fastrtps.patch
new file mode 100644
index 0000000..0c29114
--- /dev/null
+++ b/ros2/qnx_patches/rosidl_typesupport_fastrtps.patch
@@ -0,0 +1,52 @@
+diff --git a/rosidl_typesupport_fastrtps_c/CMakeLists.txt b/rosidl_typesupport_fastrtps_c/CMakeLists.txt
+index 314f933..09c67de 100644
+--- a/rosidl_typesupport_fastrtps_c/CMakeLists.txt
++++ b/rosidl_typesupport_fastrtps_c/CMakeLists.txt
+@@ -60,6 +60,10 @@ ament_export_targets(${PROJECT_NAME})
+ 
+ ament_index_register_resource("rosidl_typesupport_c")
+ 
++if(QNX)
++  set(BUILD_TESTING ON)
++endif()
++
+ if(BUILD_TESTING)
+   find_package(ament_cmake_gtest REQUIRED)
+   find_package(ament_lint_auto REQUIRED)
+@@ -105,6 +109,10 @@ if(BUILD_TESTING)
+ 
+   find_package(ament_cmake_pytest REQUIRED)
+   ament_add_pytest_test(test_cli_extension test/test_cli_extension.py)
++
++  if(QNX)
++    install(DIRECTORY ${CMAKE_BINARY_DIR}/ DESTINATION test/rosidl_typesupport_fastrtps_cpp)
++  endif()
+ endif()
+ 
+ ament_package(
+diff --git a/rosidl_typesupport_fastrtps_cpp/CMakeLists.txt b/rosidl_typesupport_fastrtps_cpp/CMakeLists.txt
+index d42ce68..8de21d9 100644
+--- a/rosidl_typesupport_fastrtps_cpp/CMakeLists.txt
++++ b/rosidl_typesupport_fastrtps_cpp/CMakeLists.txt
+@@ -64,6 +64,10 @@ ament_export_targets(${PROJECT_NAME})
+ 
+ ament_index_register_resource("rosidl_typesupport_cpp")
+ 
++if(QNX)
++  set(BUILD_TESTING ON)
++endif()
++
+ if(BUILD_TESTING)
+   find_package(ament_cmake_gtest REQUIRED)
+   find_package(ament_lint_auto REQUIRED)
+@@ -111,6 +115,10 @@ if(BUILD_TESTING)
+ 
+   find_package(ament_cmake_pytest REQUIRED)
+   ament_add_pytest_test(test_cli_extension test/test_cli_extension.py)
++
++  if(QNX)
++    install(DIRECTORY ${CMAKE_BINARY_DIR}/ DESTINATION test/rosidl_typesupport_fastrtps_cpp)
++  endif()
+ endif()
+ 
+ ament_package(
diff --git a/ros2/qnx_patches/tinyxml2_vendor.patch b/ros2/qnx_patches/tinyxml2_vendor.patch
new file mode 100644
index 0000000..d5fd8c2
--- /dev/null
+++ b/ros2/qnx_patches/tinyxml2_vendor.patch
@@ -0,0 +1,54 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index c05ba49..a18db5d 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -3,8 +3,48 @@ cmake_minimum_required(VERSION 3.5)
+ project(tinyxml2_vendor)
+ 
+ find_package(ament_cmake REQUIRED)
++
++set(PACKAGE_VERSION "1.0.0")
++
++macro(build_tinyxml2)
++
++  set(extra_cmake_args)
++
++  if(DEFINED CMAKE_BUILD_TYPE)
++    list(APPEND extra_cmake_args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
++  endif()
++
++  if(DEFINED CMAKE_TOOLCHAIN_FILE)
++    list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
++  endif()
++
++  include(ExternalProject)
++  externalproject_add(tinyxml2
++    GIT_REPOSITORY https://github.com/leethomason/tinyxml2.git
++    GIT_TAG bf15233ad88390461f6ab0dbcf046cce643c5fcb
++    TIMEOUT 600
++    CMAKE_ARGS
++    -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/tinyxml2_install
++      ${extra_cmake_args}
++      -Wno-dev
++  )
++
++  # The external project will install to the build folder, but we'll install that on make install.
++  install(
++    DIRECTORY
++      ${CMAKE_CURRENT_BINARY_DIR}/tinyxml2_install/
++    DESTINATION
++      ${CMAKE_INSTALL_PREFIX}
++  )
++
++endmacro()
++
+ list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules")
+-find_package(TinyXML2 REQUIRED)
++find_package(TinyXML2 QUIET)
++if(NOT TinyXML2_FOUND)
++  build_tinyxml2()
++endif()
++
+ 
+ install(DIRECTORY cmake DESTINATION share/${PROJECT_NAME})
+ 
diff --git a/ros2/qnx_patches/unique_identifier_msgs.patch b/ros2/qnx_patches/unique_identifier_msgs.patch
new file mode 100644
index 0000000..187344b
--- /dev/null
+++ b/ros2/qnx_patches/unique_identifier_msgs.patch
@@ -0,0 +1,13 @@
+diff --git a/package.xml b/package.xml
+index 7d2a5f9..516d749 100644
+--- a/package.xml
++++ b/package.xml
+@@ -18,6 +18,8 @@
+ 
+   <exec_depend>rosidl_default_runtime</exec_depend>
+ 
++  <depend>numpy_vendor</depend>
++
+   <test_depend>ament_lint_auto</test_depend>
+   <test_depend>ament_lint_common</test_depend>
+ 
diff --git a/ros2/qnx_patches/yaml_cpp_vendor.patch b/ros2/qnx_patches/yaml_cpp_vendor.patch
new file mode 100644
index 0000000..41415be
--- /dev/null
+++ b/ros2/qnx_patches/yaml_cpp_vendor.patch
@@ -0,0 +1,135 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index badc1b4..a48595e 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -2,54 +2,37 @@ cmake_minimum_required(VERSION 3.5)
+ 
+ project(yaml_cpp_vendor)
+ 
+-option(FORCE_BUILD_VENDOR_PKG
+-  "Build yaml-cpp from source, even if system-installed package is available"
+-  OFF)
+-
+ find_package(ament_cmake REQUIRED)
+ 
+-# Avoid DOWNLOAD_EXTRACT_TIMESTAMP warning for CMake >= 3.24
+-if (POLICY CMP0135)
+-  cmake_policy(SET CMP0135 OLD)
+-endif()
++set(PACKAGE_VERSION "1.0.0")
+ 
+ macro(build_yaml_cpp)
++
+   set(extra_cmake_args)
+ 
+   if(DEFINED CMAKE_BUILD_TYPE)
+     list(APPEND extra_cmake_args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
+   endif()
+-  if(NOT WIN32)
+-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w")
+-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -w")
+-  endif()
+ 
++  list(APPEND extra_cmake_args "-DCMAKE_BUILD_TYPE=Release")
+   list(APPEND extra_cmake_args "-DYAML_CPP_BUILD_TESTS=OFF")
+   list(APPEND extra_cmake_args "-DYAML_CPP_BUILD_TOOLS=OFF")
+   list(APPEND extra_cmake_args "-DYAML_CPP_BUILD_CONTRIB=OFF")
+   list(APPEND extra_cmake_args "-DYAML_BUILD_SHARED_LIBS=ON")
+-  list(APPEND extra_cmake_args "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
+-  list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
+-
+-  if(WIN32 AND NOT ${CMAKE_VERBOSE_MAKEFILE})
+-    set(should_log ON)  # prevent warnings in Windows CI
+-  else()
+-    set(should_log OFF)
+-  endif()
++  list(APPEND extra_cmake_args "-DBUILD_SHARED_LIBS=ON")
+ 
+   if(DEFINED CMAKE_TOOLCHAIN_FILE)
+     list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
+   endif()
+ 
+   include(ExternalProject)
+-  ExternalProject_Add(yaml_cpp-0.7.0
+-    URL https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.7.0.tar.gz
+-    URL_MD5 74d646a3cc1b5d519829441db96744f0
++  ExternalProject_Add(yaml_cpp
++    GIT_REPOSITORY https://github.com/jbeder/yaml-cpp.git
++    GIT_TAG 9a3624205e8774953ef18f57067b3426c1c5ada6
+     TIMEOUT 600
+-    LOG_CONFIGURE ${should_log}
+-    LOG_BUILD ${should_log}
++    PATCH_COMMAND git apply ${CMAKE_CURRENT_SOURCE_DIR}/yaml-cpp.patch
+     CMAKE_ARGS
+-      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/yaml_cpp_install
++    -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/yaml_cpp_install
+       ${extra_cmake_args}
+       -Wno-dev
+   )
+@@ -59,22 +42,19 @@ macro(build_yaml_cpp)
+     DIRECTORY
+       ${CMAKE_CURRENT_BINARY_DIR}/yaml_cpp_install/
+     DESTINATION
+-      ${CMAKE_INSTALL_PREFIX}/opt/yaml_cpp_vendor
+-    USE_SOURCE_PERMISSIONS
++      ${CMAKE_INSTALL_PREFIX}
+   )
++
+ endmacro()
+ 
+-# NO_CMAKE_PACKAGE_REGISTRY used to avoid finding the library downloaded in WORKSPACE B
+-# when building workspace A.
+-# This should only find a system installed yaml-cpp and thus the environment hook isn't needed.
+-find_package(yaml-cpp QUIET NO_CMAKE_PACKAGE_REGISTRY)
+-if(FORCE_BUILD_VENDOR_PKG OR NOT yaml-cpp_FOUND)
++find_package(yaml_cpp QUIET)
++if(NOT yaml_cpp_FOUND)
+   build_yaml_cpp()
+ 
+   if(WIN32)
+     ament_environment_hooks(env_hook/yaml_cpp_vendor_library_path.bat)
+     set(ENV_VAR_NAME "PATH")
+-    set(ENV_VAR_VALUE "opt\\yaml_cpp_vendor\\bin")
++    set(ENV_VAR_VALUE "bin")
+   else()
+     ament_environment_hooks(env_hook/yaml_cpp_vendor_library_path.sh)
+     if(APPLE)
+@@ -82,13 +62,11 @@ if(FORCE_BUILD_VENDOR_PKG OR NOT yaml-cpp_FOUND)
+     else()
+       set(ENV_VAR_NAME "LD_LIBRARY_PATH")
+     endif()
+-    set(ENV_VAR_VALUE "opt/yaml_cpp_vendor/lib")
++    set(ENV_VAR_VALUE "lib")
+   endif()
+   ament_environment_hooks(env_hook/yaml_cpp_vendor_library_path.dsv.in)
+ else()
+-  message(STATUS "Found yaml-cpp ${yaml-cpp_VERSION} in path ${yaml-cpp_CONFIG}")
++  message(STATUS "Found yaml_cpp ${yaml_cpp_VERSION} in path ${yaml_cpp_CONFIG}")
+ endif()
+ 
+-ament_package(
+-  CONFIG_EXTRAS "yaml_cpp_vendor-extras.cmake.in"
+-)
++ament_package(CONFIG_EXTRAS "yaml_cpp_vendor-extras.cmake.in")
+diff --git a/yaml-cpp.patch b/yaml-cpp.patch
+new file mode 100644
+index 0000000..6c13d71
+--- /dev/null
++++ b/yaml-cpp.patch
+@@ -0,0 +1,16 @@
++diff --git a/include/yaml-cpp/node/iterator.h b/include/yaml-cpp/node/iterator.h
++index 366a9c8..eb76652 100644
++--- a/include/yaml-cpp/node/iterator.h
+++++ b/include/yaml-cpp/node/iterator.h
++@@ -15,6 +15,11 @@
++ #include <utility>
++ #include <vector>
++ 
+++// yaml-cpp fails to build against LLVM libc++ and builds successfully with libstdc++
+++// This workaround allows the build to succeed using libc++.
+++// This temp solution was mentioned https://github.com/jbeder/yaml-cpp/issues/742
+++static_assert(std::is_constructible<YAML::Node, const YAML::Node&>::value, "Node must be copy constructable");
+++
++ namespace YAML {
++ namespace detail {
++ struct iterator_value : public Node, std::pair<Node, Node> {
diff --git a/ros2/ros2.repos b/ros2/ros2.repos
new file mode 100644
index 0000000..b254360
--- /dev/null
+++ b/ros2/ros2.repos
@@ -0,0 +1,413 @@
+repositories:
+  ament/ament_cmake:
+    type: git
+    url: https://github.com/ament/ament_cmake.git
+    version: 1.3.4
+  ament/ament_index:
+    type: git
+    url: https://github.com/ament/ament_index.git
+    version: 1.4.0
+  ament/ament_lint:
+    type: git
+    url: https://github.com/ament/ament_lint.git
+    version: 0.12.6
+  ament/ament_package:
+    type: git
+    url: https://github.com/ament/ament_package.git
+    version: 0.14.0
+  ament/google_benchmark_vendor:
+    type: git
+    url: https://github.com/ament/google_benchmark_vendor.git
+    version: 0.1.1
+  ament/googletest:
+    type: git
+    url: https://github.com/ament/googletest.git
+    version: 1.10.9004
+  ament/uncrustify_vendor:
+    type: git
+    url: https://github.com/ament/uncrustify_vendor.git
+    version: 2.0.2
+  eProsima/Fast-CDR:
+    type: git
+    url: https://github.com/eProsima/Fast-CDR.git
+    version: v1.0.24
+  eProsima/Fast-DDS:
+    type: git
+    url: https://github.com/eProsima/Fast-DDS.git
+    version: v2.6.4
+  eProsima/foonathan_memory_vendor:
+    type: git
+    url: https://github.com/eProsima/foonathan_memory_vendor.git
+    version: v1.2.0
+  eclipse-cyclonedds/cyclonedds:
+    type: git
+    url: https://github.com/eclipse-cyclonedds/cyclonedds.git
+    version: 0.9.1
+  eclipse-iceoryx/iceoryx:
+    type: git
+    url: https://github.com/eclipse-iceoryx/iceoryx.git
+    version: v2.0.3
+  ignition/ignition_cmake2_vendor:
+    type: git
+    url: https://github.com/ignition-release/ignition_cmake2_vendor.git
+    version: 0.0.2
+  ignition/ignition_math6_vendor:
+    type: git
+    url: https://github.com/ignition-release/ignition_math6_vendor.git
+    version: 0.0.2
+  osrf/osrf_pycommon:
+    type: git
+    url: https://github.com/osrf/osrf_pycommon.git
+    version: 2.1.1
+  osrf/osrf_testing_tools_cpp:
+    type: git
+    url: https://github.com/osrf/osrf_testing_tools_cpp.git
+    version: 1.5.2
+  ros-perception/image_common:
+    type: git
+    url: https://github.com/ros-perception/image_common.git
+    version: 3.1.5
+  ros-perception/laser_geometry:
+    type: git
+    url: https://github.com/ros-perception/laser_geometry.git
+    version: 2.4.0
+  ros-planning/navigation_msgs:
+    type: git
+    url: https://github.com/ros-planning/navigation_msgs.git
+    version: 2.1.0
+  ros-tooling/keyboard_handler:
+    type: git
+    url: https://github.com/ros-tooling/keyboard_handler.git
+    version: 0.0.5
+  ros-tooling/libstatistics_collector:
+    type: git
+    url: https://github.com/ros-tooling/libstatistics_collector.git
+    version: 1.3.1
+  ros-visualization/interactive_markers:
+    type: git
+    url: https://github.com/ros-visualization/interactive_markers.git
+    version: 2.3.2
+  ros-visualization/python_qt_binding:
+    type: git
+    url: https://github.com/ros-visualization/python_qt_binding.git
+    version: 1.1.1
+  ros-visualization/qt_gui_core:
+    type: git
+    url: https://github.com/ros-visualization/qt_gui_core.git
+    version: 2.2.2
+  ros-visualization/rqt:
+    type: git
+    url: https://github.com/ros-visualization/rqt.git
+    version: 1.1.5
+  ros-visualization/rqt_action:
+    type: git
+    url: https://github.com/ros-visualization/rqt_action.git
+    version: 2.0.1
+  ros-visualization/rqt_bag:
+    type: git
+    url: https://github.com/ros-visualization/rqt_bag.git
+    version: 1.1.4
+  ros-visualization/rqt_console:
+    type: git
+    url: https://github.com/ros-visualization/rqt_console.git
+    version: 2.0.2
+  ros-visualization/rqt_graph:
+    type: git
+    url: https://github.com/ros-visualization/rqt_graph.git
+    version: 1.3.0
+  ros-visualization/rqt_msg:
+    type: git
+    url: https://github.com/ros-visualization/rqt_msg.git
+    version: 1.2.0
+  ros-visualization/rqt_plot:
+    type: git
+    url: https://github.com/ros-visualization/rqt_plot.git
+    version: 1.1.2
+  ros-visualization/rqt_publisher:
+    type: git
+    url: https://github.com/ros-visualization/rqt_publisher.git
+    version: 1.5.0
+  ros-visualization/rqt_py_console:
+    type: git
+    url: https://github.com/ros-visualization/rqt_py_console.git
+    version: 1.0.2
+  ros-visualization/rqt_reconfigure:
+    type: git
+    url: https://github.com/ros-visualization/rqt_reconfigure.git
+    version: 1.1.1
+  ros-visualization/rqt_service_caller:
+    type: git
+    url: https://github.com/ros-visualization/rqt_service_caller.git
+    version: 1.0.5
+  ros-visualization/rqt_shell:
+    type: git
+    url: https://github.com/ros-visualization/rqt_shell.git
+    version: 1.0.2
+  ros-visualization/rqt_srv:
+    type: git
+    url: https://github.com/ros-visualization/rqt_srv.git
+    version: 1.0.3
+  ros-visualization/rqt_topic:
+    type: git
+    url: https://github.com/ros-visualization/rqt_topic.git
+    version: 1.5.0
+  ros-visualization/tango_icons_vendor:
+    type: git
+    url: https://github.com/ros-visualization/tango_icons_vendor.git
+    version: 0.1.1
+  ros/class_loader:
+    type: git
+    url: https://github.com/ros/class_loader.git
+    version: 2.2.0
+  ros/kdl_parser:
+    type: git
+    url: https://github.com/ros/kdl_parser.git
+    version: 2.6.4
+  ros/pluginlib:
+    type: git
+    url: https://github.com/ros/pluginlib.git
+    version: 5.1.0
+  ros/resource_retriever:
+    type: git
+    url: https://github.com/ros/resource_retriever.git
+    version: 3.1.1
+  ros/robot_state_publisher:
+    type: git
+    url: https://github.com/ros/robot_state_publisher.git
+    version: 3.0.2
+  ros/ros_environment:
+    type: git
+    url: https://github.com/ros/ros_environment.git
+    version: 3.2.2
+  ros/ros_tutorials:
+    type: git
+    url: https://github.com/ros/ros_tutorials.git
+    version: 1.4.2
+  ros/urdfdom:
+    type: git
+    url: https://github.com/ros/urdfdom.git
+    version: 3.0.2
+  ros/urdfdom_headers:
+    type: git
+    url: https://github.com/ros/urdfdom_headers.git
+    version: 1.0.6
+  ros2/ament_cmake_ros:
+    type: git
+    url: https://github.com/ros2/ament_cmake_ros.git
+    version: 0.10.0
+  ros2/common_interfaces:
+    type: git
+    url: https://github.com/ros2/common_interfaces.git
+    version: 4.2.3
+  ros2/console_bridge_vendor:
+    type: git
+    url: https://github.com/ros2/console_bridge_vendor.git
+    version: 1.4.1
+  ros2/demos:
+    type: git
+    url: https://github.com/ros2/demos.git
+    version: 0.20.3
+  ros2/eigen3_cmake_module:
+    type: git
+    url: https://github.com/ros2/eigen3_cmake_module.git
+    version: 0.1.1
+  ros2/example_interfaces:
+    type: git
+    url: https://github.com/ros2/example_interfaces.git
+    version: 0.9.3
+  ros2/examples:
+    type: git
+    url: https://github.com/ros2/examples.git
+    version: 0.15.1
+  ros2/geometry2:
+    type: git
+    url: https://github.com/ros2/geometry2.git
+    version: 0.25.2
+  ros2/launch:
+    type: git
+    url: https://github.com/ros2/launch.git
+    version: 1.0.4
+  ros2/launch_ros:
+    type: git
+    url: https://github.com/ros2/launch_ros.git
+    version: 0.19.4
+  ros2/libyaml_vendor:
+    type: git
+    url: https://github.com/ros2/libyaml_vendor.git
+    version: 1.2.2
+  ros2/message_filters:
+    type: git
+    url: https://github.com/ros2/message_filters.git
+    version: 4.3.3
+  ros2/mimick_vendor:
+    type: git
+    url: https://github.com/ros2/mimick_vendor.git
+    version: 0.2.8
+  ros2/orocos_kdl_vendor:
+    type: git
+    url: https://github.com/ros2/orocos_kdl_vendor.git
+    version: 0.2.5
+  ros2/performance_test_fixture:
+    type: git
+    url: https://github.com/ros2/performance_test_fixture.git
+    version: 0.0.9
+  ros2/pybind11_vendor:
+    type: git
+    url: https://github.com/ros2/pybind11_vendor.git
+    version: 2.4.2
+  ros2/python_cmake_module:
+    type: git
+    url: https://github.com/ros2/python_cmake_module.git
+    version: 0.10.0
+  ros2/rcl:
+    type: git
+    url: https://github.com/ros2/rcl.git
+    version: 5.3.3
+  ros2/rcl_interfaces:
+    type: git
+    url: https://github.com/ros2/rcl_interfaces.git
+    version: 1.2.1
+  ros2/rcl_logging:
+    type: git
+    url: https://github.com/ros2/rcl_logging.git
+    version: 2.3.1
+  ros2/rclcpp:
+    type: git
+    url: https://github.com/ros2/rclcpp.git
+    version: 16.0.4
+  ros2/rclpy:
+    type: git
+    url: https://github.com/ros2/rclpy.git
+    version: 3.3.8
+  ros2/rcpputils:
+    type: git
+    url: https://github.com/ros2/rcpputils.git
+    version: 2.4.1
+  ros2/rcutils:
+    type: git
+    url: https://github.com/ros2/rcutils.git
+    version: 5.1.3
+  ros2/realtime_support:
+    type: git
+    url: https://github.com/ros2/realtime_support.git
+    version: 0.13.0
+  ros2/rmw:
+    type: git
+    url: https://github.com/ros2/rmw.git
+    version: 6.1.1
+  ros2/rmw_connextdds:
+    type: git
+    url: https://github.com/ros2/rmw_connextdds.git
+    version: 0.11.1
+  ros2/rmw_cyclonedds:
+    type: git
+    url: https://github.com/ros2/rmw_cyclonedds.git
+    version: 1.3.4
+  ros2/rmw_dds_common:
+    type: git
+    url: https://github.com/ros2/rmw_dds_common.git
+    version: 1.6.0
+  ros2/rmw_fastrtps:
+    type: git
+    url: https://github.com/ros2/rmw_fastrtps.git
+    version: 6.2.2
+  ros2/rmw_implementation:
+    type: git
+    url: https://github.com/ros2/rmw_implementation.git
+    version: 2.8.2
+  ros2/ros2_tracing:
+    type: git
+    url: https://github.com/ros2/ros2_tracing.git
+    version: 4.1.1
+  ros2/ros2cli:
+    type: git
+    url: https://github.com/ros2/ros2cli.git
+    version: 0.18.6
+  ros2/ros2cli_common_extensions:
+    type: git
+    url: https://github.com/ros2/ros2cli_common_extensions.git
+    version: 0.1.1
+  ros2/ros_testing:
+    type: git
+    url: https://github.com/ros2/ros_testing.git
+    version: 0.4.0
+  ros2/rosbag2:
+    type: git
+    url: https://github.com/ros2/rosbag2.git
+    version: 0.15.6
+  ros2/rosidl:
+    type: git
+    url: https://github.com/ros2/rosidl.git
+    version: 3.1.4
+  ros2/rosidl_dds:
+    type: git
+    url: https://github.com/ros2/rosidl_dds.git
+    version: 0.8.1
+  ros2/rosidl_defaults:
+    type: git
+    url: https://github.com/ros2/rosidl_defaults.git
+    version: 1.2.0
+  ros2/rosidl_python:
+    type: git
+    url: https://github.com/ros2/rosidl_python.git
+    version: 0.14.4
+  ros2/rosidl_runtime_py:
+    type: git
+    url: https://github.com/ros2/rosidl_runtime_py.git
+    version: 0.9.3
+  ros2/rosidl_typesupport:
+    type: git
+    url: https://github.com/ros2/rosidl_typesupport.git
+    version: 2.0.0
+  ros2/rosidl_typesupport_fastrtps:
+    type: git
+    url: https://github.com/ros2/rosidl_typesupport_fastrtps.git
+    version: 2.2.0
+  ros2/rpyutils:
+    type: git
+    url: https://github.com/ros2/rpyutils.git
+    version: 0.2.1
+  ros2/rviz:
+    type: git
+    url: https://github.com/ros2/rviz.git
+    version: 11.2.5
+  ros2/spdlog_vendor:
+    type: git
+    url: https://github.com/ros2/spdlog_vendor.git
+    version: 1.3.1
+  ros2/sros2:
+    type: git
+    url: https://github.com/ros2/sros2.git
+    version: 0.10.4
+  ros2/system_tests:
+    type: git
+    url: https://github.com/ros2/system_tests.git
+    version: 0.12.3
+  ros2/test_interface_files:
+    type: git
+    url: https://github.com/ros2/test_interface_files.git
+    version: 0.9.1
+  ros2/tinyxml2_vendor:
+    type: git
+    url: https://github.com/ros2/tinyxml2_vendor.git
+    version: 0.7.5
+  ros2/tinyxml_vendor:
+    type: git
+    url: https://github.com/ros2/tinyxml_vendor.git
+    version: 0.8.3
+  ros2/tlsf:
+    type: git
+    url: https://github.com/ros2/tlsf.git
+    version: 0.7.0
+  ros2/unique_identifier_msgs:
+    type: git
+    url: https://github.com/ros2/unique_identifier_msgs.git
+    version: 2.2.1
+  ros2/urdf:
+    type: git
+    url: https://github.com/ros2/urdf.git
+    version: 2.6.0
+  ros2/yaml_cpp_vendor:
+    type: git
+    url: https://github.com/ros2/yaml_cpp_vendor.git
+    version: 8.0.2
diff --git a/ros2/scripts/build-ros2.sh b/ros2/scripts/build-ros2.sh
new file mode 100755
index 0000000..85a3b5e
--- /dev/null
+++ b/ros2/scripts/build-ros2.sh
@@ -0,0 +1,106 @@
+#!/bin/bash
+
+set -e
+trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
+start=$(date +%s.%N)
+
+build(){
+    
+    if [ "${CPU}" == "aarch64" ]; then
+        CPUVARDIR=aarch64le
+        CPUVAR=aarch64le
+    elif [ "${CPU}" == "x86_64" ]; then
+        CPUVARDIR=x86_64
+        CPUVAR=x86_64
+    else
+        echo "Invalid architecture. Exiting..."
+        exit 1
+    fi
+
+    echo "CPU set to ${CPUVAR}"
+    echo "CPUVARDIR set to ${CPUVARDIR}"
+    export CPUVARDIR CPUVAR
+    export ARCH=${CPU}
+    export WORKSPACE=${PWD}
+    export INSTALL_BASE=${PWD}/install/${CPUVARDIR}
+    export PROJECT_ROOT=${PWD}
+    export LC_NUMERIC="en_US.UTF-8"
+    export PYTHONPYCACHEPREFIX=/tmp
+
+    rm -rf build/${CPUVARDIR}/foonathan_memory_vendor/
+    rm -rf build/${CPUVARDIR}/netifaces_vendor/
+    rm -rf build/${CPUVARDIR}/numpy_vendor/
+    rm -rf build/${CPUVARDIR}/opencv_vendor/
+    rm -rf build/${CPUVARDIR}/yaml_cpp_vendor/
+
+    colcon build --merge-install --cmake-force-configure \
+        --build-base=build/${CPUVARDIR} \
+        --install-base=install/${CPUVARDIR} \
+        --cmake-args \
+            -DCMAKE_TOOLCHAIN_FILE="${PWD}/platform/qnx.nto.toolchain.cmake" \
+            -DCMAKE_MODULE_PATH="${PWD}/modules" \
+            -DBUILD_TESTING:BOOL="OFF" \
+            -DCMAKE_BUILD_TYPE="Release" \
+            -DTHIRDPARTY=FORCE \
+            --no-warn-unused-cli \
+            -DCPU=${CPU}
+
+    # Temporary workaround for numpy naming its so's x86_64-linux-gnu.so
+    find ./install/${CPUVARDIR} -name "*cpython-*-x86_64-linux-gnu.so" | xargs rename -f "s/-x86_64-linux-gnu//g"
+    find ./install/${CPUVARDIR} -name "*cpython-38.so" | xargs rename -f "s/cpython-38.so/cpython-311.so/g"
+
+    cp -f ./scripts/qnxtest.sh install/${CPUVARDIR}
+
+    # Remove build files under test
+    find ./install/${CPUVARDIR}/test -name "CMakeFiles" -exec rm -rf {} +
+    find ./install/${CPUVARDIR}/test -name "*.o" -exec rm -f {} +
+    find ./install/${CPUVARDIR}/test -name "Makefile" -exec rm -f {} +
+    find ./install/${CPUVARDIR}/test -name "*.cmake" -exec rm -f {} +
+    find ./install/${CPUVARDIR}/test -name "*.txt" -exec rm -f {} +
+    find ./install/${CPUVARDIR}/test -name "*.make" -exec rm -f {} +
+    find ./install/${CPUVARDIR}/test -name "ament_*" -exec rm -rf {} +
+
+    # Install googletest
+    cp -f ${QNX_TARGET}/${CPUVARDIR}/usr/lib/libgtest* ./install/${CPUVARDIR}/lib
+    cp -f ${QNX_TARGET}/${CPUVARDIR}/usr/lib/libgmock* ./install/${CPUVARDIR}/lib
+
+    # Zip and install humble
+    mkdir -p ./opt/ros
+    cp -r ./install/${CPUVARDIR} ./opt/ros/humble
+
+    # Patch the python version for all scripts generated with ament_python_install_package
+    echo "Patching Python scripts..."
+    PYTHON3_PATH=$(which python3)
+    grep -rinl "\#\!$PYTHON3_PATH" ./opt/ros/humble | xargs -d '\n' sed -i '1 i #!/usr/bin/python3'
+    grep -rinl "\#\!$PYTHON3_PATH" ./opt/ros/humble | xargs -d '\n' sed -i '2 d'
+
+    tar -czf ros2_humble.tar.gz ./opt/ros/humble
+    cp -r ./opt ${QNX_TARGET}/${CPUVARDIR}
+    rm -rf ./opt
+    mv ros2_humble.tar.gz ${QNX_TARGET}/${CPUVARDIR}
+
+    echo "ros2_humble.tar.gz is created at ${QNX_TARGET}/${CPUVARDIR}/ros2_humble.tar.gz"
+    echo "Done."
+}
+
+if [ ! -d "${QNX_TARGET}" ]; then
+    echo "QNX_TARGET is not set. Exiting..."
+    exit 1
+fi
+
+CPUS=("aarch64" "x86_64")
+if [ -z "$CPU" ]; then
+    for CPU in ${CPUS[@]}; do
+        build
+    done
+elif [ $CPU == "x86_64" ] || [ $CPU == "aarch64" ] ; then
+    build
+else
+    echo "invalid $CPU please set arch to one of the following x86_64 or aarch64 or unset arch to build all platforms"
+    exit 1
+fi
+
+duration=$(echo "$(date +%s.%N) - $start" | bc)
+execution_time=`printf "%.2f seconds" $duration`
+echo "Build Successful. Build time: $execution_time"
+exit 0
diff --git a/ros2/scripts/clean.sh b/ros2/scripts/clean.sh
new file mode 100755
index 0000000..7fdb55a
--- /dev/null
+++ b/ros2/scripts/clean.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+rm -fr logs install build log
diff --git a/ros2/scripts/colcon-ignore.sh b/ros2/scripts/colcon-ignore.sh
new file mode 100755
index 0000000..b001f01
--- /dev/null
+++ b/ros2/scripts/colcon-ignore.sh
@@ -0,0 +1,34 @@
+#!/bin/bash
+
+echo 'Adding COLCON_IGNORE to packages that will not be built for QNX'
+
+echo "Ignoring uncrustify_vendor"
+touch src/ament/uncrustify_vendor/COLCON_IGNORE
+
+echo 'Ignoring ignition packages'
+touch src/ignition/COLCON_IGNORE
+
+echo "Ignoring iceoryx"
+touch src/eclipse-iceoryx/iceoryx/iceoryx_dds/cmake/cpptoml/COLCON_IGNORE
+touch src/eclipse-iceoryx/iceoryx/iceoryx_dds/COLCON_IGNORE
+touch src/eclipse-iceoryx/iceoryx/iceoryx_meta/COLCON_IGNORE
+touch src/eclipse-iceoryx/iceoryx/cmake/googletest/COLCON_IGNORE
+touch src/eclipse-iceoryx/iceoryx/cmake/cyclonedds/COLCON_IGNORE
+touch src/eclipse-iceoryx/iceoryx/doc/aspice_swe3_4/COLCON_IGNORE
+touch src/eclipse-iceoryx/iceoryx/iceoryx_examples/COLCON_IGNORE
+touch src/eclipse-iceoryx/iceoryx/tools/introspection/COLCON_IGNORE
+
+echo "Ignoring ros-visualization"
+touch src/ros-visualization/COLCON_IGNORE
+
+echo "Ignoring ros_tutorials"
+touch src/ros/ros_tutorials/COLCON_IGNORE
+
+echo "Ignoring mimick_vendor"
+touch src/ros2/mimick_vendor/COLCON_IGNORE
+
+echo "Ignoring realtime_support"
+touch src/ros2/realtime_support/COLCON_IGNORE
+
+echo "Ignoring rviz"
+touch src/ros2/rviz/COLCON_IGNORE
diff --git a/ros2/scripts/patch.sh b/ros2/scripts/patch.sh
new file mode 100755
index 0000000..bc75f64
--- /dev/null
+++ b/ros2/scripts/patch.sh
@@ -0,0 +1,42 @@
+#!/bin/bash
+
+# Function for apply a patch
+# $1 arg is the directory
+# $2 arg is the patch name
+qnx_patch () {
+    cd $1
+    git apply --whitespace=nowarn $QNX_PORTS_ROS2/qnx_patches/$2 > /dev/null
+    cd - > /dev/null
+}
+
+QNX_PORTS_ROS2=${PWD}
+
+# Apply QNX patches
+qnx_patch ./src/eclipse-cyclonedds/cyclonedds cyclonedds.patch
+qnx_patch ./src/eProsima/foonathan_memory_vendor foonathan_memory_vendor.patch
+qnx_patch ./src/osrf/osrf_testing_tools_cpp osrf_testing_tools_cpp.patch
+qnx_patch ./src/ros2/common_interfaces common_interfaces.patch
+qnx_patch ./src/ros2/rosidl_python rosidl_python.patch
+qnx_patch ./src/ros2/geometry2 geometry2.patch
+qnx_patch ./src/ros2/pybind11_vendor pybind11_vendor.patch
+qnx_patch ./src/ros2/orocos_kdl_vendor orocos_kdl_vendor.patch
+qnx_patch ./src/ros2/rcl_interfaces rcl_interfaces.patch
+qnx_patch ./src/ros2/rclpy rclpy.patch
+qnx_patch ./src/ros2/rosbag2 rosbag2.patch
+qnx_patch ./src/ros2/tinyxml2_vendor tinyxml2_vendor.patch
+qnx_patch ./src/ros2/rmw_dds_common rmw_dds_common.patch
+qnx_patch ./src/ros2/unique_identifier_msgs unique_identifier_msgs.patch
+
+qnx_patch ./src/eProsima/Fast-CDR fastcdr.patch
+qnx_patch ./src/eProsima/Fast-DDS fastrtps.patch
+
+qnx_patch ./src/ros-tooling/libstatistics_collector libstatistics_collector.patch
+qnx_patch ./src/ros2/demos demos.patch
+qnx_patch ./src/ros2/rmw/rmw rmw.patch
+qnx_patch ./src/ros2/rosidl rosidl.patch
+qnx_patch ./src/ros2/yaml_cpp_vendor yaml_cpp_vendor.patch
+qnx_patch ./src/ros2/rosidl_typesupport rosidl_typesupport.patch
+qnx_patch ./src/ros2/rosidl_typesupport_fastrtps rosidl_typesupport_fastrtps.patch
+qnx_patch ./src/ament/ament_cmake ament_cmake.patch
+
+echo "Packages patched with QNX changes"
diff --git a/ros2/scripts/qnxtest.sh b/ros2/scripts/qnxtest.sh
new file mode 100644
index 0000000..f62477d
--- /dev/null
+++ b/ros2/scripts/qnxtest.sh
@@ -0,0 +1,248 @@
+#!/bin/sh
+
+DIR=${PWD}
+
+export PYTHONPATH=$PYTHONPATH:${DIR}/usr/lib/python3.11/site-packages
+export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/ros/humble/lib
+export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${DIR}/test/libstatistics_collector
+export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${DIR}/test/rcpputils
+
+chmod -R +x ${DIR}/test
+
+# ALl tests pass
+echo Testing foonathan_memory
+cd ${DIR}/test/foonathan_memory
+./foonathan_memory_test
+
+# All tests pass
+echo Testing fastcdr
+cd ${DIR}/test/fastcdr
+./UnitTests
+
+# All tests pass
+echo Testing libstatistics_collector
+cd ${DIR}/test/libstatistics_collector
+./test_collector
+./test_moving_average_statistics
+./test_received_message_age
+./test_received_message_period
+
+# All tests pass
+echo Testing rcpputils
+cd ${DIR}/test/rcpputils
+./test_accumulator
+./test_asserts_debug
+./test_clamp
+./test_endian
+NORMAL_TEST=foo ./test_env
+EXPECTED_WORKING_DIRECTORY="${DIR}/test/rcpputils" ./test_filesystem_helper
+./test_find_and_replace
+./test_find_library
+./test_join
+./test_pointer_traits
+./test_process
+./test_scope_exit
+./test_shared_library
+./test_split
+./test_thread_safety_annotations
+./test_time
+
+# All tests pass
+echo Testing rmw
+cd ${DIR}/test/rmw/test
+./test_allocators
+./test_convert_rcutils_ret_to_rmw_ret
+./test_event
+./test_init
+./test_init_options
+./test_message_sequence
+./test_names_and_types
+./test_network_flow_endpoint
+./test_network_flow_endpoint_array
+./test_publisher_options
+./test_qos_string_conversions
+./test_sanity_checks
+./test_security_options
+./test_serialized_message
+./test_subscription_content_filter_options
+./test_subscription_options
+./test_time
+./test_topic_endpoint_info
+./test_topic_endpoint_info_array
+./test_types
+./test_validate_full_topic_name
+./test_validate_namespace
+./test_validate_node_name
+
+# All tests pass
+echo Testing rosidl_runtime_c
+cd ${DIR}/test/rosidl_runtime_c
+./test_message_type_support
+./test_primitives_sequence_functions
+./test_sequence_bound
+./test_service_type_support
+./test_string_functions
+./test_u16string_functions
+
+export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${DIR}/test/rosidl_typesupport_cpp
+echo Testing rosidl_typesupport_cpp
+cd ${DIR}/test/rosidl_typesupport_cpp
+./test_message_type_support
+./test_service_type_support
+
+echo Testing rosidl_typesupport_fastrtps_cpp
+cd ${DIR}/test/rosidl_typesupport_fastrtps_cpp
+./test_wstring_conversion
+./test_wstring_conversion_mem
+
+if [ "$QNX_SDP_VERSION" == "qnx710" ]
+then
+    echo "Fast-DDS googletests are temporarily disabled because of an incompatibility with the WillOnce function"
+    exit 0
+fi
+
+echo Testing Fast-DDS
+export CERTS_PATH=${DIR}/test/fastrtps/certs
+export TEST_DIR=${DIR}/test/fastrtps
+cd ${DIR}/test/fastrtps/blackbox
+./BlackboxTests_RTPS
+
+cd ${DIR}/test/fastrtps/communication
+./SimpleCommunicationPubSub
+cd ${DIR}/test/fastrtps/dds/communication
+./DDSCommunicationPubSub
+
+cd ${DIR}/test/fastrtps/xtypes
+./XTypesBlackBoxTests
+
+# Run blackbox tests
+cd $TEST_DIR/blackbox
+#./BlackboxTests_DDS_PIM
+./BlackboxTests_RTPS
+
+# Run xtypes tests
+cd $TEST_DIR/xtypes
+./XTypesBlackBoxTests
+
+# Run unit tests
+cd $TEST_DIR/unittest/dds/collections
+./LoanableSequenceTests
+
+cd $TEST_DIR/unittest/dds/core/condition
+./ConditionTests
+./ConditionNotifierTests
+./WaitSetImplTests
+./StatusConditionImplTests
+
+cd $TEST_DIR/unittest/dds/participant
+# Memory fault
+./ParticipantTests
+
+cd $TEST_DIR/unittest/dds/publisher
+# 1 failure
+./DataWriterTests
+# 1 failure
+./PublisherTests
+
+cd $TEST_DIR/unittest/dds/status
+./ListenerTests
+
+cd $TEST_DIR/unittest/dds/subscriber
+# 1 failure
+./DataReaderTests
+# 2 failures
+./SubscriberTests
+
+cd $TEST_DIR/unittest/dds/topic
+./TopicTests
+
+cd $TEST_DIR/unittest/dds/topic/DDSSQLFilter
+# 359 failures long double
+./DDSSQLFilterTests
+
+cd $TEST_DIR/unittest/dynamic_types
+./DynamicComplexTypesTests
+# Segfault
+./DynamicTypesTests
+./DynamicTypes_4_2_Tests
+
+cd $TEST_DIR/unittest/logging
+./LogFileTests
+
+cd $TEST_DIR/unittest/logging/log_macros
+./LogMacrosNoInfoTests
+./LogMacrosNoWarningTests
+./LogMacrosAllActiveTests
+./LogMacrosDefaultTests
+./LogMacrosInternalDebugOffTests
+./LogMacrosNoErrorTests
+
+cd $TEST_DIR/unittest/rtps/builtin
+./BuiltinDataSerializationTests
+
+cd $TEST_DIR/unittest/rtps/common
+./GuidPrefixTests
+./PortParametersTests
+./GuidTests
+./SequenceNumberTests
+./CacheChangeTests
+./GuidUtilsTests
+./EntityIdTests
+
+cd $TEST_DIR/unittest/rtps/discovery
+./EdpTests
+
+cd $TEST_DIR/unittest/rtps/history
+./BasicPoolsTests
+./CacheChangePoolTests
+./TopicPayloadPoolTests
+./ReaderHistoryTests
+
+cd $TEST_DIR/unittest/rtps/network
+./NetworkFactoryTests
+
+cd $TEST_DIR/unittest/rtps/persistence
+./PersistenceTests
+
+cd $TEST_DIR/unittest/rtps/reader
+./WriterProxyTests
+
+cd $TEST_DIR/unittest/rtps/resources/timedevent
+./TimedEventTests
+
+cd $TEST_DIR/unittest/rtps/writer
+./LivelinessManagerTests
+./ReaderProxyTests
+
+cd $TEST_DIR/unittest/statistics/rtps
+./RTPSStatisticsTests
+
+# Temporarily disable because stuck
+cd $TEST_DIR/unittest/transport
+#./TCPv4Tests
+#./TCPv6Tests
+#./UDPv4Tests
+#./UDPv6Tests
+
+cd $TEST_DIR/unittest/utils
+./BitmapRangeTests
+./ResourceLimitedVectorTests
+./SharedMutexTests
+./StringMatchingTests
+./FixedSizeQueueTests
+./FixedSizeStringTests
+./LocatorTests
+
+cd $TEST_DIR/unittest/xmlparser
+./XMLEndpointParserTests
+# Temporarily disable because stuck
+#./XMLParserTests
+./XMLProfileParserTests
+./XMLTreeTests
+
+cd $TEST_DIR/unittest/xtypes
+./XTypesTests
+
+# Temporarily disable because stuck
+cd $TEST_DIR/unittest/transport
+#./SharedMemTests
diff --git a/tensorflow/Makefile b/tensorflow/Makefile
new file mode 100644
index 0000000..5e99bf7
--- /dev/null
+++ b/tensorflow/Makefile
@@ -0,0 +1,8 @@
+LIST=OS CPU VARIANT
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/tensorflow/README.md b/tensorflow/README.md
new file mode 100644
index 0000000..1b3b61b
--- /dev/null
+++ b/tensorflow/README.md
@@ -0,0 +1,147 @@
+# Compile the port for QNX in a Docker container
+
+Pre-requisite: Install Docker on Ubuntu https://docs.docker.com/engine/install/ubuntu/
+```bash
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+# Now you are in the Docker container
+
+# source qnxsdp-env.sh in
+source ~/qnx800/qnxsdp-env.sh
+
+# Clone tensorflow-lite
+cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/libs/tensorflow.git
+# Build host flatc (used in kernel tests)
+mkdir -p flatc-native-build && cd flatc-native-build
+cmake ../tensorflow/tensorflow/lite/tools/cmake/native_tools/flatbuffers
+cmake --build .
+cd ~/qnx_workspace
+
+# Build tensorflow-lite
+QNX_PROJECT_ROOT="$(pwd)/tensorflow" QNX_PATCH_DIR="$(pwd)/qnx-ports/tensorflow/patches" TFLITE_HOST_TOOLS_DIR="$(pwd)/flatc-native-build/flatbuffers-flatc/bin/" make -C qnx-ports/tensorflow  install JLEVEL=$(nproc)
+```
+
+## Build TensorFlow Lite
+
+```bash
+# Clone the repos
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git
+git clone https://gitlab.com/qnx/libs/tensorflow.git
+# Build host flatc (used in kernel tests)
+mkdir flatc-native-build && cd flatc-native-build
+cmake ../tensorflow/tensorflow/lite/tools/cmake/native_tools/flatbuffers
+cmake --build .
+cd ..
+
+# source qnxsdp-env.sh
+source ~/qnx800/qnxsdp-env.sh
+
+# Build
+QNX_PROJECT_ROOT="$(pwd)/tensorflow" QNX_PATCH_DIR="$(pwd)/qnx-ports/tensorflow/patches" TFLITE_HOST_TOOLS_DIR="$(pwd)/flatc-native-build/flatbuffers-flatc/bin/" make -C qnx-ports/tensorflow  install JLEVEL=$(nproc)
+```
+
+## Run tests
+
+Create test directories on the target.
+
+```bash
+mkdir -p /data/tflite/libs
+mkdir -p /data/tflite/tests
+````
+
+scp those libraries to the target.
+
+```bash
+libs=(
+qnx-ports/tensorflow/nto-aarch64-le/build/libtensorflow-lite.so
+qnx-ports/tensorflow/nto-aarch64-le/build/kernels/libtensorflow-lite-test-external-main.so
+qnx-ports/tensorflow/nto-aarch64-le/build/kernels/libtensorflow-lite-test-base.so
+qnx-ports/tensorflow/nto-aarch64-le/build/lib/libgmock.so.1.12.1
+qnx-ports/tensorflow/nto-aarch64-le/build/lib/libgtest.so.1.12.1
+qnx-ports/tensorflow/nto-aarch64-le/build/lib/libgtest_main.so.1.12.1
+qnx-ports/tensorflow/nto-aarch64-le/build/_deps/nsync-build/libnsync_cpp.so.1
+qnx-ports/tensorflow/nto-aarch64-le/build/_deps/re2-build/libre2.so.11
+qnx-ports/tensorflow/nto-aarch64-le/build/_deps/abseil-cpp-build/absl/*/libabsl_*.so*
+qnx-ports/tensorflow/nto-aarch64-le/build/_deps/farmhash-build/libfarmhash.so
+qnx-ports/tensorflow/nto-aarch64-le/build/_deps/fft2d-build/libfft2d_fftsg2d.so
+qnx-ports/tensorflow/nto-aarch64-le/build/_deps/fft2d-build/libfft2d_fftsg.so
+qnx-ports/tensorflow/nto-aarch64-le/build/_deps/gemmlowp-build/libeight_bit_int_gemm.so
+qnx-ports/tensorflow/nto-aarch64-le/build/pthreadpool/libpthreadpool.so
+qnx-ports/tensorflow/nto-aarch64-le/build/_deps/google_benchmark-build/src/libbenchmark.so.1
+)
+scp ${libs[@]} root@<target ip or hostname>:/data/tflite/libs
+```
+
+scp those tests to the target.
+
+```text
+scp qnx-ports/tensorflow/nto-aarch64-le/build/kernels/*_test root@<target ip or hostname>:/data/tflite/tests
+```
+
+Run tests on the target.
+
+```bash
+# ssh into the target
+ssh root@<target-ip-address>
+
+cd /data/tflite/tests
+export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/data/tflite/libs
+
+# Run tests
+for test in $(ls | grep _test) ; do
+    ./$test
+done
+```
+
+Currently these test cases fail when `-funsafe-math-optimizations` compiler flag is set, pass when this flag is not set:
+
+```text
+SoftmaxOpTest/SoftmaxOpTest.Softmax4DInt8/0, where GetParam() = "GenericOptimized"
+SoftmaxOpTest/SoftmaxOpTest.Softmax4DInt8/1, where GetParam() = "Reference"
+LogSoftmaxOpTest/LogSoftmaxOpTest.LogSoftmaxInt8/0, where GetParam() = "GenericOptimized"
+LogSoftmaxOpTest/LogSoftmaxOpTest.LogSoftmaxInt8/1, where GetParam() = "Reference"
+QuantizedPoolingOpTest.AveragePoolActivationRelu
+QuantizedPoolingOpTest.AveragePoolActivationRelu1
+QuantizedPoolingOpTest.AveragePoolActivationRelu6
+QuantizedUInt8PoolingOpTest.MaxPoolActivationRelu
+QuantizedUInt8PoolingOpTest.MaxPoolActivationRelu1
+QuantizedUInt8PoolingOpTest.MaxPoolActivationRelu6
+ConstUint8MeanOpTest.Rounding
+```
+
+## Run minimal example
+
+In `qnx-ports/ternsorflow/common.mk`, change
+
+```bash
+cd build && cmake $(CMAKE_ARGS) $(QNX_PROJECT_ROOT)/tensorflow/lite/
+```
+
+to
+
+```bash
+cd build && cmake $(CMAKE_ARGS) $(QNX_PROJECT_ROOT)/tensorflow/lite/examples/minimal/
+```
+
+In order to build the minimal example.
+
+You can download existing tflite models and invoke the minimal example using `minimal <tflite model>` to load the model.
+
+You can follow the intructions in `tensorflow/lite/examples/minimal/minimal.cc` to fill input tensors and read output tensors to run inference using a model.
+
+## Run label_image example
+
+In `common.mk`, append this argument to `CMAKE_ARGS`, then continue with normal build process in order to build `label_image` example:
+
+```text
+-DTFLITE_ENABLE_LABEL_IMAGE=ON
+```
+
+Then follow the instructions "Download sample model and image" and "Run the sample on a desktop" in `tensorflow/tensorflow/lite/examples/label_image/README.md` to run the example.
diff --git a/tensorflow/common.mk b/tensorflow/common.mk
new file mode 100644
index 0000000..95e5455
--- /dev/null
+++ b/tensorflow/common.mk
@@ -0,0 +1,79 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+QNX_PROJECT_ROOT ?= $(PRODUCT_ROOT)/../
+
+#$(INSTALL_ROOT_$(OS)) is pointing to $QNX_TARGET
+#by default, unless it was manually re-routed to
+#a staging area by setting both INSTALL_ROOT_nto
+#and USE_INSTALL_ROOT
+INSTALL_ROOT ?= $(INSTALL_ROOT_$(OS))
+
+#A prefix path to use **on the target**. This is
+#different from INSTALL_ROOT, which refers to a
+#installation destination **on the host machine**.
+#This prefix path may be exposed to the source code,
+#the linker, or package discovery config files (.pc,
+#CMake config modules, etc.). Default is /usr/local
+PREFIX ?= /usr/local
+
+#choose Release or Debug
+CMAKE_BUILD_TYPE ?= Release
+
+#override 'all' target to bypass the default QNX build system
+ALL_DEPENDENCIES = tflite_all
+.PHONY: tflite_all
+
+
+FLAGS += -D_QNX_SOURCE -funsafe-math-optimizations -DFARMHASH_LITTLE_ENDIAN -D__LITTLE_ENDIAN__
+
+CMAKE_ARGS = -DCMAKE_TOOLCHAIN_FILE=$(PROJECT_ROOT)/qnx.nto.toolchain.cmake \
+             -DCMAKE_INSTALL_PREFIX=$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX) \
+             -DCMAKE_INSTALL_PREFIX=$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX) \
+             -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
+             -DCMAKE_INSTALL_LIBDIR=$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib \
+             -DCMAKE_INSTALL_INCLUDEDIR=$(INSTALL_ROOT)/$(PREFIX)/include/tensorflow \
+             -DEXTRA_CMAKE_C_FLAGS="$(FLAGS)" \
+             -DEXTRA_CMAKE_CXX_FLAGS="$(FLAGS)" \
+             -DCPUVARDIR=$(CPUVARDIR) \
+             -DTFLITE_ENABLE_XNNPACK=OFF \
+             -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
+             -DTFLITE_ENABLE_INSTALL=ON \
+             -DBUILD_SHARED_LIBS=ON \
+             -DTFLITE_KERNEL_TEST=ON \
+             -DTFLITE_HOST_TOOLS_DIR=$(TFLITE_HOST_TOOLS_DIR) \
+             -DQNX_PATCH_DIR=$(QNX_PATCH_DIR) \
+             -DOVERRIDABLE_FETCH_CONTENT_cpuinfo_GIT_REPOSITORY=https://gitlab.com/qnx/libs/cpuinfo \
+             -DOVERRIDABLE_FETCH_CONTENT_cpuinfo_GIT_TAG=qnx \
+             -DOVERRIDABLE_FETCH_CONTENT_ruy_GIT_REPOSITORY=https://gitlab.com/qnx/libs/ruy \
+             -DOVERRIDABLE_FETCH_CONTENT_ruy_GIT_TAG=qnx \
+             -DOVERRIDABLE_FETCH_CONTENT_abseil-cpp_GIT_REPOSITORY=https://gitlab.com/qnx/libs/abseil-cpp.git \
+             -DOVERRIDABLE_FETCH_CONTENT_abseil-cpp_GIT_TAG=qnx_20230802.1 \
+             -DOVERRIDABLE_FETCH_CONTENT_farmhash_GIT_REPOSITORY=https://gitlab.com/qnx/libs/farmhash.git \
+             -DOVERRIDABLE_FETCH_CONTENT_farmhash_GIT_TAG=qnx \
+             -DOVERRIDABLE_FETCH_CONTENT_eigen_GIT_REPOSITORY=https://gitlab.com/qnx/libs/eigen.git \
+             -DOVERRIDABLE_FETCH_CONTENT_eigen_GIT_TAG=qnx_v3.4.1 \
+             -DOVERRIDABLE_FETCH_CONTENT_google_benchmark_GIT_REPOSITORY=https://gitlab.com/qnx/libs/benchmark.git \
+             -DOVERRIDABLE_FETCH_CONTENT_google_benchmark_GIT_TAG=qnx_v1.8.3 \
+
+MAKE_ARGS ?= -j $(firstword $(JLEVEL) 1)
+
+
+include $(MKFILES_ROOT)/qtargets.mk
+
+ifndef NO_TARGET_OVERRIDE
+tflite_all:
+	@mkdir -p build
+	cd build && cmake $(CMAKE_ARGS) $(QNX_PROJECT_ROOT)/tensorflow/lite/
+	cd build && make all $(MAKE_ARGS)
+
+install check: tflite_all
+	cd build && make install $(MAKE_ARGS)
+
+clean iclean spotless:
+	rm -fr build
+
+uninstall:
+endif
diff --git a/tensorflow/nto-aarch64-le/Makefile b/tensorflow/nto-aarch64-le/Makefile
new file mode 100644
index 0000000..6f272e5
--- /dev/null
+++ b/tensorflow/nto-aarch64-le/Makefile
@@ -0,0 +1,7 @@
+include ../common.mk
+
+CMAKE_ARGS += -DCMAKE_SYSTEM_PROCESSOR=aarch64
+FLAGS      += $(VFLAG_le) $(CCVFLAG_le)
+FLAGS      += -march=armv8-a+simd
+FLAGS      += -Wno-ignored-attributes
+LDFLAGS    += $(VFLAG_le) $(LDVFLAG_le)
diff --git a/tensorflow/patches/eigen.patch b/tensorflow/patches/eigen.patch
new file mode 100644
index 0000000..8dfe127
--- /dev/null
+++ b/tensorflow/patches/eigen.patch
@@ -0,0 +1,42 @@
+diff --git a/Eigen/src/Core/util/Meta.h b/Eigen/src/Core/util/Meta.h
+index b7635f985..5876d8c89 100755
+--- a/Eigen/src/Core/util/Meta.h
++++ b/Eigen/src/Core/util/Meta.h
+@@ -61,6 +61,37 @@ typedef ::int64_t  int64_t;
+ }
+ #endif
+ 
++namespace Eigen {
++namespace numext {
++
++template <size_t Size>
++struct get_integer_by_size {
++    typedef void signed_type;
++    typedef void unsigned_type;
++};
++template <>
++struct get_integer_by_size<1> {
++    typedef int8_t signed_type;
++    typedef uint8_t unsigned_type;
++};
++template <>
++struct get_integer_by_size<2> {
++    typedef int16_t signed_type;
++    typedef uint16_t unsigned_type;
++};
++template <>
++struct get_integer_by_size<4> {
++    typedef int32_t signed_type;
++    typedef uint32_t unsigned_type;
++};
++template <>
++struct get_integer_by_size<8> {
++    typedef int64_t signed_type;
++    typedef uint64_t unsigned_type;
++};
++}
++}
++
+ namespace Eigen {
+ 
+ typedef EIGEN_DEFAULT_DENSE_INDEX_TYPE DenseIndex;
diff --git a/tensorflow/patches/pthreadpool.patch b/tensorflow/patches/pthreadpool.patch
new file mode 100644
index 0000000..d344e82
--- /dev/null
+++ b/tensorflow/patches/pthreadpool.patch
@@ -0,0 +1,27 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index 7fa4285..aef83f7 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -91,7 +91,11 @@ ELSE()
+ ENDIF()
+ 
+ ADD_LIBRARY(pthreadpool_interface INTERFACE)
+-TARGET_INCLUDE_DIRECTORIES(pthreadpool_interface INTERFACE include)
++TARGET_INCLUDE_DIRECTORIES(pthreadpool_interface 
++ INTERFACE 
++   "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>"
++   "$<INSTALL_INTERFACE:include>"
++)
+ IF(NOT PTHREADPOOL_ALLOW_DEPRECATED_API)
+   TARGET_COMPILE_DEFINITIONS(pthreadpool_interface INTERFACE PTHREADPOOL_NO_DEPRECATED_API=1)
+ ENDIF()
+@@ -163,7 +167,8 @@ IF(NOT TARGET fxdiv)
+ ENDIF()
+ TARGET_LINK_LIBRARIES(pthreadpool PRIVATE fxdiv)
+ 
+-INSTALL(TARGETS pthreadpool
++INSTALL(TARGETS pthreadpool pthreadpool_interface
++  EXPORT tensorflow-liteTargets
+   LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+   ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
+ 
diff --git a/tensorflow/qnx.nto.toolchain.cmake b/tensorflow/qnx.nto.toolchain.cmake
new file mode 100644
index 0000000..10d0148
--- /dev/null
+++ b/tensorflow/qnx.nto.toolchain.cmake
@@ -0,0 +1,40 @@
+if("$ENV{QNX_HOST}" STREQUAL "")
+    message(FATAL_ERROR "QNX_HOST environment variable not found. Please set the variable to your host's build tools")
+endif()
+if("$ENV{QNX_TARGET}" STREQUAL "")
+    message(FATAL_ERROR "QNX_TARGET environment variable not found. Please set the variable to the qnx target location")
+endif()
+
+if(CMAKE_HOST_WIN32)
+    set(HOST_EXECUTABLE_SUFFIX ".exe")
+    #convert windows paths to cmake paths
+    file(TO_CMAKE_PATH "$ENV{QNX_HOST}" QNX_HOST)
+    file(TO_CMAKE_PATH "$ENV{QNX_TARGET}" QNX_TARGET)
+else()
+    set(QNX_HOST "$ENV{QNX_HOST}")
+    set(QNX_TARGET "$ENV{QNX_TARGET}")
+endif()
+
+message(STATUS "using QNX_HOST ${QNX_HOST}")
+message(STATUS "using QNX_TARGET ${QNX_TARGET}")
+
+set(QNX TRUE)
+set(CMAKE_SYSTEM_NAME QNX)
+
+set(CMAKE_C_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_CXX_COMPILER ${QNX_HOST}/usr/bin/qcc)
+
+set(CMAKE_AR "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ar${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "archiver")
+set(CMAKE_RANLIB "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ranlib${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "ranlib")
+
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_C_FLAGS}" CACHE STRING "c_flags")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_CXX_FLAGS}" CACHE STRING "cxx_flags")
+
+set (CMAKE_FIND_ROOT_PATH ${TFLITE_EXTERNAL_DEPS_INSTALL};${TFLITE_EXTERNAL_DEPS_INSTALL}/${CPUVARDIR};${QNX_TARGET};${QNX_TARGET}/${CPUVARDIR};${CMAKE_INSTALL_PREFIX};${CMAKE_INSTALL_PREFIX}/${CPUVARDIR})
+
+set(CMAKE_SKIP_RPATH TRUE CACHE BOOL "If set, runtime paths are not added when using shared libraries.")
+set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
+set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
+set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
+
+add_compile_options(-Wno-maybe-uninitialized)
diff --git a/tinyxml2/Makefile b/tinyxml2/Makefile
new file mode 100644
index 0000000..1f25400
--- /dev/null
+++ b/tinyxml2/Makefile
@@ -0,0 +1,8 @@
+LIST=OS
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/tinyxml2/README.md b/tinyxml2/README.md
new file mode 100644
index 0000000..6403a53
--- /dev/null
+++ b/tinyxml2/README.md
@@ -0,0 +1,58 @@
+**NOTE**: QNX ports are only supported from a Linux host operating system
+
+# Compile the port for QNX in a Docker container
+
+Pre-requisite: Install Docker on Ubuntu https://docs.docker.com/engine/install/ubuntu/
+```bash
+# Create a workspace
+mkdir -p ~/qnx_workspace && cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git && cd qnx-ports
+
+# Build the Docker image and create a container
+./docker-build-qnx-image.sh
+./docker-create-container.sh
+
+# Now you are in the Docker container
+
+# source qnxsdp-env.sh in
+source ~/qnx800/qnxsdp-env.sh
+
+# Clone ComputeLibrary
+cd ~/qnx_workspace
+git clone https://gitlab.com/qnx/libs/tinyxml2.git
+
+# Build tinyxml2
+BUILD_TESTING="ON" QNX_PROJECT_ROOT="$(pwd)/tinyxml2" make -C qnx-ports/tinyxml2 install -j$(nproc)
+```
+
+# Compile the port for QNX on Ubuntu host
+
+```bash
+# Clone the repos
+git clone https://gitlab.com/qnx/everywhere/qnx-ports.git
+git clone https://gitlab.com/qnx/libs/tinyxml2.git
+
+# source qnxsdp-env.sh
+source ~/qnx800/qnxsdp-env.sh
+
+# Build tinyxml2
+BUILD_TESTING="ON" QNX_PROJECT_ROOT="$(pwd)/tinyxml2" make -C qnx-ports/tinyxml2 install -j$(nproc)
+```
+
+# How to run tests
+
+scp libraries and tests to the target.
+```bash
+scp -r $QNX_TARGET/aarch64le/usr/local/bin/tinyxml2_tests root@<target-ip-address>:/
+scp $QNX_TARGET/aarch64le/usr/local/lib/libtiny* root@<target-ip-address>:/usr/lib
+```
+
+Run tests on the target.
+```bash
+# ssh into the target
+ssh root@<target-ip-address>
+
+# Run xmltest
+cd /tinyxml2_tests
+./xmltest
+```
diff --git a/tinyxml2/common.mk b/tinyxml2/common.mk
new file mode 100644
index 0000000..e8833f0
--- /dev/null
+++ b/tinyxml2/common.mk
@@ -0,0 +1,68 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+NAME=tinyxml2
+
+QNX_PROJECT_ROOT ?= $(PRODUCT_ROOT)/../
+
+#$(INSTALL_ROOT_$(OS)) is pointing to $QNX_TARGET
+#by default, unless it was manually re-routed to
+#a staging area by setting both INSTALL_ROOT_nto
+#and USE_INSTALL_ROOT
+INSTALL_ROOT ?= $(INSTALL_ROOT_$(OS))
+
+#A prefix path to use **on the target**. This is
+#different from INSTALL_ROOT, which refers to a
+#installation destination **on the host machine**.
+#This prefix path may be exposed to the source code,
+#the linker, or package discovery config files (.pc,
+#CMake config modules, etc.). Default is /usr/local
+PREFIX ?= /usr/local
+
+BUILD_TESTING ?= OFF
+
+#choose Release or Debug
+CMAKE_BUILD_TYPE ?= Release
+
+#override 'all' target to bypass the default QNX build system
+ALL_DEPENDENCIES = tinyxml2_all
+.PHONY: tinyxml2_all install check clean
+
+include $(MKFILES_ROOT)/qtargets.mk
+
+#Headers from INSTALL_ROOT need to be made available by default
+#because CMake and pkg-config do not necessary add it automatically
+#if the include path is "default"
+CFLAGS += -I$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/include
+
+CMAKE_ARGS = -DCMAKE_TOOLCHAIN_FILE=$(PROJECT_ROOT)/qnx.nto.toolchain.cmake \
+             -DCMAKE_INSTALL_PREFIX=$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX) \
+             -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
+             -DCMAKE_SYSTEM_PROCESSOR=$(CPUVARDIR) \
+             -DCMAKE_INSTALL_LIBDIR=$(INSTALL_ROOT)/$(CPUVARDIR)/$(PREFIX)/lib \
+             -DCMAKE_INSTALL_INCLUDEDIR=$(INSTALL_ROOT)/$(PREFIX)/include/tinyxml2 \
+             -DEXTRA_CMAKE_C_FLAGS="$(CFLAGS)" \
+             -DEXTRA_CMAKE_CXX_FLAGS="$(CFLAGS)" \
+             -DEXTRA_CMAKE_ASM_FLAGS="$(FLAGS)" \
+             -DEXTRA_CMAKE_LINKER_FLAGS="$(LDFLAGS)" \
+             -DBUILD_SHARED_LIBS=1 \
+             -DBUILD_TESTING=$(BUILD_TESTING)
+
+ifndef NO_TARGET_OVERRIDE
+tinyxml2_all:
+	@mkdir -p build
+	@cd build && cmake $(CMAKE_ARGS) $(QNX_PROJECT_ROOT)
+	@cd build && make VERBOSE=1 all $(MAKE_ARGS)
+
+install check: tinyxml2_all
+	@echo Installing...
+	@cd build && make VERBOSE=1 install $(MAKE_ARGS)
+	@echo Done.
+
+clean iclean spotless:
+	rm -rf build
+
+uninstall:
+endif
diff --git a/tinyxml2/nto-aarch64-le/Makefile b/tinyxml2/nto-aarch64-le/Makefile
new file mode 100644
index 0000000..23f8a8f
--- /dev/null
+++ b/tinyxml2/nto-aarch64-le/Makefile
@@ -0,0 +1 @@
+include ../common.mk
diff --git a/tinyxml2/nto-x86_64-o/Makefile b/tinyxml2/nto-x86_64-o/Makefile
new file mode 100644
index 0000000..23f8a8f
--- /dev/null
+++ b/tinyxml2/nto-x86_64-o/Makefile
@@ -0,0 +1 @@
+include ../common.mk
diff --git a/tinyxml2/qnx.nto.toolchain.cmake b/tinyxml2/qnx.nto.toolchain.cmake
new file mode 100644
index 0000000..2b969fa
--- /dev/null
+++ b/tinyxml2/qnx.nto.toolchain.cmake
@@ -0,0 +1,27 @@
+if("$ENV{QNX_HOST}" STREQUAL "")
+    message(FATAL_ERROR "QNX_HOST environment variable not found. Please set the variable to your host's build tools")
+endif()
+if("$ENV{QNX_TARGET}" STREQUAL "")
+    message(FATAL_ERROR "QNX_TARGET environment variable not found. Please set the variable to the qnx target location")
+endif()
+
+set(QNX_HOST "$ENV{QNX_HOST}")
+set(QNX_TARGET "$ENV{QNX_TARGET}")
+
+message(STATUS "using QNX_HOST ${QNX_HOST}")
+message(STATUS "using QNX_TARGET ${QNX_TARGET}")
+
+set(QNX TRUE)
+set(CMAKE_SYSTEM_NAME QNX)
+set(CMAKE_C_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_CXX_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_ASM_COMPILER ${QNX_HOST}/usr/bin/qcc)
+set(CMAKE_AR "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ar${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "archiver")
+set(CMAKE_RANLIB "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ranlib${HOST_EXECUTABLE_SUFFIX}" CACHE PATH "ranlib")
+
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_C_FLAGS}" CACHE STRING "c_flags")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} -std=gnu++11 ${EXTRA_CMAKE_CXX_FLAGS}" CACHE STRING "cxx_flags")
+set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -Vgcc_nto${CMAKE_SYSTEM_PROCESSOR} ${EXTRA_CMAKE_ASM_FLAGS}" CACHE STRING "asm_flags")
+
+set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "exe_linker_flags")
+set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${EXTRA_CMAKE_LINKER_FLAGS}" CACHE STRING "so_linker_flags")
